
com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08009588  08009588  0000a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098f8  080098f8  0000b150  2**0
                  CONTENTS
  4 .ARM          00000008  080098f8  080098f8  0000a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009900  08009900  0000b150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009900  08009900  0000a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009904  08009904  0000a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08009908  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001858  20000150  08009a58  0000b150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019a8  08009a58  0000b9a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dae3  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7c  00000000  00000000  00018c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000893  00000000  00000000  0001c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f7e  00000000  00000000  0001cc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010520  00000000  00000000  00034b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087091  00000000  00000000  000450b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc14a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f8  00000000  00000000  000cc190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000cfa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000150 	.word	0x20000150
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009570 	.word	0x08009570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000154 	.word	0x20000154
 80001dc:	08009570 	.word	0x08009570

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b96a 	b.w	8000ed8 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	460c      	mov	r4, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14e      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c28:	4694      	mov	ip, r2
 8000c2a:	458c      	cmp	ip, r1
 8000c2c:	4686      	mov	lr, r0
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	d962      	bls.n	8000cfa <__udivmoddi4+0xde>
 8000c34:	b14a      	cbz	r2, 8000c4a <__udivmoddi4+0x2e>
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	4091      	lsls	r1, r2
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	4319      	orrs	r1, r3
 8000c46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4e:	fa1f f68c 	uxth.w	r6, ip
 8000c52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb04 f106 	mul.w	r1, r4, r6
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c72:	f080 8112 	bcs.w	8000e9a <__udivmoddi4+0x27e>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 810f 	bls.w	8000e9a <__udivmoddi4+0x27e>
 8000c7c:	3c02      	subs	r4, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	fa1f f38e 	uxth.w	r3, lr
 8000c86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb00 f606 	mul.w	r6, r0, r6
 8000c96:	429e      	cmp	r6, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x94>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ca2:	f080 80fc 	bcs.w	8000e9e <__udivmoddi4+0x282>
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	f240 80f9 	bls.w	8000e9e <__udivmoddi4+0x282>
 8000cac:	4463      	add	r3, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	1b9b      	subs	r3, r3, r6
 8000cb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11d      	cbz	r5, 8000cc2 <__udivmoddi4+0xa6>
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d905      	bls.n	8000cd6 <__udivmoddi4+0xba>
 8000cca:	b10d      	cbz	r5, 8000cd0 <__udivmoddi4+0xb4>
 8000ccc:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e7f5      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d146      	bne.n	8000d6c <__udivmoddi4+0x150>
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xcc>
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	f0c0 80f0 	bcc.w	8000ec8 <__udivmoddi4+0x2ac>
 8000ce8:	1a86      	subs	r6, r0, r2
 8000cea:	eb64 0303 	sbc.w	r3, r4, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d0e6      	beq.n	8000cc2 <__udivmoddi4+0xa6>
 8000cf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf8:	e7e3      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	f040 8090 	bne.w	8000e20 <__udivmoddi4+0x204>
 8000d00:	eba1 040c 	sub.w	r4, r1, ip
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa1f f78c 	uxth.w	r7, ip
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb08 4416 	mls	r4, r8, r6, r4
 8000d1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1e:	fb07 f006 	mul.w	r0, r7, r6
 8000d22:	4298      	cmp	r0, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x11c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x11a>
 8000d30:	4298      	cmp	r0, r3
 8000d32:	f200 80cd 	bhi.w	8000ed0 <__udivmoddi4+0x2b4>
 8000d36:	4626      	mov	r6, r4
 8000d38:	1a1c      	subs	r4, r3, r0
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d42:	fb08 4410 	mls	r4, r8, r0, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb00 f707 	mul.w	r7, r0, r7
 8000d4e:	429f      	cmp	r7, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x148>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x146>
 8000d5c:	429f      	cmp	r7, r3
 8000d5e:	f200 80b0 	bhi.w	8000ec2 <__udivmoddi4+0x2a6>
 8000d62:	4620      	mov	r0, r4
 8000d64:	1bdb      	subs	r3, r3, r7
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0x9c>
 8000d6c:	f1c1 0620 	rsb	r6, r1, #32
 8000d70:	408b      	lsls	r3, r1
 8000d72:	fa22 f706 	lsr.w	r7, r2, r6
 8000d76:	431f      	orrs	r7, r3
 8000d78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	40f4      	lsrs	r4, r6
 8000d86:	fa00 f801 	lsl.w	r8, r0, r1
 8000d8a:	0c38      	lsrs	r0, r7, #16
 8000d8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d90:	fbb4 fef0 	udiv	lr, r4, r0
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	fb00 441e 	mls	r4, r0, lr, r4
 8000d9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da0:	fb0e f90c 	mul.w	r9, lr, ip
 8000da4:	45a1      	cmp	r9, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	d90a      	bls.n	8000dc2 <__udivmoddi4+0x1a6>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000db2:	f080 8084 	bcs.w	8000ebe <__udivmoddi4+0x2a2>
 8000db6:	45a1      	cmp	r9, r4
 8000db8:	f240 8081 	bls.w	8000ebe <__udivmoddi4+0x2a2>
 8000dbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc0:	443c      	add	r4, r7
 8000dc2:	eba4 0409 	sub.w	r4, r4, r9
 8000dc6:	fa1f f983 	uxth.w	r9, r3
 8000dca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dce:	fb00 4413 	mls	r4, r0, r3, r4
 8000dd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x1d2>
 8000dde:	193c      	adds	r4, r7, r4
 8000de0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de4:	d267      	bcs.n	8000eb6 <__udivmoddi4+0x29a>
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0x29a>
 8000dea:	3b02      	subs	r3, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000df2:	fba0 9302 	umull	r9, r3, r0, r2
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	46ce      	mov	lr, r9
 8000dfe:	469c      	mov	ip, r3
 8000e00:	d351      	bcc.n	8000ea6 <__udivmoddi4+0x28a>
 8000e02:	d04e      	beq.n	8000ea2 <__udivmoddi4+0x286>
 8000e04:	b155      	cbz	r5, 8000e1c <__udivmoddi4+0x200>
 8000e06:	ebb8 030e 	subs.w	r3, r8, lr
 8000e0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e12:	40cb      	lsrs	r3, r1
 8000e14:	431e      	orrs	r6, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	e9c5 6400 	strd	r6, r4, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e750      	b.n	8000cc2 <__udivmoddi4+0xa6>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f103 	lsr.w	r1, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e30:	4094      	lsls	r4, r2
 8000e32:	430c      	orrs	r4, r1
 8000e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e3c:	fa1f f78c 	uxth.w	r7, ip
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3110 	mls	r1, r8, r0, r3
 8000e48:	0c23      	lsrs	r3, r4, #16
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f107 	mul.w	r1, r0, r7
 8000e52:	4299      	cmp	r1, r3
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x24c>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5e:	d22c      	bcs.n	8000eba <__udivmoddi4+0x29e>
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d92a      	bls.n	8000eba <__udivmoddi4+0x29e>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e70:	fb08 3311 	mls	r3, r8, r1, r3
 8000e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e78:	fb01 f307 	mul.w	r3, r1, r7
 8000e7c:	42a3      	cmp	r3, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x276>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e88:	d213      	bcs.n	8000eb2 <__udivmoddi4+0x296>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d911      	bls.n	8000eb2 <__udivmoddi4+0x296>
 8000e8e:	3902      	subs	r1, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	1ae4      	subs	r4, r4, r3
 8000e94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e98:	e739      	b.n	8000d0e <__udivmoddi4+0xf2>
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	e6f0      	b.n	8000c80 <__udivmoddi4+0x64>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e706      	b.n	8000cb0 <__udivmoddi4+0x94>
 8000ea2:	45c8      	cmp	r8, r9
 8000ea4:	d2ae      	bcs.n	8000e04 <__udivmoddi4+0x1e8>
 8000ea6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eae:	3801      	subs	r0, #1
 8000eb0:	e7a8      	b.n	8000e04 <__udivmoddi4+0x1e8>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	e7ed      	b.n	8000e92 <__udivmoddi4+0x276>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	e799      	b.n	8000dee <__udivmoddi4+0x1d2>
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e7d4      	b.n	8000e68 <__udivmoddi4+0x24c>
 8000ebe:	46d6      	mov	lr, sl
 8000ec0:	e77f      	b.n	8000dc2 <__udivmoddi4+0x1a6>
 8000ec2:	4463      	add	r3, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e74d      	b.n	8000d64 <__udivmoddi4+0x148>
 8000ec8:	4606      	mov	r6, r0
 8000eca:	4623      	mov	r3, r4
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e70f      	b.n	8000cf0 <__udivmoddi4+0xd4>
 8000ed0:	3e02      	subs	r6, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	e730      	b.n	8000d38 <__udivmoddi4+0x11c>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	@ (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <init_GPIO>:
void generate_waveforms(void);

/**
 * @brief Khởi tạo GPIOB làm output để xuất dữ liệu cho DAC0808
 */
void init_GPIO(void) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <init_GPIO+0x40>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a0c      	ldr	r2, [pc, #48]	@ (8000f58 <init_GPIO+0x40>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <init_GPIO+0x40>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
    GPIOB->MODER |= 0x5555; // PB0-PB7 là Output
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <init_GPIO+0x44>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <init_GPIO+0x44>)
 8000f40:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000f44:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000f48:	6013      	str	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <init_TIM2>:

/**
 * @brief Khởi tạo Timer2 để điều khiển tần số phát sóng
 */
void init_TIM2(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <init_TIM2+0x78>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fd8 <init_TIM2+0x78>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <init_TIM2+0x78>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
    TIM2->PSC = (SystemCoreClock / (3* wave_frequency * 256)) - 1;
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <init_TIM2+0x7c>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <init_TIM2+0x80>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	460b      	mov	r3, r1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	440b      	add	r3, r1
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->ARR = 3; //
 8000fa2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE; // Cho phép ngắt cập nhật
 8000faa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;   // Kích hoạt Timer
 8000fba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);  // Bật ngắt NVIC
 8000fca:	201c      	movs	r0, #28
 8000fcc:	f7ff ff86 	bl	8000edc <__NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <update_TIM2>:

/**
 * @brief Cập nhật Timer2 khi thay đổi tần số
 */
void update_TIM2(void) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN; // Dừng Timer trước khi cập nhật
 8000fe8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ff2:	f023 0301 	bic.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
    TIM2->PSC = (SystemCoreClock / (3 * wave_frequency * 256)) - 1;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <update_TIM2+0x60>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <update_TIM2+0x64>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4619      	mov	r1, r3
 8001004:	460b      	mov	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001014:	3b01      	subs	r3, #1
 8001016:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->EGR |= TIM_EGR_UG; // Kích hoạt cập nhật ngay lập tức
 8001018:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6153      	str	r3, [r2, #20]
    TIM2->CR1 |= TIM_CR1_CEN; // Chạy lại Timer
 8001028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000004 	.word	0x20000004
 8001048:	20000000 	.word	0x20000000
 800104c:	00000000 	.word	0x00000000

08001050 <generate_waveforms>:

/**
 * @brief Tạo bảng tra cứu dạng sóng
 */
void generate_waveforms(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++) {
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e04c      	b.n	80010f6 <generate_waveforms+0xa6>
        sin_wave[i] = (uint8_t)(128 + 127 * sin(2.0 * M_PI * i / 256.0));
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fa79 	bl	8000554 <__aeabi_i2d>
 8001062:	a330      	add	r3, pc, #192	@ (adr r3, 8001124 <generate_waveforms+0xd4>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fade 	bl	8000628 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <generate_waveforms+0xc0>)
 800107a:	f7ff fbff 	bl	800087c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	ec43 2b17 	vmov	d7, r2, r3
 8001086:	eeb0 0a47 	vmov.f32	s0, s14
 800108a:	eef0 0a67 	vmov.f32	s1, s15
 800108e:	f007 fa3f 	bl	8008510 <sin>
 8001092:	ec51 0b10 	vmov	r0, r1, d0
 8001096:	a31c      	add	r3, pc, #112	@ (adr r3, 8001108 <generate_waveforms+0xb8>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fac4 	bl	8000628 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <generate_waveforms+0xc4>)
 80010ae:	f7ff f905 	bl	80002bc <__adddf3>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd77 	bl	8000bac <__aeabi_d2uiz>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2d9      	uxtb	r1, r3
 80010c2:	4a15      	ldr	r2, [pc, #84]	@ (8001118 <generate_waveforms+0xc8>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	460a      	mov	r2, r1
 80010ca:	701a      	strb	r2, [r3, #0]
        triangle_wave[i] = i;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	b2d9      	uxtb	r1, r3
 80010d0:	4a12      	ldr	r2, [pc, #72]	@ (800111c <generate_waveforms+0xcc>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
        square_wave[i] = (i < 128) ? 255 : 0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80010de:	dc01      	bgt.n	80010e4 <generate_waveforms+0x94>
 80010e0:	21ff      	movs	r1, #255	@ 0xff
 80010e2:	e000      	b.n	80010e6 <generate_waveforms+0x96>
 80010e4:	2100      	movs	r1, #0
 80010e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <generate_waveforms+0xd0>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	460a      	mov	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 256; i++) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2bff      	cmp	r3, #255	@ 0xff
 80010fa:	ddaf      	ble.n	800105c <generate_waveforms+0xc>
    }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	00000000 	.word	0x00000000
 800110c:	405fc000 	.word	0x405fc000
 8001110:	40700000 	.word	0x40700000
 8001114:	40600000 	.word	0x40600000
 8001118:	2000016c 	.word	0x2000016c
 800111c:	2000026c 	.word	0x2000026c
 8001120:	2000036c 	.word	0x2000036c
 8001124:	54442d18 	.word	0x54442d18
 8001128:	401921fb 	.word	0x401921fb

0800112c <TIM2_IRQHandler>:

/**
 * @brief Ngắt Timer2 - Xuất dữ liệu ra DAC0808
 */
void TIM2_IRQHandler(void) {
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8001130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01a      	beq.n	8001174 <TIM2_IRQHandler+0x48>
        TIM2->SR &= ~TIM_SR_UIF; // Xóa cờ ngắt
 800113e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6113      	str	r3, [r2, #16]
        DAC_PORT->ODR = current_wave[wave_index]; // Xuất dữ liệu
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <TIM2_IRQHandler+0x54>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <TIM2_IRQHandler+0x58>)
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <TIM2_IRQHandler+0x5c>)
 8001160:	615a      	str	r2, [r3, #20]
        wave_index++;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <TIM2_IRQHandler+0x58>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <TIM2_IRQHandler+0x58>)
 800116e:	701a      	strb	r2, [r3, #0]
        if (wave_index >= 256) wave_index = 0;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <TIM2_IRQHandler+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
    }
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000470 	.word	0x20000470
 8001184:	2000046c 	.word	0x2000046c
 8001188:	40020400 	.word	0x40020400

0800118c <CDC_Receive_Callback>:

/**
 * @brief Xử lý dữ liệu nhận từ USB CDC
 */
void CDC_Receive_Callback(uint8_t* Buf, uint32_t *Len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8001196:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
	 if (Buf == NULL || *Len == 0 || *Len >= 20) return; // Bảo vệ bộ nhớ
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d062      	beq.n	8001272 <CDC_Receive_Callback+0xe6>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d05e      	beq.n	8001272 <CDC_Receive_Callback+0xe6>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b13      	cmp	r3, #19
 80011ba:	d85a      	bhi.n	8001272 <CDC_Receive_Callback+0xe6>

	char command[20] = {0}; // Khởi tạo chuỗi rỗng
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
	strncpy(command, (char*)Buf, *Len); // Sao chép dữ liệu từ Buf vào command
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 fb93 	bl	8007904 <strncpy>
	command[*Len] = '\0'; // Đảm bảo chuỗi kết thúc hợp lệ
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3328      	adds	r3, #40	@ 0x28
 80011e4:	443b      	add	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	f803 2c14 	strb.w	r2, [r3, #-20]

    char wave[3];
    int freq = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]

    if (sscanf(command, "%2sF%d", wave, &freq) == 2) {
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	f107 0210 	add.w	r2, r7, #16
 80011f8:	f107 0014 	add.w	r0, r7, #20
 80011fc:	4920      	ldr	r1, [pc, #128]	@ (8001280 <CDC_Receive_Callback+0xf4>)
 80011fe:	f006 fb4d 	bl	800789c <siscanf>
 8001202:	4603      	mov	r3, r0
 8001204:	2b02      	cmp	r3, #2
 8001206:	d137      	bne.n	8001278 <CDC_Receive_Callback+0xec>
        if (strcmp(wave, "W1") == 0) {
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	491d      	ldr	r1, [pc, #116]	@ (8001284 <CDC_Receive_Callback+0xf8>)
 800120e:	4618      	mov	r0, r3
 8001210:	f7fe ffe6 	bl	80001e0 <strcmp>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d103      	bne.n	8001222 <CDC_Receive_Callback+0x96>
            current_wave = sin_wave;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <CDC_Receive_Callback+0xfc>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <CDC_Receive_Callback+0x100>)
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e018      	b.n	8001254 <CDC_Receive_Callback+0xc8>
        } else if (strcmp(wave, "W2") == 0) {
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	491a      	ldr	r1, [pc, #104]	@ (8001290 <CDC_Receive_Callback+0x104>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7fe ffd9 	bl	80001e0 <strcmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <CDC_Receive_Callback+0xb0>
            current_wave = triangle_wave;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <CDC_Receive_Callback+0xfc>)
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <CDC_Receive_Callback+0x108>)
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e00b      	b.n	8001254 <CDC_Receive_Callback+0xc8>
        } else if (strcmp(wave, "W3") == 0) {
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4915      	ldr	r1, [pc, #84]	@ (8001298 <CDC_Receive_Callback+0x10c>)
 8001242:	4618      	mov	r0, r3
 8001244:	f7fe ffcc 	bl	80001e0 <strcmp>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d113      	bne.n	8001276 <CDC_Receive_Callback+0xea>
            current_wave = square_wave;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <CDC_Receive_Callback+0xfc>)
 8001250:	4a12      	ldr	r2, [pc, #72]	@ (800129c <CDC_Receive_Callback+0x110>)
 8001252:	601a      	str	r2, [r3, #0]
        } else {
            return; // Không có dạng sóng hợp lệ
        }

        if (freq > 0 && freq <= 10000) { // Giới hạn tần số
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	dd0e      	ble.n	8001278 <CDC_Receive_Callback+0xec>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001260:	4293      	cmp	r3, r2
 8001262:	dc09      	bgt.n	8001278 <CDC_Receive_Callback+0xec>
            wave_frequency = freq;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <CDC_Receive_Callback+0x114>)
 800126a:	801a      	strh	r2, [r3, #0]
            update_TIM2();
 800126c:	f7ff feba 	bl	8000fe4 <update_TIM2>
 8001270:	e002      	b.n	8001278 <CDC_Receive_Callback+0xec>
	 if (Buf == NULL || *Len == 0 || *Len >= 20) return; // Bảo vệ bộ nhớ
 8001272:	bf00      	nop
 8001274:	e000      	b.n	8001278 <CDC_Receive_Callback+0xec>
            return; // Không có dạng sóng hợp lệ
 8001276:	bf00      	nop
        }
    }
}
 8001278:	3728      	adds	r7, #40	@ 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08009588 	.word	0x08009588
 8001284:	08009590 	.word	0x08009590
 8001288:	20000470 	.word	0x20000470
 800128c:	2000016c 	.word	0x2000016c
 8001290:	08009594 	.word	0x08009594
 8001294:	2000026c 	.word	0x2000026c
 8001298:	08009598 	.word	0x08009598
 800129c:	2000036c 	.word	0x2000036c
 80012a0:	20000000 	.word	0x20000000

080012a4 <main>:

/**
 * @brief Chương trình chính
 */
int main(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    HAL_Init();
 80012a8:	f000 f982 	bl	80015b0 <HAL_Init>
    SystemClock_Config();
 80012ac:	f000 f818 	bl	80012e0 <SystemClock_Config>
    MX_GPIO_Init();
 80012b0:	f000 f880 	bl	80013b4 <MX_GPIO_Init>
    MX_USB_DEVICE_Init(); // Khởi tạo USB CDC
 80012b4:	f005 fe04 	bl	8006ec0 <MX_USB_DEVICE_Init>
    init_GPIO();
 80012b8:	f7ff fe2e 	bl	8000f18 <init_GPIO>
    init_TIM2();
 80012bc:	f7ff fe50 	bl	8000f60 <init_TIM2>
    generate_waveforms();
 80012c0:	f7ff fec6 	bl	8001050 <generate_waveforms>
    current_wave = sin_wave; // Mặc định dùng sóng sin
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <main+0x34>)
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <main+0x38>)
 80012c8:	601a      	str	r2, [r3, #0]
    HAL_Delay(10000);
 80012ca:	f242 7010 	movw	r0, #10000	@ 0x2710
 80012ce:	f000 f9e1 	bl	8001694 <HAL_Delay>
    while (1) {
 80012d2:	bf00      	nop
 80012d4:	e7fd      	b.n	80012d2 <main+0x2e>
 80012d6:	bf00      	nop
 80012d8:	20000470 	.word	0x20000470
 80012dc:	2000016c 	.word	0x2000016c

080012e0 <SystemClock_Config>:
}

/**
 * @brief Cấu hình Clock
 */
void SystemClock_Config(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fb00 	bl	80078f4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800132c:	4a20      	ldr	r2, [pc, #128]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8001354:	230f      	movs	r3, #15
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8001358:	2390      	movs	r3, #144	@ 0x90
 800135a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800135c:	2304      	movs	r3, #4
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 8001360:	2305      	movs	r3, #5
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f001 fe9f 	bl	80030ac <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x98>
        while(1);
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <SystemClock_Config+0x94>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001378:	230f      	movs	r3, #15
 800137a:	60fb      	str	r3, [r7, #12]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f901 	bl	800359c <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xc4>
        while(1);
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <SystemClock_Config+0xc0>
    }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_GPIO_Init>:

/**
 * @brief Khởi tạo GPIO
 */
static void MX_GPIO_Init(void) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <MX_GPIO_Init+0x40>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <MX_GPIO_Init+0x40>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <MX_GPIO_Init+0x40>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
    GPIOB->MODER |= 0x5555; // PB0-PB7 là output
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <MX_GPIO_Init+0x44>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <MX_GPIO_Init+0x44>)
 80013dc:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80013e0:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <Error_Handler>:

void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <HAL_MspInit+0x4c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	@ 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <NMI_Handler+0x4>

08001460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <MemManage_Handler+0x4>

08001470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <UsageFault_Handler+0x4>

08001480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ae:	f000 f8d1 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <OTG_FS_IRQHandler+0x10>)
 80014be:	f000 fce7 	bl	8001e90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000115c 	.word	0x2000115c

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	@ (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f006 fa16 	bl	800792c <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20010000 	.word	0x20010000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000474 	.word	0x20000474
 8001534:	200019a8 	.word	0x200019a8

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001594 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001560:	f7ff ffea 	bl	8001538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	@ (8001598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	@ (800159c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f006 f9d5 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff fe89 	bl	80012a4 <main>
  bx  lr    
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80015a0:	08009908 	.word	0x08009908
  ldr r2, =_sbss
 80015a4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80015a8:	200019a8 	.word	0x200019a8

080015ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <HAL_Init+0x40>)
 80015ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_Init+0x40>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <HAL_Init+0x40>)
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f94f 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f000 f808 	bl	80015f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff ff10 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_InitTick+0x54>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x58>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f967 	bl	80018e6 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f92f 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	@ (8001650 <HAL_InitTick+0x5c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000004 	.word	0x20000004
 800164c:	2000000c 	.word	0x2000000c
 8001650:	20000008 	.word	0x20000008

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000000c 	.word	0x2000000c
 8001678:	20000478 	.word	0x20000478

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000478 	.word	0x20000478

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <HAL_Delay+0x44>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c

080016dc <__NVIC_SetPriorityGrouping>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4907      	ldr	r1, [pc, #28]	@ (8001778 <__NVIC_EnableIRQ+0x38>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff29 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a4:	f7ff ff3e 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	6978      	ldr	r0, [r7, #20]
 80018b0:	f7ff ff8e 	bl	80017d0 <NVIC_EncodePriority>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff5d 	bl	800177c <__NVIC_SetPriority>
}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff31 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffa2 	bl	8001838 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e159      	b.n	8001bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8148 	bne.w	8001bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194e:	2b02      	cmp	r3, #2
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a2 	beq.w	8001bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b57      	ldr	r3, [pc, #348]	@ (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a56      	ldr	r2, [pc, #344]	@ (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b54      	ldr	r3, [pc, #336]	@ (8001be8 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa2:	4a52      	ldr	r2, [pc, #328]	@ (8001bec <HAL_GPIO_Init+0x2ec>)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a49      	ldr	r2, [pc, #292]	@ (8001bf0 <HAL_GPIO_Init+0x2f0>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x202>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	@ (8001bf4 <HAL_GPIO_Init+0x2f4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x1fe>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	@ (8001bf8 <HAL_GPIO_Init+0x2f8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x1fa>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a46      	ldr	r2, [pc, #280]	@ (8001bfc <HAL_GPIO_Init+0x2fc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x1f6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a45      	ldr	r2, [pc, #276]	@ (8001c00 <HAL_GPIO_Init+0x300>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x1f2>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x204>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	@ (8001bec <HAL_GPIO_Init+0x2ec>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a2f      	ldr	r2, [pc, #188]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a24      	ldr	r2, [pc, #144]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <HAL_GPIO_Init+0x304>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f aea2 	bls.w	800191c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40013c00 	.word	0x40013c00

08001c08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e101      	b.n	8001e1e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d106      	bne.n	8001c3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f005 fb27 	bl	8007288 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c48:	d102      	bne.n	8001c50 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 ff70 	bl	8003b3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7c1a      	ldrb	r2, [r3, #16]
 8001c62:	f88d 2000 	strb.w	r2, [sp]
 8001c66:	3304      	adds	r3, #4
 8001c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6a:	f001 fe4f 	bl	800390c <USB_CoreInit>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0ce      	b.n	8001e1e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 ff68 	bl	8003b5c <USB_SetCurrentMode>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0bf      	b.n	8001e1e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	e04a      	b.n	8001d3a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3315      	adds	r3, #21
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	b298      	uxth	r0, r3
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	332e      	adds	r3, #46	@ 0x2e
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3318      	adds	r3, #24
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	331c      	adds	r3, #28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d0c:	7bfa      	ldrb	r2, [r7, #15]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3320      	adds	r3, #32
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3324      	adds	r3, #36	@ 0x24
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	791b      	ldrb	r3, [r3, #4]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d3af      	bcc.n	8001ca4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e044      	b.n	8001dd4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3b5      	bcc.n	8001d4a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7c1a      	ldrb	r2, [r3, #16]
 8001de6:	f88d 2000 	strb.w	r2, [sp]
 8001dea:	3304      	adds	r3, #4
 8001dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dee:	f001 ff01 	bl	8003bf4 <USB_DevInit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e00c      	b.n	8001e1e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 ff4b 	bl	8004cb2 <USB_DevDisconnect>

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_Start+0x1c>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e022      	b.n	8001e88 <HAL_PCD_Start+0x62>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fe52 	bl	8003b18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f002 fef9 	bl	8004c70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b08d      	sub	sp, #52	@ 0x34
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 ffb7 	bl	8004e1a <USB_GetMode>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 848c 	bne.w	80027cc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 ff1b 	bl	8004cf4 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8482 	beq.w	80027ca <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 ff08 	bl	8004cf4 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d107      	bne.n	8001efe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f002 0202 	and.w	r2, r2, #2
 8001efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 fef6 	bl	8004cf4 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d161      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0210 	bic.w	r2, r2, #16
 8001f20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f003 020f 	and.w	r2, r3, #15
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	0c5b      	lsrs	r3, r3, #17
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d124      	bne.n	8001f98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d035      	beq.n	8001fc6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a38      	ldr	r0, [r7, #32]
 8001f6e:	f002 fd2d 	bl	80049cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7e:	441a      	add	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f90:	441a      	add	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	615a      	str	r2, [r3, #20]
 8001f96:	e016      	b.n	8001fc6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	0c5b      	lsrs	r3, r3, #17
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d110      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001faa:	2208      	movs	r2, #8
 8001fac:	4619      	mov	r1, r3
 8001fae:	6a38      	ldr	r0, [r7, #32]
 8001fb0:	f002 fd0c 	bl	80049cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc0:	441a      	add	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0210 	orr.w	r2, r2, #16
 8001fd4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fe8a 	bl	8004cf4 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fea:	f040 80a7 	bne.w	800213c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 fe8f 	bl	8004d1a <USB_ReadDevAllOutEpInterrupt>
 8001ffc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001ffe:	e099      	b.n	8002134 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 808e 	beq.w	8002128 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f002 feb3 	bl	8004d82 <USB_ReadDevOutEPInterrupt>
 800201c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00c      	beq.n	8002042 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002034:	461a      	mov	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800203a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fea3 	bl	8002d88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00c      	beq.n	8002066 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002058:	461a      	mov	r2, r3
 800205a:	2308      	movs	r3, #8
 800205c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800205e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 ff79 	bl	8002f58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	2310      	movs	r3, #16
 8002080:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d030      	beq.n	80020ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b80      	cmp	r3, #128	@ 0x80
 8002096:	d109      	bne.n	80020ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	78db      	ldrb	r3, [r3, #3]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f005 f9d2 	bl	8007480 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020e8:	461a      	mov	r2, r3
 80020ea:	2302      	movs	r3, #2
 80020ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002104:	461a      	mov	r2, r3
 8002106:	2320      	movs	r3, #32
 8002108:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002120:	461a      	mov	r2, r3
 8002122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002126:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	3301      	adds	r3, #1
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800212e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	f47f af62 	bne.w	8002000 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f002 fdd7 	bl	8004cf4 <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002150:	f040 80db 	bne.w	800230a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fdf8 	bl	8004d4e <USB_ReadDevAllInEpInterrupt>
 800215e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002164:	e0cd      	b.n	8002302 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80c2 	beq.w	80022f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f002 fe1e 	bl	8004dbe <USB_ReadDevInEPInterrupt>
 8002182:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d057      	beq.n	800223e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	2201      	movs	r2, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69f9      	ldr	r1, [r7, #28]
 80021aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021ae:	4013      	ands	r3, r2
 80021b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021be:	461a      	mov	r2, r3
 80021c0:	2301      	movs	r3, #1
 80021c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	799b      	ldrb	r3, [r3, #6]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d132      	bne.n	8002232 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3320      	adds	r3, #32
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4403      	add	r3, r0
 80021ec:	331c      	adds	r3, #28
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4419      	add	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4403      	add	r3, r0
 8002200:	3320      	adds	r3, #32
 8002202:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <HAL_PCD_IRQHandler+0x3a2>
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3324      	adds	r3, #36	@ 0x24
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d108      	bne.n	8002232 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800222a:	461a      	mov	r2, r3
 800222c:	2101      	movs	r1, #1
 800222e:	f002 fe25 	bl	8004e7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f005 f8a6 	bl	800738a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002254:	461a      	mov	r2, r3
 8002256:	2308      	movs	r3, #8
 8002258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	4413      	add	r3, r2
 800226c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002270:	461a      	mov	r2, r3
 8002272:	2310      	movs	r3, #16
 8002274:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800228c:	461a      	mov	r2, r3
 800228e:	2340      	movs	r3, #64	@ 0x40
 8002290:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800229c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800229e:	6a38      	ldr	r0, [r7, #32]
 80022a0:	f001 fe0c 	bl	8003ebc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	3310      	adds	r3, #16
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	78db      	ldrb	r3, [r3, #3]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d108      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2200      	movs	r2, #0
 80022c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f005 f8e9 	bl	80074a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022de:	461a      	mov	r2, r3
 80022e0:	2302      	movs	r3, #2
 80022e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fcbd 	bl	8002c70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f af2e 	bne.w	8002166 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fcf0 	bl	8004cf4 <USB_ReadInterrupts>
 8002314:	4603      	mov	r3, r0
 8002316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800231a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800231e:	d122      	bne.n	8002366 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800232e:	f023 0301 	bic.w	r3, r3, #1
 8002332:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800233a:	2b01      	cmp	r3, #1
 800233c:	d108      	bne.n	8002350 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002346:	2100      	movs	r1, #0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fea3 	bl	8003094 <HAL_PCDEx_LPM_Callback>
 800234e:	e002      	b.n	8002356 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f005 f887 	bl	8007464 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f002 fcc2 	bl	8004cf4 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800237a:	d112      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f005 f843 	bl	8007418 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80023a0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 fca4 	bl	8004cf4 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023b6:	f040 80b7 	bne.w	8002528 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2110      	movs	r1, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 fd71 	bl	8003ebc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023de:	e046      	b.n	800246e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ec:	461a      	mov	r2, r3
 80023ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002404:	0151      	lsls	r1, r2, #5
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	440a      	add	r2, r1
 800240a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800240e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002412:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002420:	461a      	mov	r2, r3
 8002422:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002426:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002438:	0151      	lsls	r1, r2, #5
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	440a      	add	r2, r1
 800243e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002442:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002458:	0151      	lsls	r1, r2, #5
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	440a      	add	r2, r1
 800245e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002462:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002466:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	3301      	adds	r3, #1
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	461a      	mov	r2, r3
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	4293      	cmp	r3, r2
 8002478:	d3b2      	bcc.n	80023e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002488:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800248c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7bdb      	ldrb	r3, [r3, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800249c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024a6:	f043 030b 	orr.w	r3, r3, #11
 80024aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024bc:	f043 030b 	orr.w	r3, r3, #11
 80024c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024c2:	e015      	b.n	80024f0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024d6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80024da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024ea:	f043 030b 	orr.w	r3, r3, #11
 80024ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002502:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002512:	461a      	mov	r2, r3
 8002514:	f002 fcb2 	bl	8004e7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 fbe1 	bl	8004cf4 <USB_ReadInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800253c:	d123      	bne.n	8002586 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fc77 	bl	8004e36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f001 fd2e 	bl	8003fae <USB_GetDevSpeed>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	f001 f9c9 	bl	80038f4 <HAL_RCC_GetHCLKFreq>
 8002562:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002568:	461a      	mov	r2, r3
 800256a:	4620      	mov	r0, r4
 800256c:	f001 fa32 	bl	80039d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f004 ff32 	bl	80073da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fbb2 	bl	8004cf4 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d10a      	bne.n	80025b0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f004 ff0f 	bl	80073be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f002 0208 	and.w	r2, r2, #8
 80025ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fb9d 	bl	8004cf4 <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c0:	2b80      	cmp	r3, #128	@ 0x80
 80025c2:	d123      	bne.n	800260c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	2301      	movs	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d4:	e014      	b.n	8002600 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	4619      	mov	r1, r3
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fb0a 	bl	8002c0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	461a      	mov	r2, r3
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	4293      	cmp	r3, r2
 800260a:	d3e4      	bcc.n	80025d6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fb6f 	bl	8004cf4 <USB_ReadInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002620:	d13c      	bne.n	800269c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002622:	2301      	movs	r3, #1
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
 8002626:	e02b      	b.n	8002680 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3318      	adds	r3, #24
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d115      	bne.n	800267a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800264e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	da12      	bge.n	800267a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3317      	adds	r3, #23
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 faca 	bl	8002c0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	791b      	ldrb	r3, [r3, #4]
 8002684:	461a      	mov	r2, r3
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	4293      	cmp	r3, r2
 800268a:	d3cd      	bcc.n	8002628 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800269a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fb27 	bl	8004cf4 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026b0:	d156      	bne.n	8002760 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b6:	e045      	b.n	8002744 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d12e      	bne.n	800273e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026e0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da2b      	bge.n	800273e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026f2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d121      	bne.n	800273e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800273a:	6053      	str	r3, [r2, #4]
            break;
 800273c:	e008      	b.n	8002750 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	791b      	ldrb	r3, [r3, #4]
 8002748:	461a      	mov	r2, r3
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	4293      	cmp	r3, r2
 800274e:	d3b3      	bcc.n	80026b8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800275e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f002 fac5 	bl	8004cf4 <USB_ReadInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002774:	d10a      	bne.n	800278c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f004 fea6 	bl	80074c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800278a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 faaf 	bl	8004cf4 <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b04      	cmp	r3, #4
 800279e:	d115      	bne.n	80027cc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f004 fe96 	bl	80074e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	e000      	b.n	80027cc <HAL_PCD_IRQHandler+0x93c>
      return;
 80027ca:	bf00      	nop
    }
  }
}
 80027cc:	3734      	adds	r7, #52	@ 0x34
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_PCD_SetAddress+0x1a>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e012      	b.n	8002812 <HAL_PCD_SetAddress+0x40>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fa0e 	bl	8004c24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	4608      	mov	r0, r1
 8002824:	4611      	mov	r1, r2
 8002826:	461a      	mov	r2, r3
 8002828:	4603      	mov	r3, r0
 800282a:	70fb      	strb	r3, [r7, #3]
 800282c:	460b      	mov	r3, r1
 800282e:	803b      	strh	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da0f      	bge.n	8002860 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	3310      	adds	r3, #16
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	3304      	adds	r3, #4
 8002856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	705a      	strb	r2, [r3, #1]
 800285e:	e00f      	b.n	8002880 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	3304      	adds	r3, #4
 8002878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800288c:	883b      	ldrh	r3, [r7, #0]
 800288e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	78ba      	ldrb	r2, [r7, #2]
 800289a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028ae:	78bb      	ldrb	r3, [r7, #2]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d102      	bne.n	80028ba <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_PCD_EP_Open+0xae>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e00e      	b.n	80028e6 <HAL_PCD_EP_Open+0xcc>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 fb8e 	bl	8003ff8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80028e4:	7afb      	ldrb	r3, [r7, #11]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da0f      	bge.n	8002922 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3310      	adds	r3, #16
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	3304      	adds	r3, #4
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	705a      	strb	r2, [r3, #1]
 8002920:	e00f      	b.n	8002942 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_PCD_EP_Close+0x6e>
 8002958:	2302      	movs	r3, #2
 800295a:	e00e      	b.n	800297a <HAL_PCD_EP_Close+0x8c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f001 fbcc 	bl	8004108 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	460b      	mov	r3, r1
 8002990:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2200      	movs	r2, #0
 80029c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	799b      	ldrb	r3, [r3, #6]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	799b      	ldrb	r3, [r3, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	6979      	ldr	r1, [r7, #20]
 80029ea:	f001 fc69 	bl	80042c0 <USB_EPStartXfer>

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	460b      	mov	r3, r1
 8002a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	3310      	adds	r3, #16
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2201      	movs	r2, #1
 8002a66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a68:	7afb      	ldrb	r3, [r7, #11]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	799b      	ldrb	r3, [r3, #6]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	799b      	ldrb	r3, [r3, #6]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	f001 fc17 	bl	80042c0 <USB_EPStartXfer>

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	7912      	ldrb	r2, [r2, #4]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e04f      	b.n	8002b5a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da0f      	bge.n	8002ae2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	705a      	strb	r2, [r3, #1]
 8002ae0:	e00d      	b.n	8002afe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_EP_SetStall+0x82>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e01d      	b.n	8002b5a <HAL_PCD_EP_SetStall+0xbe>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f001 ffa5 	bl	8004a7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7999      	ldrb	r1, [r3, #6]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f002 f996 	bl	8004e7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	7912      	ldrb	r2, [r2, #4]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e042      	b.n	8002c06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	da0f      	bge.n	8002ba8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3310      	adds	r3, #16
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	705a      	strb	r2, [r3, #1]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	4613      	mov	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_EP_ClrStall+0x86>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e00e      	b.n	8002c06 <HAL_PCD_EP_ClrStall+0xa4>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68f9      	ldr	r1, [r7, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 ffae 	bl	8004b58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da0c      	bge.n	8002c3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3310      	adds	r3, #16
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	3304      	adds	r3, #4
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e00c      	b.n	8002c56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fdcd 	bl	80047fc <USB_EPStopXfer>
 8002c62:	4603      	mov	r3, r0
 8002c64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c66:	7afb      	ldrb	r3, [r7, #11]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	3310      	adds	r3, #16
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	3304      	adds	r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d901      	bls.n	8002ca8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e06b      	b.n	8002d80 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d902      	bls.n	8002cc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ccc:	e02a      	b.n	8002d24 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d902      	bls.n	8002cea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3303      	adds	r3, #3
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f001 fe22 	bl	8004950 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	441a      	add	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	441a      	add	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d809      	bhi.n	8002d4e <PCD_WriteEmptyTxFifo+0xde>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d203      	bcs.n	8002d4e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1bf      	bne.n	8002cce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d811      	bhi.n	8002d7e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	2201      	movs	r2, #1
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	6939      	ldr	r1, [r7, #16]
 8002d76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	333c      	adds	r3, #60	@ 0x3c
 8002da0:	3304      	adds	r3, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	799b      	ldrb	r3, [r3, #6]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d17b      	bne.n	8002eb6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d015      	beq.n	8002df4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	4a61      	ldr	r2, [pc, #388]	@ (8002f50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	f240 80b9 	bls.w	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80b3 	beq.w	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002df0:	6093      	str	r3, [r2, #8]
 8002df2:	e0a7      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	6093      	str	r3, [r2, #8]
 8002e10:	e098      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 8093 	bne.w	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	4a4b      	ldr	r2, [pc, #300]	@ (8002f50 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d90f      	bls.n	8002e46 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e42:	6093      	str	r3, [r2, #8]
 8002e44:	e07e      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	0159      	lsls	r1, r3, #5
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	1ad2      	subs	r2, r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d114      	bne.n	8002ea8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e90:	461a      	mov	r2, r3
 8002e92:	2101      	movs	r1, #1
 8002e94:	f001 fff2 	bl	8004e7c <USB_EP0_OutStart>
 8002e98:	e006      	b.n	8002ea8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	441a      	add	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f004 fa50 	bl	8007354 <HAL_PCD_DataOutStageCallback>
 8002eb4:	e046      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4a26      	ldr	r2, [pc, #152]	@ (8002f54 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d124      	bne.n	8002f08 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	e032      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f004 fa27 	bl	8007354 <HAL_PCD_DataOutStageCallback>
 8002f06:	e01d      	b.n	8002f44 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d114      	bne.n	8002f38 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d108      	bne.n	8002f38 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f30:	461a      	mov	r2, r3
 8002f32:	2100      	movs	r1, #0
 8002f34:	f001 ffa2 	bl	8004e7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f004 fa08 	bl	8007354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	4f54300a 	.word	0x4f54300a
 8002f54:	4f54310a 	.word	0x4f54310a

08002f58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	333c      	adds	r3, #60	@ 0x3c
 8002f70:	3304      	adds	r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4a15      	ldr	r2, [pc, #84]	@ (8002fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d90e      	bls.n	8002fac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002faa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f004 f9bf 	bl	8007330 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d90c      	bls.n	8002fd4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	799b      	ldrb	r3, [r3, #6]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d108      	bne.n	8002fd4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2101      	movs	r1, #1
 8002fd0:	f001 ff54 	bl	8004e7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	4f54300a 	.word	0x4f54300a

08002fe4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003002:	883b      	ldrh	r3, [r7, #0]
 8003004:	0419      	lsls	r1, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	430a      	orrs	r2, r1
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003010:	e028      	b.n	8003064 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	4413      	add	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e00d      	b.n	8003042 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3340      	adds	r3, #64	@ 0x40
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4413      	add	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	3301      	adds	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	3b01      	subs	r3, #1
 8003048:	429a      	cmp	r2, r3
 800304a:	d3ec      	bcc.n	8003026 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800304c:	883b      	ldrh	r3, [r7, #0]
 800304e:	0418      	lsls	r0, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	3b01      	subs	r3, #1
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	4302      	orrs	r2, r0
 800305c:	3340      	adds	r3, #64	@ 0x40
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	460b      	mov	r3, r1
 800307c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e267      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d075      	beq.n	80031b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ca:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d00c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b85      	ldr	r3, [pc, #532]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d112      	bne.n	8003108 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e2:	4b82      	ldr	r3, [pc, #520]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030ee:	d10b      	bne.n	8003108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	4b7e      	ldr	r3, [pc, #504]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d05b      	beq.n	80031b4 <HAL_RCC_OscConfig+0x108>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d157      	bne.n	80031b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e242      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d106      	bne.n	8003120 <HAL_RCC_OscConfig+0x74>
 8003112:	4b76      	ldr	r3, [pc, #472]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a75      	ldr	r2, [pc, #468]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e01d      	b.n	800315c <HAL_RCC_OscConfig+0xb0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x98>
 800312a:	4b70      	ldr	r3, [pc, #448]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a6f      	ldr	r2, [pc, #444]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b6d      	ldr	r3, [pc, #436]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6c      	ldr	r2, [pc, #432]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0xb0>
 8003144:	4b69      	ldr	r3, [pc, #420]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a68      	ldr	r2, [pc, #416]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b66      	ldr	r3, [pc, #408]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a65      	ldr	r2, [pc, #404]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe fa8a 	bl	800167c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fa86 	bl	800167c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e207      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0xc0>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fa76 	bl	800167c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fa72 	bl	800167c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1f3      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	4b51      	ldr	r3, [pc, #324]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0xe8>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d063      	beq.n	800328a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031c2:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b47      	ldr	r3, [pc, #284]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031da:	4b44      	ldr	r3, [pc, #272]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d116      	bne.n	8003214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	4b41      	ldr	r3, [pc, #260]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_RCC_OscConfig+0x152>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e1c7      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4937      	ldr	r1, [pc, #220]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	e03a      	b.n	800328a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d020      	beq.n	800325e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321c:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCC_OscConfig+0x244>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fe fa2b 	bl	800167c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322a:	f7fe fa27 	bl	800167c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1a8      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	4b2b      	ldr	r3, [pc, #172]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4925      	ldr	r1, [pc, #148]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800325e:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_RCC_OscConfig+0x244>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fa0a 	bl	800167c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fe fa06 	bl	800167c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e187      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d036      	beq.n	8003304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <HAL_RCC_OscConfig+0x248>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe f9ea 	bl	800167c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fe f9e6 	bl	800167c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e167      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_RCC_OscConfig+0x240>)
 80032c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x200>
 80032ca:	e01b      	b.n	8003304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032cc:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_RCC_OscConfig+0x248>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d2:	f7fe f9d3 	bl	800167c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	e00e      	b.n	80032f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032da:	f7fe f9cf 	bl	800167c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d907      	bls.n	80032f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e150      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	42470000 	.word	0x42470000
 80032f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b88      	ldr	r3, [pc, #544]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ea      	bne.n	80032da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8097 	beq.w	8003440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b81      	ldr	r3, [pc, #516]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10f      	bne.n	8003342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4b7d      	ldr	r3, [pc, #500]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	4a7c      	ldr	r2, [pc, #496]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	@ 0x40
 8003332:	4b7a      	ldr	r3, [pc, #488]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333e:	2301      	movs	r3, #1
 8003340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003342:	4b77      	ldr	r3, [pc, #476]	@ (8003520 <HAL_RCC_OscConfig+0x474>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d118      	bne.n	8003380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334e:	4b74      	ldr	r3, [pc, #464]	@ (8003520 <HAL_RCC_OscConfig+0x474>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a73      	ldr	r2, [pc, #460]	@ (8003520 <HAL_RCC_OscConfig+0x474>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335a:	f7fe f98f 	bl	800167c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fe f98b 	bl	800167c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e10c      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003374:	4b6a      	ldr	r3, [pc, #424]	@ (8003520 <HAL_RCC_OscConfig+0x474>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x2ea>
 8003388:	4b64      	ldr	r3, [pc, #400]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338c:	4a63      	ldr	r2, [pc, #396]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	@ 0x70
 8003394:	e01c      	b.n	80033d0 <HAL_RCC_OscConfig+0x324>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b05      	cmp	r3, #5
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x30c>
 800339e:	4b5f      	ldr	r3, [pc, #380]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	4a5e      	ldr	r2, [pc, #376]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033aa:	4b5c      	ldr	r3, [pc, #368]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ae:	4a5b      	ldr	r2, [pc, #364]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0x324>
 80033b8:	4b58      	ldr	r3, [pc, #352]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033bc:	4a57      	ldr	r2, [pc, #348]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c4:	4b55      	ldr	r3, [pc, #340]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c8:	4a54      	ldr	r2, [pc, #336]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033ca:	f023 0304 	bic.w	r3, r3, #4
 80033ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe f950 	bl	800167c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e0:	f7fe f94c 	bl	800167c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0cb      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	4b49      	ldr	r3, [pc, #292]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ee      	beq.n	80033e0 <HAL_RCC_OscConfig+0x334>
 8003402:	e014      	b.n	800342e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003404:	f7fe f93a 	bl	800167c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe f936 	bl	800167c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0b5      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003422:	4b3e      	ldr	r3, [pc, #248]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ee      	bne.n	800340c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003434:	4b39      	ldr	r3, [pc, #228]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	4a38      	ldr	r2, [pc, #224]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 800343a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800343e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80a1 	beq.w	800358c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344a:	4b34      	ldr	r3, [pc, #208]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d05c      	beq.n	8003510 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d141      	bne.n	80034e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <HAL_RCC_OscConfig+0x478>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe f90a 	bl	800167c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe f906 	bl	800167c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e087      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	4b27      	ldr	r3, [pc, #156]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	3b01      	subs	r3, #1
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	491b      	ldr	r1, [pc, #108]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003524 <HAL_RCC_OscConfig+0x478>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fe f8df 	bl	800167c <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fe f8db 	bl	800167c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e05c      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d4:	4b11      	ldr	r3, [pc, #68]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x416>
 80034e0:	e054      	b.n	800358c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <HAL_RCC_OscConfig+0x478>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe f8c8 	bl	800167c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe f8c4 	bl	800167c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e045      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_OscConfig+0x470>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x444>
 800350e:	e03d      	b.n	800358c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d107      	bne.n	8003528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e038      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
 800351c:	40023800 	.word	0x40023800
 8003520:	40007000 	.word	0x40007000
 8003524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_RCC_OscConfig+0x4ec>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d028      	beq.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d121      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d11a      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003558:	4013      	ands	r3, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800355e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	3b01      	subs	r3, #1
 8003572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d107      	bne.n	8003588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0cc      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b68      	ldr	r3, [pc, #416]	@ (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d90c      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b65      	ldr	r3, [pc, #404]	@ (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b63      	ldr	r3, [pc, #396]	@ (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b8      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f0:	4b59      	ldr	r3, [pc, #356]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a58      	ldr	r2, [pc, #352]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003608:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a52      	ldr	r2, [pc, #328]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003614:	4b50      	ldr	r3, [pc, #320]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	494d      	ldr	r1, [pc, #308]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d044      	beq.n	80036bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d119      	bne.n	800367a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d003      	beq.n	800365a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	2b03      	cmp	r3, #3
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365a:	4b3f      	ldr	r3, [pc, #252]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366a:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e067      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367a:	4b37      	ldr	r3, [pc, #220]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 0203 	bic.w	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4934      	ldr	r1, [pc, #208]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800368c:	f7fd fff6 	bl	800167c <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	e00a      	b.n	80036aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003694:	f7fd fff2 	bl	800167c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e04f      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 020c 	and.w	r2, r3, #12
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d1eb      	bne.n	8003694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036bc:	4b25      	ldr	r3, [pc, #148]	@ (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d20c      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b22      	ldr	r3, [pc, #136]	@ (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e032      	b.n	800374a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4916      	ldr	r1, [pc, #88]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370e:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490e      	ldr	r1, [pc, #56]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003722:	f000 f821 	bl	8003768 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490a      	ldr	r1, [pc, #40]	@ (800375c <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	fa22 f303 	lsr.w	r3, r2, r3
 800373a:	4a09      	ldr	r2, [pc, #36]	@ (8003760 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fd ff56 	bl	80015f4 <HAL_InitTick>

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40023c00 	.word	0x40023c00
 8003758:	40023800 	.word	0x40023800
 800375c:	080095f0 	.word	0x080095f0
 8003760:	20000004 	.word	0x20000004
 8003764:	20000008 	.word	0x20000008

08003768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b090      	sub	sp, #64	@ 0x40
 800376e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003780:	4b59      	ldr	r3, [pc, #356]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d00d      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x40>
 800378c:	2b08      	cmp	r3, #8
 800378e:	f200 80a1 	bhi.w	80038d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0x34>
 8003796:	2b04      	cmp	r3, #4
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800379a:	e09b      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b53      	ldr	r3, [pc, #332]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x184>)
 800379e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037a0:	e09b      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a2:	4b53      	ldr	r3, [pc, #332]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037a6:	e098      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a8:	4b4f      	ldr	r3, [pc, #316]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b2:	4b4d      	ldr	r3, [pc, #308]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d028      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b4a      	ldr	r3, [pc, #296]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	2200      	movs	r2, #0
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d0:	2100      	movs	r1, #0
 80037d2:	4b47      	ldr	r3, [pc, #284]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d4:	fb03 f201 	mul.w	r2, r3, r1
 80037d8:	2300      	movs	r3, #0
 80037da:	fb00 f303 	mul.w	r3, r0, r3
 80037de:	4413      	add	r3, r2
 80037e0:	4a43      	ldr	r2, [pc, #268]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e2:	fba0 1202 	umull	r1, r2, r0, r2
 80037e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e8:	460a      	mov	r2, r1
 80037ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ee:	4413      	add	r3, r2
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f4:	2200      	movs	r2, #0
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	61fa      	str	r2, [r7, #28]
 80037fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003802:	f7fd f9f3 	bl	8000bec <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4613      	mov	r3, r2
 800380c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800380e:	e053      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003810:	4b35      	ldr	r3, [pc, #212]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	2200      	movs	r2, #0
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	617a      	str	r2, [r7, #20]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003822:	f04f 0b00 	mov.w	fp, #0
 8003826:	4652      	mov	r2, sl
 8003828:	465b      	mov	r3, fp
 800382a:	f04f 0000 	mov.w	r0, #0
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	0159      	lsls	r1, r3, #5
 8003834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003838:	0150      	lsls	r0, r2, #5
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	ebb2 080a 	subs.w	r8, r2, sl
 8003842:	eb63 090b 	sbc.w	r9, r3, fp
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003852:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003856:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800385a:	ebb2 0408 	subs.w	r4, r2, r8
 800385e:	eb63 0509 	sbc.w	r5, r3, r9
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	00eb      	lsls	r3, r5, #3
 800386c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003870:	00e2      	lsls	r2, r4, #3
 8003872:	4614      	mov	r4, r2
 8003874:	461d      	mov	r5, r3
 8003876:	eb14 030a 	adds.w	r3, r4, sl
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	eb45 030b 	adc.w	r3, r5, fp
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800388e:	4629      	mov	r1, r5
 8003890:	028b      	lsls	r3, r1, #10
 8003892:	4621      	mov	r1, r4
 8003894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003898:	4621      	mov	r1, r4
 800389a:	028a      	lsls	r2, r1, #10
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a2:	2200      	movs	r2, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	60fa      	str	r2, [r7, #12]
 80038a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ac:	f7fd f99e 	bl	8000bec <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038b8:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038d2:	e002      	b.n	80038da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x184>)
 80038d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3740      	adds	r7, #64	@ 0x40
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	017d7840 	.word	0x017d7840

080038f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f8:	4b03      	ldr	r3, [pc, #12]	@ (8003908 <HAL_RCC_GetHCLKFreq+0x14>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000004 	.word	0x20000004

0800390c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800390c:	b084      	sub	sp, #16
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	f107 001c 	add.w	r0, r7, #28
 800391a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800391e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003922:	2b01      	cmp	r3, #1
 8003924:	d123      	bne.n	800396e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800393a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800394e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f001 fae8 	bl	8004f38 <USB_CoreReset>
 8003968:	4603      	mov	r3, r0
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e01b      	b.n	80039a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f001 fadc 	bl	8004f38 <USB_CoreReset>
 8003980:	4603      	mov	r3, r0
 8003982:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003984:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	@ 0x38
 8003998:	e005      	b.n	80039a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039a6:	7fbb      	ldrb	r3, [r7, #30]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10b      	bne.n	80039c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f043 0206 	orr.w	r2, r3, #6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039d0:	b004      	add	sp, #16
 80039d2:	4770      	bx	lr

080039d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d165      	bne.n	8003ab4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a41      	ldr	r2, [pc, #260]	@ (8003af0 <USB_SetTurnaroundTime+0x11c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d906      	bls.n	80039fe <USB_SetTurnaroundTime+0x2a>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4a40      	ldr	r2, [pc, #256]	@ (8003af4 <USB_SetTurnaroundTime+0x120>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d202      	bcs.n	80039fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80039f8:	230f      	movs	r3, #15
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e062      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4a3c      	ldr	r2, [pc, #240]	@ (8003af4 <USB_SetTurnaroundTime+0x120>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d306      	bcc.n	8003a14 <USB_SetTurnaroundTime+0x40>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4a3b      	ldr	r2, [pc, #236]	@ (8003af8 <USB_SetTurnaroundTime+0x124>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d202      	bcs.n	8003a14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a0e:	230e      	movs	r3, #14
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e057      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <USB_SetTurnaroundTime+0x124>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d306      	bcc.n	8003a2a <USB_SetTurnaroundTime+0x56>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <USB_SetTurnaroundTime+0x128>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d202      	bcs.n	8003a2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a24:	230d      	movs	r3, #13
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e04c      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4a33      	ldr	r2, [pc, #204]	@ (8003afc <USB_SetTurnaroundTime+0x128>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d306      	bcc.n	8003a40 <USB_SetTurnaroundTime+0x6c>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4a32      	ldr	r2, [pc, #200]	@ (8003b00 <USB_SetTurnaroundTime+0x12c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e041      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	@ (8003b00 <USB_SetTurnaroundTime+0x12c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d906      	bls.n	8003a56 <USB_SetTurnaroundTime+0x82>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003b04 <USB_SetTurnaroundTime+0x130>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d802      	bhi.n	8003a56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a50:	230b      	movs	r3, #11
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e036      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4a2a      	ldr	r2, [pc, #168]	@ (8003b04 <USB_SetTurnaroundTime+0x130>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d906      	bls.n	8003a6c <USB_SetTurnaroundTime+0x98>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4a29      	ldr	r2, [pc, #164]	@ (8003b08 <USB_SetTurnaroundTime+0x134>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d802      	bhi.n	8003a6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a66:	230a      	movs	r3, #10
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	e02b      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	@ (8003b08 <USB_SetTurnaroundTime+0x134>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d906      	bls.n	8003a82 <USB_SetTurnaroundTime+0xae>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4a25      	ldr	r2, [pc, #148]	@ (8003b0c <USB_SetTurnaroundTime+0x138>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d202      	bcs.n	8003a82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a7c:	2309      	movs	r3, #9
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e020      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a21      	ldr	r2, [pc, #132]	@ (8003b0c <USB_SetTurnaroundTime+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d306      	bcc.n	8003a98 <USB_SetTurnaroundTime+0xc4>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <USB_SetTurnaroundTime+0x13c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d802      	bhi.n	8003a98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003a92:	2308      	movs	r3, #8
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e015      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <USB_SetTurnaroundTime+0x13c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d906      	bls.n	8003aae <USB_SetTurnaroundTime+0xda>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b14 <USB_SetTurnaroundTime+0x140>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d202      	bcs.n	8003aae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003aa8:	2307      	movs	r3, #7
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e00a      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003aae:	2306      	movs	r3, #6
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e007      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003aba:	2309      	movs	r3, #9
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e001      	b.n	8003ac4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ac0:	2309      	movs	r3, #9
 8003ac2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	029b      	lsls	r3, r3, #10
 8003ad8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	00d8acbf 	.word	0x00d8acbf
 8003af4:	00e4e1c0 	.word	0x00e4e1c0
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	01067380 	.word	0x01067380
 8003b00:	011a499f 	.word	0x011a499f
 8003b04:	01312cff 	.word	0x01312cff
 8003b08:	014ca43f 	.word	0x014ca43f
 8003b0c:	016e3600 	.word	0x016e3600
 8003b10:	01a6ab1f 	.word	0x01a6ab1f
 8003b14:	01e84800 	.word	0x01e84800

08003b18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 0201 	bic.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d115      	bne.n	8003baa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b8a:	200a      	movs	r0, #10
 8003b8c:	f7fd fd82 	bl	8001694 <HAL_Delay>
      ms += 10U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	330a      	adds	r3, #10
 8003b94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f001 f93f 	bl	8004e1a <USB_GetMode>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d01e      	beq.n	8003be0 <USB_SetCurrentMode+0x84>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ba6:	d9f0      	bls.n	8003b8a <USB_SetCurrentMode+0x2e>
 8003ba8:	e01a      	b.n	8003be0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d115      	bne.n	8003bdc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bbc:	200a      	movs	r0, #10
 8003bbe:	f7fd fd69 	bl	8001694 <HAL_Delay>
      ms += 10U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 f926 	bl	8004e1a <USB_GetMode>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <USB_SetCurrentMode+0x84>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bd8:	d9f0      	bls.n	8003bbc <USB_SetCurrentMode+0x60>
 8003bda:	e001      	b.n	8003be0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e005      	b.n	8003bec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2bc8      	cmp	r3, #200	@ 0xc8
 8003be4:	d101      	bne.n	8003bea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e009      	b.n	8003c28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	3340      	adds	r3, #64	@ 0x40
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	3301      	adds	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b0e      	cmp	r3, #14
 8003c2c:	d9f2      	bls.n	8003c14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d11c      	bne.n	8003c70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c6e:	e00b      	b.n	8003c88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10d      	bne.n	8003cb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f968 	bl	8003f7c <USB_SetDevSpeed>
 8003cac:	e008      	b.n	8003cc0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cae:	2101      	movs	r1, #1
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f963 	bl	8003f7c <USB_SetDevSpeed>
 8003cb6:	e003      	b.n	8003cc0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cb8:	2103      	movs	r1, #3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f95e 	bl	8003f7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cc0:	2110      	movs	r1, #16
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8fa 	bl	8003ebc <USB_FlushTxFifo>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f924 	bl	8003f20 <USB_FlushRxFifo>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2300      	movs	r3, #0
 8003cec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	e043      	b.n	8003d94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d22:	d118      	bne.n	8003d56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d36:	461a      	mov	r2, r3
 8003d38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e013      	b.n	8003d68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e008      	b.n	8003d68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d74:	461a      	mov	r2, r3
 8003d76:	2300      	movs	r3, #0
 8003d78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d86:	461a      	mov	r2, r3
 8003d88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	3301      	adds	r3, #1
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d98:	461a      	mov	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d3b5      	bcc.n	8003d0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e043      	b.n	8003e2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dbc:	d118      	bne.n	8003df0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10a      	bne.n	8003dda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e013      	b.n	8003e02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de6:	461a      	mov	r2, r3
 8003de8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e008      	b.n	8003e02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2300      	movs	r3, #0
 8003e00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2300      	movs	r3, #0
 8003e12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e20:	461a      	mov	r2, r3
 8003e22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e32:	461a      	mov	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d3b5      	bcc.n	8003da6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003e5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d105      	bne.n	8003e70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f043 0210 	orr.w	r2, r3, #16
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <USB_DevInit+0x2c4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f043 0208 	orr.w	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ea0:	f043 0304 	orr.w	r3, r3, #4
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eb4:	b004      	add	sp, #16
 8003eb6:	4770      	bx	lr
 8003eb8:	803c3800 	.word	0x803c3800

08003ebc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ed6:	d901      	bls.n	8003edc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e01b      	b.n	8003f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	daf2      	bge.n	8003eca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	019b      	lsls	r3, r3, #6
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f00:	d901      	bls.n	8003f06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e006      	b.n	8003f14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d0f0      	beq.n	8003ef4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f38:	d901      	bls.n	8003f3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e018      	b.n	8003f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	daf2      	bge.n	8003f2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3301      	adds	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f5c:	d901      	bls.n	8003f62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e006      	b.n	8003f70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d0f0      	beq.n	8003f50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0306 	and.w	r3, r3, #6
 8003fc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
 8003fd2:	e00a      	b.n	8003fea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d002      	beq.n	8003fe0 <USB_GetDevSpeed+0x32>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b06      	cmp	r3, #6
 8003fde:	d102      	bne.n	8003fe6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	75fb      	strb	r3, [r7, #23]
 8003fe4:	e001      	b.n	8003fea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003fe6:	230f      	movs	r3, #15
 8003fe8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d13a      	bne.n	800408a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401a:	69da      	ldr	r2, [r3, #28]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	b29b      	uxth	r3, r3
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004032:	4313      	orrs	r3, r2
 8004034:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d155      	bne.n	80040f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	791b      	ldrb	r3, [r3, #4]
 8004066:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004068:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	059b      	lsls	r3, r3, #22
 800406e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004070:	4313      	orrs	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e036      	b.n	80040f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11a      	bne.n	80040f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040de:	430b      	orrs	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d161      	bne.n	80041e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004136:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800413a:	d11f      	bne.n	800417c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004156:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800415a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	0151      	lsls	r1, r2, #5
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	440a      	add	r2, r1
 8004172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800417a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800419c:	4013      	ands	r3, r2
 800419e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041c0:	4013      	ands	r3, r2
 80041c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0159      	lsls	r1, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	440b      	add	r3, r1
 80041da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041de:	4619      	mov	r1, r3
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <USB_DeactivateEndpoint+0x1b0>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
 80041e6:	e060      	b.n	80042aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041fe:	d11f      	bne.n	8004240 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800421a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800421e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	0151      	lsls	r1, r2, #5
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	440a      	add	r2, r1
 8004236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800423a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800423e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	43db      	mvns	r3, r3
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004260:	4013      	ands	r3, r2
 8004262:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	2101      	movs	r1, #1
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	43db      	mvns	r3, r3
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004284:	4013      	ands	r3, r2
 8004286:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0159      	lsls	r1, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	440b      	add	r3, r1
 800429e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a2:	4619      	mov	r1, r3
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <USB_DeactivateEndpoint+0x1b4>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	ec337800 	.word	0xec337800
 80042bc:	eff37800 	.word	0xeff37800

080042c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	@ 0x28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	4613      	mov	r3, r2
 80042cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 817f 	bne.w	80045e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d132      	bne.n	8004350 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004304:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004308:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800430c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	440a      	add	r2, r1
 8004324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004328:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800432c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	440a      	add	r2, r1
 8004344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004348:	0cdb      	lsrs	r3, r3, #19
 800434a:	04db      	lsls	r3, r3, #19
 800434c:	6113      	str	r3, [r2, #16]
 800434e:	e097      	b.n	8004480 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800436a:	0cdb      	lsrs	r3, r3, #19
 800436c:	04db      	lsls	r3, r3, #19
 800436e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800438a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800438e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004392:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d11a      	bne.n	80043d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d903      	bls.n	80043ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043cc:	6113      	str	r3, [r2, #16]
 80043ce:	e044      	b.n	800445a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4413      	add	r3, r2
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	8afb      	ldrh	r3, [r7, #22]
 80043f6:	04d9      	lsls	r1, r3, #19
 80043f8:	4ba4      	ldr	r3, [pc, #656]	@ (800468c <USB_EPStartXfer+0x3cc>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	0148      	lsls	r0, r1, #5
 8004400:	69f9      	ldr	r1, [r7, #28]
 8004402:	4401      	add	r1, r0
 8004404:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d122      	bne.n	800445a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	0151      	lsls	r1, r2, #5
 8004426:	69fa      	ldr	r2, [r7, #28]
 8004428:	440a      	add	r2, r1
 800442a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800442e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004432:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	8afb      	ldrh	r3, [r7, #22]
 8004444:	075b      	lsls	r3, r3, #29
 8004446:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	0148      	lsls	r0, r1, #5
 800444e:	69f9      	ldr	r1, [r7, #28]
 8004450:	4401      	add	r1, r0
 8004452:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004470:	69b9      	ldr	r1, [r7, #24]
 8004472:	0148      	lsls	r0, r1, #5
 8004474:	69f9      	ldr	r1, [r7, #28]
 8004476:	4401      	add	r1, r0
 8004478:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800447c:	4313      	orrs	r3, r2
 800447e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d14b      	bne.n	800451e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	791b      	ldrb	r3, [r3, #4]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d128      	bne.n	80044fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d110      	bne.n	80044dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e00f      	b.n	80044fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	0151      	lsls	r1, r2, #5
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	440a      	add	r2, r1
 80044f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	0151      	lsls	r1, r2, #5
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	440a      	add	r2, r1
 8004512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004516:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e166      	b.n	80047ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	440a      	add	r2, r1
 8004534:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004538:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800453c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	791b      	ldrb	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d015      	beq.n	8004572 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 814e 	beq.w	80047ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800456c:	4313      	orrs	r3, r2
 800456e:	634b      	str	r3, [r1, #52]	@ 0x34
 8004570:	e13c      	b.n	80047ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d110      	bne.n	80045a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800459c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00f      	b.n	80045c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	68d9      	ldr	r1, [r3, #12]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	b298      	uxth	r0, r3
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4603      	mov	r3, r0
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f9b9 	bl	8004950 <USB_WritePacket>
 80045de:	e105      	b.n	80047ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045fa:	0cdb      	lsrs	r3, r3, #19
 80045fc:	04db      	lsls	r3, r3, #19
 80045fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	69fa      	ldr	r2, [r7, #28]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800461a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800461e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004622:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d132      	bne.n	8004690 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	0148      	lsls	r0, r1, #5
 800465c:	69f9      	ldr	r1, [r7, #28]
 800465e:	4401      	add	r1, r0
 8004660:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004664:	4313      	orrs	r3, r2
 8004666:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004682:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004686:	6113      	str	r3, [r2, #16]
 8004688:	e062      	b.n	8004750 <USB_EPStartXfer+0x490>
 800468a:	bf00      	nop
 800468c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d123      	bne.n	80046e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	0148      	lsls	r0, r1, #5
 80046b2:	69f9      	ldr	r1, [r7, #28]
 80046b4:	4401      	add	r1, r0
 80046b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	0151      	lsls	r1, r2, #5
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	440a      	add	r2, r1
 80046d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046dc:	6113      	str	r3, [r2, #16]
 80046de:	e037      	b.n	8004750 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4413      	add	r3, r2
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	8afa      	ldrh	r2, [r7, #22]
 80046fc:	fb03 f202 	mul.w	r2, r3, r2
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	8afb      	ldrh	r3, [r7, #22]
 8004714:	04d9      	lsls	r1, r3, #19
 8004716:	4b38      	ldr	r3, [pc, #224]	@ (80047f8 <USB_EPStartXfer+0x538>)
 8004718:	400b      	ands	r3, r1
 800471a:	69b9      	ldr	r1, [r7, #24]
 800471c:	0148      	lsls	r0, r1, #5
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	4401      	add	r1, r0
 8004722:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	0148      	lsls	r0, r1, #5
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	4401      	add	r1, r0
 8004748:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800474c:	4313      	orrs	r3, r2
 800474e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d009      	beq.n	8004772 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	460a      	mov	r2, r1
 8004770:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	791b      	ldrb	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d128      	bne.n	80047cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d110      	bne.n	80047ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e00f      	b.n	80047cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	1ff80000 	.word	0x1ff80000

080047fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d14a      	bne.n	80048b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004832:	f040 8086 	bne.w	8004942 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	7812      	ldrb	r2, [r2, #0]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004854:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004858:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004878:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800487c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3301      	adds	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f242 7210 	movw	r2, #10000	@ 0x2710
 800488a:	4293      	cmp	r3, r2
 800488c:	d902      	bls.n	8004894 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
          break;
 8004892:	e056      	b.n	8004942 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048ac:	d0e7      	beq.n	800487e <USB_EPStopXfer+0x82>
 80048ae:	e048      	b.n	8004942 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048c8:	d13b      	bne.n	8004942 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800490c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004910:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800491e:	4293      	cmp	r3, r2
 8004920:	d902      	bls.n	8004928 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
          break;
 8004926:	e00c      	b.n	8004942 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800493c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004940:	d0e7      	beq.n	8004912 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	@ 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4611      	mov	r1, r2
 800495c:	461a      	mov	r2, r3
 800495e:	460b      	mov	r3, r1
 8004960:	71fb      	strb	r3, [r7, #7]
 8004962:	4613      	mov	r3, r2
 8004964:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800496e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d123      	bne.n	80049be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004976:	88bb      	ldrh	r3, [r7, #4]
 8004978:	3303      	adds	r3, #3
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e018      	b.n	80049b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	031a      	lsls	r2, r3, #12
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004990:	461a      	mov	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	3301      	adds	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	3301      	adds	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3e2      	bcc.n	8004984 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3724      	adds	r7, #36	@ 0x24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b08b      	sub	sp, #44	@ 0x2c
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	623b      	str	r3, [r7, #32]
 80049f6:	e014      	b.n	8004a22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a02:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a06:	3301      	adds	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	3301      	adds	r3, #1
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	3301      	adds	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3e6      	bcc.n	80049f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a2a:	8bfb      	ldrh	r3, [r7, #30]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01e      	beq.n	8004a6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f107 0310 	add.w	r3, r7, #16
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	701a      	strb	r2, [r3, #0]
      i++;
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	3301      	adds	r3, #1
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004a62:	8bfb      	ldrh	r3, [r7, #30]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a68:	8bfb      	ldrh	r3, [r7, #30]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ea      	bne.n	8004a44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	372c      	adds	r7, #44	@ 0x2c
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d12c      	bne.n	8004af2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db12      	blt.n	8004ad0 <USB_EPSetStall+0x54>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ace:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e02b      	b.n	8004b4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db12      	blt.n	8004b2a <USB_EPSetStall+0xae>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00f      	beq.n	8004b2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	0151      	lsls	r1, r2, #5
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	440a      	add	r2, r1
 8004b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d128      	bne.n	8004bc6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d003      	beq.n	8004ba4 <USB_EPClearStall+0x4c>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	791b      	ldrb	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d138      	bne.n	8004c16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	e027      	b.n	8004c16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004be4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	791b      	ldrb	r3, [r3, #4]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d003      	beq.n	8004bf6 <USB_EPClearStall+0x9e>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d10f      	bne.n	8004c16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004c46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004c58:	68f9      	ldr	r1, [r7, #12]
 8004c5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c9e:	f023 0302 	bic.w	r3, r3, #2
 8004ca2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	0c1b      	lsrs	r3, r3, #16
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	b29b      	uxth	r3, r3
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004db0:	68bb      	ldr	r3, [r7, #8]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b087      	sub	sp, #28
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	fa22 f303 	lsr.w	r3, r2, r3
 8004dee:	01db      	lsls	r3, r3, #7
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e54:	f023 0307 	bic.w	r3, r3, #7
 8004e58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	460b      	mov	r3, r1
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	333c      	adds	r3, #60	@ 0x3c
 8004e92:	3304      	adds	r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <USB_EP0_OutStart+0xb8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d90a      	bls.n	8004eb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004eac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004eb0:	d101      	bne.n	8004eb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e037      	b.n	8004f26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee4:	f043 0318 	orr.w	r3, r3, #24
 8004ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ef8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004efc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10f      	bne.n	8004f24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	4f54300a 	.word	0x4f54300a

08004f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f50:	d901      	bls.n	8004f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e01b      	b.n	8004f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	daf2      	bge.n	8004f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f043 0201 	orr.w	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f7a:	d901      	bls.n	8004f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d0f0      	beq.n	8004f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004fa8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004fac:	f002 fc32 	bl	8007814 <USBD_static_malloc>
 8004fb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d109      	bne.n	8004fcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	32b0      	adds	r2, #176	@ 0xb0
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0d4      	b.n	8005176 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004fcc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f002 fc8e 	bl	80078f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	32b0      	adds	r2, #176	@ 0xb0
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	32b0      	adds	r2, #176	@ 0xb0
 8004ff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	7c1b      	ldrb	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d138      	bne.n	8005076 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005004:	4b5e      	ldr	r3, [pc, #376]	@ (8005180 <USBD_CDC_Init+0x1e4>)
 8005006:	7819      	ldrb	r1, [r3, #0]
 8005008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800500c:	2202      	movs	r2, #2
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f002 fadd 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005014:	4b5a      	ldr	r3, [pc, #360]	@ (8005180 <USBD_CDC_Init+0x1e4>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	3324      	adds	r3, #36	@ 0x24
 800502a:	2201      	movs	r2, #1
 800502c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800502e:	4b55      	ldr	r3, [pc, #340]	@ (8005184 <USBD_CDC_Init+0x1e8>)
 8005030:	7819      	ldrb	r1, [r3, #0]
 8005032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005036:	2202      	movs	r2, #2
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f002 fac8 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800503e:	4b51      	ldr	r3, [pc, #324]	@ (8005184 <USBD_CDC_Init+0x1e8>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005056:	2201      	movs	r2, #1
 8005058:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800505a:	4b4b      	ldr	r3, [pc, #300]	@ (8005188 <USBD_CDC_Init+0x1ec>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	f003 020f 	and.w	r2, r3, #15
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3326      	adds	r3, #38	@ 0x26
 8005070:	2210      	movs	r2, #16
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e035      	b.n	80050e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005076:	4b42      	ldr	r3, [pc, #264]	@ (8005180 <USBD_CDC_Init+0x1e4>)
 8005078:	7819      	ldrb	r1, [r3, #0]
 800507a:	2340      	movs	r3, #64	@ 0x40
 800507c:	2202      	movs	r2, #2
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f002 faa5 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005084:	4b3e      	ldr	r3, [pc, #248]	@ (8005180 <USBD_CDC_Init+0x1e4>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f003 020f 	and.w	r2, r3, #15
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3324      	adds	r3, #36	@ 0x24
 800509a:	2201      	movs	r2, #1
 800509c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800509e:	4b39      	ldr	r3, [pc, #228]	@ (8005184 <USBD_CDC_Init+0x1e8>)
 80050a0:	7819      	ldrb	r1, [r3, #0]
 80050a2:	2340      	movs	r3, #64	@ 0x40
 80050a4:	2202      	movs	r2, #2
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f002 fa91 	bl	80075ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80050ac:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <USBD_CDC_Init+0x1e8>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80050c4:	2201      	movs	r2, #1
 80050c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005188 <USBD_CDC_Init+0x1ec>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f003 020f 	and.w	r2, r3, #15
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	3326      	adds	r3, #38	@ 0x26
 80050de:	2210      	movs	r2, #16
 80050e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050e2:	4b29      	ldr	r3, [pc, #164]	@ (8005188 <USBD_CDC_Init+0x1ec>)
 80050e4:	7819      	ldrb	r1, [r3, #0]
 80050e6:	2308      	movs	r3, #8
 80050e8:	2203      	movs	r2, #3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f002 fa6f 	bl	80075ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050f0:	4b25      	ldr	r3, [pc, #148]	@ (8005188 <USBD_CDC_Init+0x1ec>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f003 020f 	and.w	r2, r3, #15
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3324      	adds	r3, #36	@ 0x24
 8005106:	2201      	movs	r2, #1
 8005108:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	33b0      	adds	r3, #176	@ 0xb0
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005140:	2302      	movs	r3, #2
 8005142:	e018      	b.n	8005176 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	7c1b      	ldrb	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800514c:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <USBD_CDC_Init+0x1e8>)
 800514e:	7819      	ldrb	r1, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005156:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f002 fb26 	bl	80077ac <USBD_LL_PrepareReceive>
 8005160:	e008      	b.n	8005174 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005162:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <USBD_CDC_Init+0x1e8>)
 8005164:	7819      	ldrb	r1, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f002 fb1c 	bl	80077ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000097 	.word	0x20000097
 8005184:	20000098 	.word	0x20000098
 8005188:	20000099 	.word	0x20000099

0800518c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005198:	4b3a      	ldr	r3, [pc, #232]	@ (8005284 <USBD_CDC_DeInit+0xf8>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f002 fa3b 	bl	800761a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80051a4:	4b37      	ldr	r3, [pc, #220]	@ (8005284 <USBD_CDC_DeInit+0xf8>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	f003 020f 	and.w	r2, r3, #15
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3324      	adds	r3, #36	@ 0x24
 80051ba:	2200      	movs	r2, #0
 80051bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80051be:	4b32      	ldr	r3, [pc, #200]	@ (8005288 <USBD_CDC_DeInit+0xfc>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f002 fa28 	bl	800761a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80051ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005288 <USBD_CDC_DeInit+0xfc>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	f003 020f 	and.w	r2, r3, #15
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051e2:	2200      	movs	r2, #0
 80051e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80051e6:	4b29      	ldr	r3, [pc, #164]	@ (800528c <USBD_CDC_DeInit+0x100>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f002 fa14 	bl	800761a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051f2:	4b26      	ldr	r3, [pc, #152]	@ (800528c <USBD_CDC_DeInit+0x100>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3324      	adds	r3, #36	@ 0x24
 8005208:	2200      	movs	r2, #0
 800520a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800520c:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <USBD_CDC_DeInit+0x100>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f003 020f 	and.w	r2, r3, #15
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3326      	adds	r3, #38	@ 0x26
 8005222:	2200      	movs	r2, #0
 8005224:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	32b0      	adds	r2, #176	@ 0xb0
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01f      	beq.n	8005278 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	33b0      	adds	r3, #176	@ 0xb0
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	32b0      	adds	r2, #176	@ 0xb0
 8005256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525a:	4618      	mov	r0, r3
 800525c:	f002 fae8 	bl	8007830 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	32b0      	adds	r2, #176	@ 0xb0
 800526a:	2100      	movs	r1, #0
 800526c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000097 	.word	0x20000097
 8005288:	20000098 	.word	0x20000098
 800528c:	20000099 	.word	0x20000099

08005290 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	32b0      	adds	r2, #176	@ 0xb0
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	e0bf      	b.n	8005440 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d050      	beq.n	800536e <USBD_CDC_Setup+0xde>
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	f040 80af 	bne.w	8005430 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	88db      	ldrh	r3, [r3, #6]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03a      	beq.n	8005350 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	b25b      	sxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da1b      	bge.n	800531c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	33b0      	adds	r3, #176	@ 0xb0
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	88d2      	ldrh	r2, [r2, #6]
 8005300:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	88db      	ldrh	r3, [r3, #6]
 8005306:	2b07      	cmp	r3, #7
 8005308:	bf28      	it	cs
 800530a:	2307      	movcs	r3, #7
 800530c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	89fa      	ldrh	r2, [r7, #14]
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fd53 	bl	8006dc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800531a:	e090      	b.n	800543e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	785a      	ldrb	r2, [r3, #1]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	88db      	ldrh	r3, [r3, #6]
 800532a:	2b3f      	cmp	r3, #63	@ 0x3f
 800532c:	d803      	bhi.n	8005336 <USBD_CDC_Setup+0xa6>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	88db      	ldrh	r3, [r3, #6]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	e000      	b.n	8005338 <USBD_CDC_Setup+0xa8>
 8005336:	2240      	movs	r2, #64	@ 0x40
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800533e:	6939      	ldr	r1, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005346:	461a      	mov	r2, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 fd65 	bl	8006e18 <USBD_CtlPrepareRx>
      break;
 800534e:	e076      	b.n	800543e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	33b0      	adds	r3, #176	@ 0xb0
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	7850      	ldrb	r0, [r2, #1]
 8005366:	2200      	movs	r2, #0
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	4798      	blx	r3
      break;
 800536c:	e067      	b.n	800543e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b0b      	cmp	r3, #11
 8005374:	d851      	bhi.n	800541a <USBD_CDC_Setup+0x18a>
 8005376:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <USBD_CDC_Setup+0xec>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053ad 	.word	0x080053ad
 8005380:	08005429 	.word	0x08005429
 8005384:	0800541b 	.word	0x0800541b
 8005388:	0800541b 	.word	0x0800541b
 800538c:	0800541b 	.word	0x0800541b
 8005390:	0800541b 	.word	0x0800541b
 8005394:	0800541b 	.word	0x0800541b
 8005398:	0800541b 	.word	0x0800541b
 800539c:	0800541b 	.word	0x0800541b
 80053a0:	0800541b 	.word	0x0800541b
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	08005401 	.word	0x08005401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d107      	bne.n	80053c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053b8:	f107 030a 	add.w	r3, r7, #10
 80053bc:	2202      	movs	r2, #2
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 fcfd 	bl	8006dc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053c6:	e032      	b.n	800542e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f001 fc7b 	bl	8006cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80053d0:	2303      	movs	r3, #3
 80053d2:	75fb      	strb	r3, [r7, #23]
          break;
 80053d4:	e02b      	b.n	800542e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d107      	bne.n	80053f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053e2:	f107 030d 	add.w	r3, r7, #13
 80053e6:	2201      	movs	r2, #1
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 fce8 	bl	8006dc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053f0:	e01d      	b.n	800542e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 fc66 	bl	8006cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80053fa:	2303      	movs	r3, #3
 80053fc:	75fb      	strb	r3, [r7, #23]
          break;
 80053fe:	e016      	b.n	800542e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b03      	cmp	r3, #3
 800540a:	d00f      	beq.n	800542c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fc59 	bl	8006cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005414:	2303      	movs	r3, #3
 8005416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005418:	e008      	b.n	800542c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 fc52 	bl	8006cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005422:	2303      	movs	r3, #3
 8005424:	75fb      	strb	r3, [r7, #23]
          break;
 8005426:	e002      	b.n	800542e <USBD_CDC_Setup+0x19e>
          break;
 8005428:	bf00      	nop
 800542a:	e008      	b.n	800543e <USBD_CDC_Setup+0x1ae>
          break;
 800542c:	bf00      	nop
      }
      break;
 800542e:	e006      	b.n	800543e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fc47 	bl	8006cc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005438:	2303      	movs	r3, #3
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	bf00      	nop
  }

  return (uint8_t)ret;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800545a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	32b0      	adds	r2, #176	@ 0xb0
 8005466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800546e:	2303      	movs	r3, #3
 8005470:	e065      	b.n	800553e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	32b0      	adds	r2, #176	@ 0xb0
 800547c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005480:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	f003 020f 	and.w	r2, r3, #15
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	3318      	adds	r3, #24
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02f      	beq.n	80054fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	f003 020f 	and.w	r2, r3, #15
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	3318      	adds	r3, #24
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	f003 010f 	and.w	r1, r3, #15
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	460b      	mov	r3, r1
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	440b      	add	r3, r1
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4403      	add	r3, r0
 80054c4:	331c      	adds	r3, #28
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d112      	bne.n	80054fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80054d6:	78fb      	ldrb	r3, [r7, #3]
 80054d8:	f003 020f 	and.w	r2, r3, #15
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3318      	adds	r3, #24
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054ee:	78f9      	ldrb	r1, [r7, #3]
 80054f0:	2300      	movs	r3, #0
 80054f2:	2200      	movs	r2, #0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f002 f938 	bl	800776a <USBD_LL_Transmit>
 80054fa:	e01f      	b.n	800553c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	33b0      	adds	r3, #176	@ 0xb0
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d010      	beq.n	800553c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	33b0      	adds	r3, #176	@ 0xb0
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	32b0      	adds	r2, #176	@ 0xb0
 800555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005560:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	32b0      	adds	r2, #176	@ 0xb0
 800556c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005574:	2303      	movs	r3, #3
 8005576:	e01a      	b.n	80055ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 f936 	bl	80077ee <USBD_LL_GetRxDataSize>
 8005582:	4602      	mov	r2, r0
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	33b0      	adds	r3, #176	@ 0xb0
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80055a8:	4611      	mov	r1, r2
 80055aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	32b0      	adds	r2, #176	@ 0xb0
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e024      	b.n	8005622 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	33b0      	adds	r3, #176	@ 0xb0
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d019      	beq.n	8005620 <USBD_CDC_EP0_RxReady+0x6a>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055f2:	2bff      	cmp	r3, #255	@ 0xff
 80055f4:	d014      	beq.n	8005620 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	33b0      	adds	r3, #176	@ 0xb0
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800560e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005616:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	22ff      	movs	r2, #255	@ 0xff
 800561c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005634:	2182      	movs	r1, #130	@ 0x82
 8005636:	4818      	ldr	r0, [pc, #96]	@ (8005698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005638:	f000 fd0f 	bl	800605a <USBD_GetEpDesc>
 800563c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800563e:	2101      	movs	r1, #1
 8005640:	4815      	ldr	r0, [pc, #84]	@ (8005698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005642:	f000 fd0a 	bl	800605a <USBD_GetEpDesc>
 8005646:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005648:	2181      	movs	r1, #129	@ 0x81
 800564a:	4813      	ldr	r0, [pc, #76]	@ (8005698 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800564c:	f000 fd05 	bl	800605a <USBD_GetEpDesc>
 8005650:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2210      	movs	r2, #16
 800565c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d006      	beq.n	8005672 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2200      	movs	r2, #0
 8005668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800566c:	711a      	strb	r2, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d006      	beq.n	8005686 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005680:	711a      	strb	r2, [r3, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2243      	movs	r2, #67	@ 0x43
 800568a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800568c:	4b02      	ldr	r3, [pc, #8]	@ (8005698 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000054 	.word	0x20000054

0800569c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056a4:	2182      	movs	r1, #130	@ 0x82
 80056a6:	4818      	ldr	r0, [pc, #96]	@ (8005708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056a8:	f000 fcd7 	bl	800605a <USBD_GetEpDesc>
 80056ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80056ae:	2101      	movs	r1, #1
 80056b0:	4815      	ldr	r0, [pc, #84]	@ (8005708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056b2:	f000 fcd2 	bl	800605a <USBD_GetEpDesc>
 80056b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056b8:	2181      	movs	r1, #129	@ 0x81
 80056ba:	4813      	ldr	r0, [pc, #76]	@ (8005708 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056bc:	f000 fccd 	bl	800605a <USBD_GetEpDesc>
 80056c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2210      	movs	r2, #16
 80056cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d006      	beq.n	80056e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2200      	movs	r2, #0
 80056d8:	711a      	strb	r2, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f042 0202 	orr.w	r2, r2, #2
 80056e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d006      	beq.n	80056f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	711a      	strb	r2, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f042 0202 	orr.w	r2, r2, #2
 80056f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2243      	movs	r2, #67	@ 0x43
 80056fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056fc:	4b02      	ldr	r3, [pc, #8]	@ (8005708 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000054 	.word	0x20000054

0800570c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005714:	2182      	movs	r1, #130	@ 0x82
 8005716:	4818      	ldr	r0, [pc, #96]	@ (8005778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005718:	f000 fc9f 	bl	800605a <USBD_GetEpDesc>
 800571c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800571e:	2101      	movs	r1, #1
 8005720:	4815      	ldr	r0, [pc, #84]	@ (8005778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005722:	f000 fc9a 	bl	800605a <USBD_GetEpDesc>
 8005726:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005728:	2181      	movs	r1, #129	@ 0x81
 800572a:	4813      	ldr	r0, [pc, #76]	@ (8005778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800572c:	f000 fc95 	bl	800605a <USBD_GetEpDesc>
 8005730:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2210      	movs	r2, #16
 800573c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d006      	beq.n	8005752 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2200      	movs	r2, #0
 8005748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800574c:	711a      	strb	r2, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005760:	711a      	strb	r2, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2243      	movs	r2, #67	@ 0x43
 800576a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800576c:	4b02      	ldr	r3, [pc, #8]	@ (8005778 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000054 	.word	0x20000054

0800577c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	220a      	movs	r2, #10
 8005788:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800578a:	4b03      	ldr	r3, [pc, #12]	@ (8005798 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	20000010 	.word	0x20000010

0800579c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e009      	b.n	80057c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	33b0      	adds	r3, #176	@ 0xb0
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	32b0      	adds	r2, #176	@ 0xb0
 80057e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e008      	b.n	8005808 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	32b0      	adds	r2, #176	@ 0xb0
 8005828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005834:	2303      	movs	r3, #3
 8005836:	e004      	b.n	8005842 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	32b0      	adds	r2, #176	@ 0xb0
 8005862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005866:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	32b0      	adds	r2, #176	@ 0xb0
 8005872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800587a:	2303      	movs	r3, #3
 800587c:	e018      	b.n	80058b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	7c1b      	ldrb	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005886:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <USBD_CDC_ReceivePacket+0x68>)
 8005888:	7819      	ldrb	r1, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 ff89 	bl	80077ac <USBD_LL_PrepareReceive>
 800589a:	e008      	b.n	80058ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800589c:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <USBD_CDC_ReceivePacket+0x68>)
 800589e:	7819      	ldrb	r1, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058a6:	2340      	movs	r3, #64	@ 0x40
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 ff7f 	bl	80077ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000098 	.word	0x20000098

080058bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e01f      	b.n	8005914 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	79fa      	ldrb	r2, [r7, #7]
 8005906:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f001 fdf9 	bl	8007500 <USBD_LL_Init>
 800590e:	4603      	mov	r3, r0
 8005910:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005930:	2303      	movs	r3, #3
 8005932:	e025      	b.n	8005980 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	32ae      	adds	r2, #174	@ 0xae
 8005946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00f      	beq.n	8005970 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	32ae      	adds	r2, #174	@ 0xae
 800595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005960:	f107 020e 	add.w	r2, r7, #14
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
 8005968:	4602      	mov	r2, r0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fe01 	bl	8007598 <USBD_LL_Start>
 8005996:	4603      	mov	r3, r0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80059a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	4611      	mov	r1, r2
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	4611      	mov	r1, r2
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a14:	2303      	movs	r3, #3
 8005a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 f90c 	bl	8006c52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d01a      	beq.n	8005a94 <USBD_LL_SetupStage+0x72>
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d822      	bhi.n	8005aa8 <USBD_LL_SetupStage+0x86>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <USBD_LL_SetupStage+0x4a>
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d00a      	beq.n	8005a80 <USBD_LL_SetupStage+0x5e>
 8005a6a:	e01d      	b.n	8005aa8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fb63 	bl	8006140 <USBD_StdDevReq>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7e:	e020      	b.n	8005ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fbcb 	bl	8006224 <USBD_StdItfReq>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73fb      	strb	r3, [r7, #15]
      break;
 8005a92:	e016      	b.n	8005ac2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fc2d 	bl	80062fc <USBD_StdEPReq>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa6:	e00c      	b.n	8005ac2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005aae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fdce 	bl	8007658 <USBD_LL_StallEP>
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	bf00      	nop
  }

  return ret;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d16e      	bne.n	8005bc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005aea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	f040 8098 	bne.w	8005c28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d913      	bls.n	8005b2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	1ad2      	subs	r2, r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	bf28      	it	cs
 8005b1e:	4613      	movcs	r3, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f001 f994 	bl	8006e52 <USBD_CtlContinueRx>
 8005b2a:	e07d      	b.n	8005c28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d014      	beq.n	8005b64 <USBD_LL_DataOutStage+0x98>
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d81d      	bhi.n	8005b7a <USBD_LL_DataOutStage+0xae>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <USBD_LL_DataOutStage+0x7c>
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d003      	beq.n	8005b4e <USBD_LL_DataOutStage+0x82>
 8005b46:	e018      	b.n	8005b7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	75bb      	strb	r3, [r7, #22]
            break;
 8005b4c:	e018      	b.n	8005b80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	4619      	mov	r1, r3
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fa64 	bl	8006026 <USBD_CoreFindIF>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	75bb      	strb	r3, [r7, #22]
            break;
 8005b62:	e00d      	b.n	8005b80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fa66 	bl	8006040 <USBD_CoreFindEP>
 8005b74:	4603      	mov	r3, r0
 8005b76:	75bb      	strb	r3, [r7, #22]
            break;
 8005b78:	e002      	b.n	8005b80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	75bb      	strb	r3, [r7, #22]
            break;
 8005b7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b80:	7dbb      	ldrb	r3, [r7, #22]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d113      	bne.n	8005bba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b92:	7dba      	ldrb	r2, [r7, #22]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	32ae      	adds	r2, #174	@ 0xae
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ba2:	7dba      	ldrb	r2, [r7, #22]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005baa:	7dba      	ldrb	r2, [r7, #22]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	32ae      	adds	r2, #174	@ 0xae
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f001 f95a 	bl	8006e74 <USBD_CtlSendStatus>
 8005bc0:	e032      	b.n	8005c28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fa37 	bl	8006040 <USBD_CoreFindEP>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bd6:	7dbb      	ldrb	r3, [r7, #22]
 8005bd8:	2bff      	cmp	r3, #255	@ 0xff
 8005bda:	d025      	beq.n	8005c28 <USBD_LL_DataOutStage+0x15c>
 8005bdc:	7dbb      	ldrb	r3, [r7, #22]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d122      	bne.n	8005c28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d117      	bne.n	8005c1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005bee:	7dba      	ldrb	r2, [r7, #22]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	32ae      	adds	r2, #174	@ 0xae
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005bfe:	7dba      	ldrb	r2, [r7, #22]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c06:	7dba      	ldrb	r2, [r7, #22]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	32ae      	adds	r2, #174	@ 0xae
 8005c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	7afa      	ldrb	r2, [r7, #11]
 8005c14:	4611      	mov	r1, r2
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	4798      	blx	r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	e000      	b.n	8005c2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c40:	7afb      	ldrb	r3, [r7, #11]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d16f      	bne.n	8005d26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3314      	adds	r3, #20
 8005c4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d15a      	bne.n	8005d0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d914      	bls.n	8005c8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	461a      	mov	r2, r3
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f001 f8bc 	bl	8006df6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f001 fd91 	bl	80077ac <USBD_LL_PrepareReceive>
 8005c8a:	e03f      	b.n	8005d0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d11c      	bne.n	8005cd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d316      	bcc.n	8005cd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d20f      	bcs.n	8005cd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f001 f89d 	bl	8006df6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f001 fd6e 	bl	80077ac <USBD_LL_PrepareReceive>
 8005cd0:	e01c      	b.n	8005d0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d10f      	bne.n	8005cfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cfe:	2180      	movs	r1, #128	@ 0x80
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f001 fca9 	bl	8007658 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 f8c7 	bl	8006e9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03a      	beq.n	8005d8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fe42 	bl	80059a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005d24:	e032      	b.n	8005d8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d26:	7afb      	ldrb	r3, [r7, #11]
 8005d28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f985 	bl	8006040 <USBD_CoreFindEP>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2bff      	cmp	r3, #255	@ 0xff
 8005d3e:	d025      	beq.n	8005d8c <USBD_LL_DataInStage+0x15a>
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d122      	bne.n	8005d8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d11c      	bne.n	8005d8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d52:	7dfa      	ldrb	r2, [r7, #23]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	32ae      	adds	r2, #174	@ 0xae
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d014      	beq.n	8005d8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d62:	7dfa      	ldrb	r2, [r7, #23]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d6a:	7dfa      	ldrb	r2, [r7, #23]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	32ae      	adds	r2, #174	@ 0xae
 8005d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	7afa      	ldrb	r2, [r7, #11]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	4798      	blx	r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d82:	7dbb      	ldrb	r3, [r7, #22]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d88:	7dbb      	ldrb	r3, [r7, #22]
 8005d8a:	e000      	b.n	8005d8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d014      	beq.n	8005dfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6852      	ldr	r2, [r2, #4]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4611      	mov	r1, r2
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dfc:	2340      	movs	r3, #64	@ 0x40
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2100      	movs	r1, #0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fbe3 	bl	80075ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2240      	movs	r2, #64	@ 0x40
 8005e14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e18:	2340      	movs	r3, #64	@ 0x40
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2180      	movs	r1, #128	@ 0x80
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fbd5 	bl	80075ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2240      	movs	r2, #64	@ 0x40
 8005e2e:	621a      	str	r2, [r3, #32]

  return ret;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d006      	beq.n	8005e7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2204      	movs	r2, #4
 8005e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d106      	bne.n	8005eb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d110      	bne.n	8005ef8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	32ae      	adds	r2, #174	@ 0xae
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e01c      	b.n	8005f5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d115      	bne.n	8005f5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	32ae      	adds	r2, #174	@ 0xae
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	32ae      	adds	r2, #174	@ 0xae
 8005f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	4611      	mov	r1, r2
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	32ae      	adds	r2, #174	@ 0xae
 8005f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e01c      	b.n	8005fc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d115      	bne.n	8005fc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	32ae      	adds	r2, #174	@ 0xae
 8005f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	32ae      	adds	r2, #174	@ 0xae
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6852      	ldr	r2, [r2, #4]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	4611      	mov	r1, r2
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800601c:	7bfb      	ldrb	r3, [r7, #15]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006032:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800604c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b086      	sub	sp, #24
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	885b      	ldrh	r3, [r3, #2]
 8006076:	b29b      	uxth	r3, r3
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	4293      	cmp	r3, r2
 800607e:	d91f      	bls.n	80060c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006086:	e013      	b.n	80060b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006088:	f107 030a 	add.w	r3, r7, #10
 800608c:	4619      	mov	r1, r3
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	f000 f81b 	bl	80060ca <USBD_GetNextDesc>
 8006094:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	2b05      	cmp	r3, #5
 800609c:	d108      	bne.n	80060b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	789b      	ldrb	r3, [r3, #2]
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d008      	beq.n	80060be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	885b      	ldrh	r3, [r3, #2]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d8e5      	bhi.n	8006088 <USBD_GetEpDesc+0x2e>
 80060bc:	e000      	b.n	80060c0 <USBD_GetEpDesc+0x66>
          break;
 80060be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80060c0:	693b      	ldr	r3, [r7, #16]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	4413      	add	r3, r2
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4413      	add	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006102:	b480      	push	{r7}
 8006104:	b087      	sub	sp, #28
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3301      	adds	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006120:	8a3b      	ldrh	r3, [r7, #16]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b21a      	sxth	r2, r3
 8006126:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800612a:	4313      	orrs	r3, r2
 800612c:	b21b      	sxth	r3, r3
 800612e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006130:	89fb      	ldrh	r3, [r7, #14]
}
 8006132:	4618      	mov	r0, r3
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006156:	2b40      	cmp	r3, #64	@ 0x40
 8006158:	d005      	beq.n	8006166 <USBD_StdDevReq+0x26>
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d857      	bhi.n	800620e <USBD_StdDevReq+0xce>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00f      	beq.n	8006182 <USBD_StdDevReq+0x42>
 8006162:	2b20      	cmp	r3, #32
 8006164:	d153      	bne.n	800620e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	32ae      	adds	r2, #174	@ 0xae
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e04a      	b.n	8006218 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	2b09      	cmp	r3, #9
 8006188:	d83b      	bhi.n	8006202 <USBD_StdDevReq+0xc2>
 800618a:	a201      	add	r2, pc, #4	@ (adr r2, 8006190 <USBD_StdDevReq+0x50>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061e5 	.word	0x080061e5
 8006194:	080061f9 	.word	0x080061f9
 8006198:	08006203 	.word	0x08006203
 800619c:	080061ef 	.word	0x080061ef
 80061a0:	08006203 	.word	0x08006203
 80061a4:	080061c3 	.word	0x080061c3
 80061a8:	080061b9 	.word	0x080061b9
 80061ac:	08006203 	.word	0x08006203
 80061b0:	080061db 	.word	0x080061db
 80061b4:	080061cd 	.word	0x080061cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa3c 	bl	8006638 <USBD_GetDescriptor>
          break;
 80061c0:	e024      	b.n	800620c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fba1 	bl	800690c <USBD_SetAddress>
          break;
 80061ca:	e01f      	b.n	800620c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fbe0 	bl	8006994 <USBD_SetConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]
          break;
 80061d8:	e018      	b.n	800620c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fc83 	bl	8006ae8 <USBD_GetConfig>
          break;
 80061e2:	e013      	b.n	800620c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fcb4 	bl	8006b54 <USBD_GetStatus>
          break;
 80061ec:	e00e      	b.n	800620c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fce3 	bl	8006bbc <USBD_SetFeature>
          break;
 80061f6:	e009      	b.n	800620c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fd07 	bl	8006c0e <USBD_ClrFeature>
          break;
 8006200:	e004      	b.n	800620c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fd5e 	bl	8006cc6 <USBD_CtlError>
          break;
 800620a:	bf00      	nop
      }
      break;
 800620c:	e004      	b.n	8006218 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fd58 	bl	8006cc6 <USBD_CtlError>
      break;
 8006216:	bf00      	nop
  }

  return ret;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop

08006224 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800623a:	2b40      	cmp	r3, #64	@ 0x40
 800623c:	d005      	beq.n	800624a <USBD_StdItfReq+0x26>
 800623e:	2b40      	cmp	r3, #64	@ 0x40
 8006240:	d852      	bhi.n	80062e8 <USBD_StdItfReq+0xc4>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <USBD_StdItfReq+0x26>
 8006246:	2b20      	cmp	r3, #32
 8006248:	d14e      	bne.n	80062e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006250:	b2db      	uxtb	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	2b02      	cmp	r3, #2
 8006256:	d840      	bhi.n	80062da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	889b      	ldrh	r3, [r3, #4]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d836      	bhi.n	80062d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	889b      	ldrh	r3, [r3, #4]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fedb 	bl	8006026 <USBD_CoreFindIF>
 8006270:	4603      	mov	r3, r0
 8006272:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	2bff      	cmp	r3, #255	@ 0xff
 8006278:	d01d      	beq.n	80062b6 <USBD_StdItfReq+0x92>
 800627a:	7bbb      	ldrb	r3, [r7, #14]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d11a      	bne.n	80062b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006280:	7bba      	ldrb	r2, [r7, #14]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	@ 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00f      	beq.n	80062b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006290:	7bba      	ldrb	r2, [r7, #14]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006298:	7bba      	ldrb	r2, [r7, #14]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	32ae      	adds	r2, #174	@ 0xae
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062ae:	e004      	b.n	80062ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80062b0:	2303      	movs	r3, #3
 80062b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80062b4:	e001      	b.n	80062ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80062b6:	2303      	movs	r3, #3
 80062b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	88db      	ldrh	r3, [r3, #6]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d110      	bne.n	80062e4 <USBD_StdItfReq+0xc0>
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10d      	bne.n	80062e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fdd3 	bl	8006e74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062ce:	e009      	b.n	80062e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fcf7 	bl	8006cc6 <USBD_CtlError>
          break;
 80062d8:	e004      	b.n	80062e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fcf2 	bl	8006cc6 <USBD_CtlError>
          break;
 80062e2:	e000      	b.n	80062e6 <USBD_StdItfReq+0xc2>
          break;
 80062e4:	bf00      	nop
      }
      break;
 80062e6:	e004      	b.n	80062f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fceb 	bl	8006cc6 <USBD_CtlError>
      break;
 80062f0:	bf00      	nop
  }

  return ret;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	889b      	ldrh	r3, [r3, #4]
 800630e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d007      	beq.n	800632c <USBD_StdEPReq+0x30>
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	f200 817f 	bhi.w	8006620 <USBD_StdEPReq+0x324>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02a      	beq.n	800637c <USBD_StdEPReq+0x80>
 8006326:	2b20      	cmp	r3, #32
 8006328:	f040 817a 	bne.w	8006620 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff fe85 	bl	8006040 <USBD_CoreFindEP>
 8006336:	4603      	mov	r3, r0
 8006338:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800633a:	7b7b      	ldrb	r3, [r7, #13]
 800633c:	2bff      	cmp	r3, #255	@ 0xff
 800633e:	f000 8174 	beq.w	800662a <USBD_StdEPReq+0x32e>
 8006342:	7b7b      	ldrb	r3, [r7, #13]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 8170 	bne.w	800662a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800634a:	7b7a      	ldrb	r2, [r7, #13]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006352:	7b7a      	ldrb	r2, [r7, #13]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	32ae      	adds	r2, #174	@ 0xae
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8163 	beq.w	800662a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006364:	7b7a      	ldrb	r2, [r7, #13]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32ae      	adds	r2, #174	@ 0xae
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	4798      	blx	r3
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800637a:	e156      	b.n	800662a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d008      	beq.n	8006396 <USBD_StdEPReq+0x9a>
 8006384:	2b03      	cmp	r3, #3
 8006386:	f300 8145 	bgt.w	8006614 <USBD_StdEPReq+0x318>
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 809b 	beq.w	80064c6 <USBD_StdEPReq+0x1ca>
 8006390:	2b01      	cmp	r3, #1
 8006392:	d03c      	beq.n	800640e <USBD_StdEPReq+0x112>
 8006394:	e13e      	b.n	8006614 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d002      	beq.n	80063a8 <USBD_StdEPReq+0xac>
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d016      	beq.n	80063d4 <USBD_StdEPReq+0xd8>
 80063a6:	e02c      	b.n	8006402 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a8:	7bbb      	ldrb	r3, [r7, #14]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00d      	beq.n	80063ca <USBD_StdEPReq+0xce>
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	2b80      	cmp	r3, #128	@ 0x80
 80063b2:	d00a      	beq.n	80063ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f94d 	bl	8007658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063be:	2180      	movs	r1, #128	@ 0x80
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f949 	bl	8007658 <USBD_LL_StallEP>
 80063c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063c8:	e020      	b.n	800640c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc7a 	bl	8006cc6 <USBD_CtlError>
              break;
 80063d2:	e01b      	b.n	800640c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	885b      	ldrh	r3, [r3, #2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10e      	bne.n	80063fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00b      	beq.n	80063fa <USBD_StdEPReq+0xfe>
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b80      	cmp	r3, #128	@ 0x80
 80063e6:	d008      	beq.n	80063fa <USBD_StdEPReq+0xfe>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	88db      	ldrh	r3, [r3, #6]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f92f 	bl	8007658 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd3a 	bl	8006e74 <USBD_CtlSendStatus>

              break;
 8006400:	e004      	b.n	800640c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fc5e 	bl	8006cc6 <USBD_CtlError>
              break;
 800640a:	bf00      	nop
          }
          break;
 800640c:	e107      	b.n	800661e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d002      	beq.n	8006420 <USBD_StdEPReq+0x124>
 800641a:	2b03      	cmp	r3, #3
 800641c:	d016      	beq.n	800644c <USBD_StdEPReq+0x150>
 800641e:	e04b      	b.n	80064b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <USBD_StdEPReq+0x146>
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	2b80      	cmp	r3, #128	@ 0x80
 800642a:	d00a      	beq.n	8006442 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800642c:	7bbb      	ldrb	r3, [r7, #14]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f911 	bl	8007658 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006436:	2180      	movs	r1, #128	@ 0x80
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 f90d 	bl	8007658 <USBD_LL_StallEP>
 800643e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006440:	e040      	b.n	80064c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fc3e 	bl	8006cc6 <USBD_CtlError>
              break;
 800644a:	e03b      	b.n	80064c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	885b      	ldrh	r3, [r3, #2]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d136      	bne.n	80064c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f917 	bl	8007696 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fd03 	bl	8006e74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fde4 	bl	8006040 <USBD_CoreFindEP>
 8006478:	4603      	mov	r3, r0
 800647a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800647c:	7b7b      	ldrb	r3, [r7, #13]
 800647e:	2bff      	cmp	r3, #255	@ 0xff
 8006480:	d01f      	beq.n	80064c2 <USBD_StdEPReq+0x1c6>
 8006482:	7b7b      	ldrb	r3, [r7, #13]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d11c      	bne.n	80064c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006488:	7b7a      	ldrb	r2, [r7, #13]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006490:	7b7a      	ldrb	r2, [r7, #13]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	32ae      	adds	r2, #174	@ 0xae
 8006496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d010      	beq.n	80064c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064a0:	7b7a      	ldrb	r2, [r7, #13]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32ae      	adds	r2, #174	@ 0xae
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80064b6:	e004      	b.n	80064c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fc03 	bl	8006cc6 <USBD_CtlError>
              break;
 80064c0:	e000      	b.n	80064c4 <USBD_StdEPReq+0x1c8>
              break;
 80064c2:	bf00      	nop
          }
          break;
 80064c4:	e0ab      	b.n	800661e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d002      	beq.n	80064d8 <USBD_StdEPReq+0x1dc>
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d032      	beq.n	800653c <USBD_StdEPReq+0x240>
 80064d6:	e097      	b.n	8006608 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <USBD_StdEPReq+0x1f2>
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b80      	cmp	r3, #128	@ 0x80
 80064e2:	d004      	beq.n	80064ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fbed 	bl	8006cc6 <USBD_CtlError>
                break;
 80064ec:	e091      	b.n	8006612 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da0b      	bge.n	800650e <USBD_StdEPReq+0x212>
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	3304      	adds	r3, #4
 800650c:	e00b      	b.n	8006526 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	3304      	adds	r3, #4
 8006526:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2202      	movs	r2, #2
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fc43 	bl	8006dc0 <USBD_CtlSendData>
              break;
 800653a:	e06a      	b.n	8006612 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800653c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da11      	bge.n	8006568 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	3324      	adds	r3, #36	@ 0x24
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d117      	bne.n	800658e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fbb0 	bl	8006cc6 <USBD_CtlError>
                  break;
 8006566:	e054      	b.n	8006612 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb9d 	bl	8006cc6 <USBD_CtlError>
                  break;
 800658c:	e041      	b.n	8006612 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800658e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	da0b      	bge.n	80065ae <USBD_StdEPReq+0x2b2>
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	3310      	adds	r3, #16
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	4413      	add	r3, r2
 80065aa:	3304      	adds	r3, #4
 80065ac:	e00b      	b.n	80065c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	3304      	adds	r3, #4
 80065c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d002      	beq.n	80065d4 <USBD_StdEPReq+0x2d8>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b80      	cmp	r3, #128	@ 0x80
 80065d2:	d103      	bne.n	80065dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e00e      	b.n	80065fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 f877 	bl	80076d4 <USBD_LL_IsStallEP>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2201      	movs	r2, #1
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	e002      	b.n	80065fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2202      	movs	r2, #2
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fbdd 	bl	8006dc0 <USBD_CtlSendData>
              break;
 8006606:	e004      	b.n	8006612 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb5b 	bl	8006cc6 <USBD_CtlError>
              break;
 8006610:	bf00      	nop
          }
          break;
 8006612:	e004      	b.n	800661e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fb55 	bl	8006cc6 <USBD_CtlError>
          break;
 800661c:	bf00      	nop
      }
      break;
 800661e:	e005      	b.n	800662c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fb4f 	bl	8006cc6 <USBD_CtlError>
      break;
 8006628:	e000      	b.n	800662c <USBD_StdEPReq+0x330>
      break;
 800662a:	bf00      	nop
  }

  return ret;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	885b      	ldrh	r3, [r3, #2]
 8006652:	0a1b      	lsrs	r3, r3, #8
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	2b06      	cmp	r3, #6
 800665a:	f200 8128 	bhi.w	80068ae <USBD_GetDescriptor+0x276>
 800665e:	a201      	add	r2, pc, #4	@ (adr r2, 8006664 <USBD_GetDescriptor+0x2c>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006681 	.word	0x08006681
 8006668:	08006699 	.word	0x08006699
 800666c:	080066d9 	.word	0x080066d9
 8006670:	080068af 	.word	0x080068af
 8006674:	080068af 	.word	0x080068af
 8006678:	0800684f 	.word	0x0800684f
 800667c:	0800687b 	.word	0x0800687b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7c12      	ldrb	r2, [r2, #16]
 800668c:	f107 0108 	add.w	r1, r7, #8
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
 8006694:	60f8      	str	r0, [r7, #12]
      break;
 8006696:	e112      	b.n	80068be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	7c1b      	ldrb	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10d      	bne.n	80066bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	f107 0208 	add.w	r2, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	2202      	movs	r2, #2
 80066b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066ba:	e100      	b.n	80068be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	f107 0208 	add.w	r2, r7, #8
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3301      	adds	r3, #1
 80066d2:	2202      	movs	r2, #2
 80066d4:	701a      	strb	r2, [r3, #0]
      break;
 80066d6:	e0f2      	b.n	80068be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	885b      	ldrh	r3, [r3, #2]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b05      	cmp	r3, #5
 80066e0:	f200 80ac 	bhi.w	800683c <USBD_GetDescriptor+0x204>
 80066e4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ec <USBD_GetDescriptor+0xb4>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006705 	.word	0x08006705
 80066f0:	08006739 	.word	0x08006739
 80066f4:	0800676d 	.word	0x0800676d
 80066f8:	080067a1 	.word	0x080067a1
 80066fc:	080067d5 	.word	0x080067d5
 8006700:	08006809 	.word	0x08006809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	7c12      	ldrb	r2, [r2, #16]
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006726:	e091      	b.n	800684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 facb 	bl	8006cc6 <USBD_CtlError>
            err++;
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	3301      	adds	r3, #1
 8006734:	72fb      	strb	r3, [r7, #11]
          break;
 8006736:	e089      	b.n	800684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675a:	e077      	b.n	800684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fab1 	bl	8006cc6 <USBD_CtlError>
            err++;
 8006764:	7afb      	ldrb	r3, [r7, #11]
 8006766:	3301      	adds	r3, #1
 8006768:	72fb      	strb	r3, [r7, #11]
          break;
 800676a:	e06f      	b.n	800684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	7c12      	ldrb	r2, [r2, #16]
 8006784:	f107 0108 	add.w	r1, r7, #8
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800678e:	e05d      	b.n	800684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa97 	bl	8006cc6 <USBD_CtlError>
            err++;
 8006798:	7afb      	ldrb	r3, [r7, #11]
 800679a:	3301      	adds	r3, #1
 800679c:	72fb      	strb	r3, [r7, #11]
          break;
 800679e:	e055      	b.n	800684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00b      	beq.n	80067c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	7c12      	ldrb	r2, [r2, #16]
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067c2:	e043      	b.n	800684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fa7d 	bl	8006cc6 <USBD_CtlError>
            err++;
 80067cc:	7afb      	ldrb	r3, [r7, #11]
 80067ce:	3301      	adds	r3, #1
 80067d0:	72fb      	strb	r3, [r7, #11]
          break;
 80067d2:	e03b      	b.n	800684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00b      	beq.n	80067f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	7c12      	ldrb	r2, [r2, #16]
 80067ec:	f107 0108 	add.w	r1, r7, #8
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067f6:	e029      	b.n	800684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa63 	bl	8006cc6 <USBD_CtlError>
            err++;
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	3301      	adds	r3, #1
 8006804:	72fb      	strb	r3, [r7, #11]
          break;
 8006806:	e021      	b.n	800684c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	7c12      	ldrb	r2, [r2, #16]
 8006820:	f107 0108 	add.w	r1, r7, #8
 8006824:	4610      	mov	r0, r2
 8006826:	4798      	blx	r3
 8006828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800682a:	e00f      	b.n	800684c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa49 	bl	8006cc6 <USBD_CtlError>
            err++;
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	3301      	adds	r3, #1
 8006838:	72fb      	strb	r3, [r7, #11]
          break;
 800683a:	e007      	b.n	800684c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa41 	bl	8006cc6 <USBD_CtlError>
          err++;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	3301      	adds	r3, #1
 8006848:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800684a:	bf00      	nop
      }
      break;
 800684c:	e037      	b.n	80068be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7c1b      	ldrb	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800685c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800685e:	f107 0208 	add.w	r2, r7, #8
 8006862:	4610      	mov	r0, r2
 8006864:	4798      	blx	r3
 8006866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006868:	e029      	b.n	80068be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa2a 	bl	8006cc6 <USBD_CtlError>
        err++;
 8006872:	7afb      	ldrb	r3, [r7, #11]
 8006874:	3301      	adds	r3, #1
 8006876:	72fb      	strb	r3, [r7, #11]
      break;
 8006878:	e021      	b.n	80068be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	7c1b      	ldrb	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10d      	bne.n	800689e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688a:	f107 0208 	add.w	r2, r7, #8
 800688e:	4610      	mov	r0, r2
 8006890:	4798      	blx	r3
 8006892:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	2207      	movs	r2, #7
 800689a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800689c:	e00f      	b.n	80068be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa10 	bl	8006cc6 <USBD_CtlError>
        err++;
 80068a6:	7afb      	ldrb	r3, [r7, #11]
 80068a8:	3301      	adds	r3, #1
 80068aa:	72fb      	strb	r3, [r7, #11]
      break;
 80068ac:	e007      	b.n	80068be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa08 	bl	8006cc6 <USBD_CtlError>
      err++;
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	3301      	adds	r3, #1
 80068ba:	72fb      	strb	r3, [r7, #11]
      break;
 80068bc:	bf00      	nop
  }

  if (err != 0U)
 80068be:	7afb      	ldrb	r3, [r7, #11]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11e      	bne.n	8006902 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	88db      	ldrh	r3, [r3, #6]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d016      	beq.n	80068fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80068cc:	893b      	ldrh	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	88da      	ldrh	r2, [r3, #6]
 80068d6:	893b      	ldrh	r3, [r7, #8]
 80068d8:	4293      	cmp	r3, r2
 80068da:	bf28      	it	cs
 80068dc:	4613      	movcs	r3, r2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068e2:	893b      	ldrh	r3, [r7, #8]
 80068e4:	461a      	mov	r2, r3
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa69 	bl	8006dc0 <USBD_CtlSendData>
 80068ee:	e009      	b.n	8006904 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9e7 	bl	8006cc6 <USBD_CtlError>
 80068f8:	e004      	b.n	8006904 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 faba 	bl	8006e74 <USBD_CtlSendStatus>
 8006900:	e000      	b.n	8006904 <USBD_GetDescriptor+0x2cc>
    return;
 8006902:	bf00      	nop
  }
}
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop

0800690c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	889b      	ldrh	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d131      	bne.n	8006982 <USBD_SetAddress+0x76>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	88db      	ldrh	r3, [r3, #6]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d12d      	bne.n	8006982 <USBD_SetAddress+0x76>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	2b7f      	cmp	r3, #127	@ 0x7f
 800692c:	d829      	bhi.n	8006982 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b03      	cmp	r3, #3
 8006944:	d104      	bne.n	8006950 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f9bc 	bl	8006cc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800694e:	e01d      	b.n	800698c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7bfa      	ldrb	r2, [r7, #15]
 8006954:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fee5 	bl	800772c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa86 	bl	8006e74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2202      	movs	r2, #2
 8006972:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006976:	e009      	b.n	800698c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006980:	e004      	b.n	800698c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f99e 	bl	8006cc6 <USBD_CtlError>
  }
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae4 <USBD_SetConfig+0x150>)
 80069aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069ac:	4b4d      	ldr	r3, [pc, #308]	@ (8006ae4 <USBD_SetConfig+0x150>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d905      	bls.n	80069c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f985 	bl	8006cc6 <USBD_CtlError>
    return USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	e08c      	b.n	8006ada <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d002      	beq.n	80069d2 <USBD_SetConfig+0x3e>
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d029      	beq.n	8006a24 <USBD_SetConfig+0x90>
 80069d0:	e075      	b.n	8006abe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80069d2:	4b44      	ldr	r3, [pc, #272]	@ (8006ae4 <USBD_SetConfig+0x150>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d020      	beq.n	8006a1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80069da:	4b42      	ldr	r3, [pc, #264]	@ (8006ae4 <USBD_SetConfig+0x150>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ae4 <USBD_SetConfig+0x150>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fe ffe3 	bl	80059b6 <USBD_SetClassConfig>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f962 	bl	8006cc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a0a:	e065      	b.n	8006ad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa31 	bl	8006e74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2203      	movs	r2, #3
 8006a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006a1a:	e05d      	b.n	8006ad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa29 	bl	8006e74 <USBD_CtlSendStatus>
      break;
 8006a22:	e059      	b.n	8006ad8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d112      	bne.n	8006a52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006a34:	4b2b      	ldr	r3, [pc, #172]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7fe ffd2 	bl	80059ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa12 	bl	8006e74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a50:	e042      	b.n	8006ad8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a52:	4b24      	ldr	r3, [pc, #144]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d02a      	beq.n	8006ab6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe ffc0 	bl	80059ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fe ff99 	bl	80059b6 <USBD_SetClassConfig>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00f      	beq.n	8006aae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f918 	bl	8006cc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fe ffa5 	bl	80059ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006aac:	e014      	b.n	8006ad8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9e0 	bl	8006e74 <USBD_CtlSendStatus>
      break;
 8006ab4:	e010      	b.n	8006ad8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9dc 	bl	8006e74 <USBD_CtlSendStatus>
      break;
 8006abc:	e00c      	b.n	8006ad8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f900 	bl	8006cc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ac6:	4b07      	ldr	r3, [pc, #28]	@ (8006ae4 <USBD_SetConfig+0x150>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fe ff8e 	bl	80059ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad6:	bf00      	nop
  }

  return ret;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	2000047c 	.word	0x2000047c

08006ae8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	88db      	ldrh	r3, [r3, #6]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d004      	beq.n	8006b04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f8e2 	bl	8006cc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b02:	e023      	b.n	8006b4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	dc02      	bgt.n	8006b16 <USBD_GetConfig+0x2e>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	dc03      	bgt.n	8006b1c <USBD_GetConfig+0x34>
 8006b14:	e015      	b.n	8006b42 <USBD_GetConfig+0x5a>
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d00b      	beq.n	8006b32 <USBD_GetConfig+0x4a>
 8006b1a:	e012      	b.n	8006b42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3308      	adds	r3, #8
 8006b26:	2201      	movs	r2, #1
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f948 	bl	8006dc0 <USBD_CtlSendData>
        break;
 8006b30:	e00c      	b.n	8006b4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	2201      	movs	r2, #1
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f940 	bl	8006dc0 <USBD_CtlSendData>
        break;
 8006b40:	e004      	b.n	8006b4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8be 	bl	8006cc6 <USBD_CtlError>
        break;
 8006b4a:	bf00      	nop
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d81e      	bhi.n	8006baa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	88db      	ldrh	r3, [r3, #6]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d004      	beq.n	8006b7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f8a5 	bl	8006cc6 <USBD_CtlError>
        break;
 8006b7c:	e01a      	b.n	8006bb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d005      	beq.n	8006b9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f043 0202 	orr.w	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f90c 	bl	8006dc0 <USBD_CtlSendData>
      break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f88a 	bl	8006cc6 <USBD_CtlError>
      break;
 8006bb2:	bf00      	nop
  }
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	885b      	ldrh	r3, [r3, #2]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d107      	bne.n	8006bde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f94c 	bl	8006e74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006bdc:	e013      	b.n	8006c06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	885b      	ldrh	r3, [r3, #2]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d10b      	bne.n	8006bfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	889b      	ldrh	r3, [r3, #4]
 8006bea:	0a1b      	lsrs	r3, r3, #8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f93c 	bl	8006e74 <USBD_CtlSendStatus>
}
 8006bfc:	e003      	b.n	8006c06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f860 	bl	8006cc6 <USBD_CtlError>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d80b      	bhi.n	8006c3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d10c      	bne.n	8006c48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f91c 	bl	8006e74 <USBD_CtlSendStatus>
      }
      break;
 8006c3c:	e004      	b.n	8006c48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f840 	bl	8006cc6 <USBD_CtlError>
      break;
 8006c46:	e000      	b.n	8006c4a <USBD_ClrFeature+0x3c>
      break;
 8006c48:	bf00      	nop
  }
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7ff fa40 	bl	8006102 <SWAPBYTE>
 8006c82:	4603      	mov	r3, r0
 8006c84:	461a      	mov	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3301      	adds	r3, #1
 8006c94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fa33 	bl	8006102 <SWAPBYTE>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3301      	adds	r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f7ff fa26 	bl	8006102 <SWAPBYTE>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	80da      	strh	r2, [r3, #6]
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cd0:	2180      	movs	r1, #128	@ 0x80
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fcc0 	bl	8007658 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fcbc 	bl	8007658 <USBD_LL_StallEP>
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d042      	beq.n	8006d84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006d02:	6938      	ldr	r0, [r7, #16]
 8006d04:	f000 f842 	bl	8006d8c <USBD_GetLen>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d12:	d808      	bhi.n	8006d26 <USBD_GetString+0x3e>
 8006d14:	6938      	ldr	r0, [r7, #16]
 8006d16:	f000 f839 	bl	8006d8c <USBD_GetLen>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	e001      	b.n	8006d2a <USBD_GetString+0x42>
 8006d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4413      	add	r3, r2
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7812      	ldrb	r2, [r2, #0]
 8006d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	4413      	add	r3, r2
 8006d46:	2203      	movs	r2, #3
 8006d48:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d50:	e013      	b.n	8006d7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	4413      	add	r3, r2
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	7812      	ldrb	r2, [r2, #0]
 8006d5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	3301      	adds	r3, #1
 8006d62:	613b      	str	r3, [r7, #16]
    idx++;
 8006d64:	7dfb      	ldrb	r3, [r7, #23]
 8006d66:	3301      	adds	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	4413      	add	r3, r2
 8006d70:	2200      	movs	r2, #0
 8006d72:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	3301      	adds	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e7      	bne.n	8006d52 <USBD_GetString+0x6a>
 8006d82:	e000      	b.n	8006d86 <USBD_GetString+0x9e>
    return;
 8006d84:	bf00      	nop
  }
}
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d9c:	e005      	b.n	8006daa <USBD_GetLen+0x1e>
  {
    len++;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	3301      	adds	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f5      	bne.n	8006d9e <USBD_GetLen+0x12>
  }

  return len;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	2100      	movs	r1, #0
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fcbf 	bl	800776a <USBD_LL_Transmit>

  return USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	2100      	movs	r1, #0
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fcae 	bl	800776a <USBD_LL_Transmit>

  return USBD_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2203      	movs	r2, #3
 8006e28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fcb2 	bl	80077ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	2100      	movs	r1, #0
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fca1 	bl	80077ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e84:	2300      	movs	r3, #0
 8006e86:	2200      	movs	r2, #0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc6d 	bl	800776a <USBD_LL_Transmit>

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2205      	movs	r2, #5
 8006ea6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fc7b 	bl	80077ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4912      	ldr	r1, [pc, #72]	@ (8006f10 <MX_USB_DEVICE_Init+0x50>)
 8006ec8:	4812      	ldr	r0, [pc, #72]	@ (8006f14 <MX_USB_DEVICE_Init+0x54>)
 8006eca:	f7fe fcf7 	bl	80058bc <USBD_Init>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ed4:	f7fa fa92 	bl	80013fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ed8:	490f      	ldr	r1, [pc, #60]	@ (8006f18 <MX_USB_DEVICE_Init+0x58>)
 8006eda:	480e      	ldr	r0, [pc, #56]	@ (8006f14 <MX_USB_DEVICE_Init+0x54>)
 8006edc:	f7fe fd1e 	bl	800591c <USBD_RegisterClass>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ee6:	f7fa fa89 	bl	80013fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006eea:	490c      	ldr	r1, [pc, #48]	@ (8006f1c <MX_USB_DEVICE_Init+0x5c>)
 8006eec:	4809      	ldr	r0, [pc, #36]	@ (8006f14 <MX_USB_DEVICE_Init+0x54>)
 8006eee:	f7fe fc55 	bl	800579c <USBD_CDC_RegisterInterface>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ef8:	f7fa fa80 	bl	80013fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006efc:	4805      	ldr	r0, [pc, #20]	@ (8006f14 <MX_USB_DEVICE_Init+0x54>)
 8006efe:	f7fe fd43 	bl	8005988 <USBD_Start>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f08:	f7fa fa78 	bl	80013fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f0c:	bf00      	nop
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	200000b0 	.word	0x200000b0
 8006f14:	20000480 	.word	0x20000480
 8006f18:	2000001c 	.word	0x2000001c
 8006f1c:	2000009c 	.word	0x2000009c

08006f20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f24:	2200      	movs	r2, #0
 8006f26:	4905      	ldr	r1, [pc, #20]	@ (8006f3c <CDC_Init_FS+0x1c>)
 8006f28:	4805      	ldr	r0, [pc, #20]	@ (8006f40 <CDC_Init_FS+0x20>)
 8006f2a:	f7fe fc51 	bl	80057d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f2e:	4905      	ldr	r1, [pc, #20]	@ (8006f44 <CDC_Init_FS+0x24>)
 8006f30:	4803      	ldr	r0, [pc, #12]	@ (8006f40 <CDC_Init_FS+0x20>)
 8006f32:	f7fe fc6f 	bl	8005814 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20000b5c 	.word	0x20000b5c
 8006f40:	20000480 	.word	0x20000480
 8006f44:	2000075c 	.word	0x2000075c

08006f48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
 8006f64:	4613      	mov	r3, r2
 8006f66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b23      	cmp	r3, #35	@ 0x23
 8006f6c:	d84a      	bhi.n	8007004 <CDC_Control_FS+0xac>
 8006f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f74 <CDC_Control_FS+0x1c>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08007005 	.word	0x08007005
 8006f78:	08007005 	.word	0x08007005
 8006f7c:	08007005 	.word	0x08007005
 8006f80:	08007005 	.word	0x08007005
 8006f84:	08007005 	.word	0x08007005
 8006f88:	08007005 	.word	0x08007005
 8006f8c:	08007005 	.word	0x08007005
 8006f90:	08007005 	.word	0x08007005
 8006f94:	08007005 	.word	0x08007005
 8006f98:	08007005 	.word	0x08007005
 8006f9c:	08007005 	.word	0x08007005
 8006fa0:	08007005 	.word	0x08007005
 8006fa4:	08007005 	.word	0x08007005
 8006fa8:	08007005 	.word	0x08007005
 8006fac:	08007005 	.word	0x08007005
 8006fb0:	08007005 	.word	0x08007005
 8006fb4:	08007005 	.word	0x08007005
 8006fb8:	08007005 	.word	0x08007005
 8006fbc:	08007005 	.word	0x08007005
 8006fc0:	08007005 	.word	0x08007005
 8006fc4:	08007005 	.word	0x08007005
 8006fc8:	08007005 	.word	0x08007005
 8006fcc:	08007005 	.word	0x08007005
 8006fd0:	08007005 	.word	0x08007005
 8006fd4:	08007005 	.word	0x08007005
 8006fd8:	08007005 	.word	0x08007005
 8006fdc:	08007005 	.word	0x08007005
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	08007005 	.word	0x08007005
 8006fe8:	08007005 	.word	0x08007005
 8006fec:	08007005 	.word	0x08007005
 8006ff0:	08007005 	.word	0x08007005
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	08007005 	.word	0x08007005
 8006ffc:	08007005 	.word	0x08007005
 8007000:	08007005 	.word	0x08007005
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007004:	bf00      	nop
  }

  return (USBD_OK);
 8007006:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	CDC_Receive_Callback(Buf, Len); // Gọi hàm xử lý của bạn
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7fa f8b3 	bl	800118c <CDC_Receive_Callback>

  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4805      	ldr	r0, [pc, #20]	@ (8007040 <CDC_Receive_FS+0x2c>)
 800702a:	f7fe fbf3 	bl	8005814 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800702e:	4804      	ldr	r0, [pc, #16]	@ (8007040 <CDC_Receive_FS+0x2c>)
 8007030:	f7fe fc0e 	bl	8005850 <USBD_CDC_ReceivePacket>
  /* USER CODE END 6 */
  return (USBD_OK); // Đảm bảo có return
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000480 	.word	0x20000480

08007044 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800705a:	4618      	mov	r0, r3
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	6039      	str	r1, [r7, #0]
 8007072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2212      	movs	r2, #18
 8007078:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800707a:	4b03      	ldr	r3, [pc, #12]	@ (8007088 <USBD_FS_DeviceDescriptor+0x20>)
}
 800707c:	4618      	mov	r0, r3
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	200000cc 	.word	0x200000cc

0800708c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2204      	movs	r2, #4
 800709c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800709e:	4b03      	ldr	r3, [pc, #12]	@ (80070ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200000e0 	.word	0x200000e0

080070b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	6039      	str	r1, [r7, #0]
 80070ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	4907      	ldr	r1, [pc, #28]	@ (80070e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80070c6:	4808      	ldr	r0, [pc, #32]	@ (80070e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80070c8:	f7ff fe0e 	bl	8006ce8 <USBD_GetString>
 80070cc:	e004      	b.n	80070d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4904      	ldr	r1, [pc, #16]	@ (80070e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80070d2:	4805      	ldr	r0, [pc, #20]	@ (80070e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80070d4:	f7ff fe08 	bl	8006ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070d8:	4b02      	ldr	r3, [pc, #8]	@ (80070e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000f5c 	.word	0x20000f5c
 80070e8:	0800959c 	.word	0x0800959c

080070ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	4904      	ldr	r1, [pc, #16]	@ (800710c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80070fc:	4804      	ldr	r0, [pc, #16]	@ (8007110 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80070fe:	f7ff fdf3 	bl	8006ce8 <USBD_GetString>
  return USBD_StrDesc;
 8007102:	4b02      	ldr	r3, [pc, #8]	@ (800710c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000f5c 	.word	0x20000f5c
 8007110:	080095b4 	.word	0x080095b4

08007114 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	221a      	movs	r2, #26
 8007124:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007126:	f000 f843 	bl	80071b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800712a:	4b02      	ldr	r3, [pc, #8]	@ (8007134 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	200000e4 	.word	0x200000e4

08007138 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	6039      	str	r1, [r7, #0]
 8007142:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d105      	bne.n	8007156 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	4907      	ldr	r1, [pc, #28]	@ (800716c <USBD_FS_ConfigStrDescriptor+0x34>)
 800714e:	4808      	ldr	r0, [pc, #32]	@ (8007170 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007150:	f7ff fdca 	bl	8006ce8 <USBD_GetString>
 8007154:	e004      	b.n	8007160 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	4904      	ldr	r1, [pc, #16]	@ (800716c <USBD_FS_ConfigStrDescriptor+0x34>)
 800715a:	4805      	ldr	r0, [pc, #20]	@ (8007170 <USBD_FS_ConfigStrDescriptor+0x38>)
 800715c:	f7ff fdc4 	bl	8006ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007160:	4b02      	ldr	r3, [pc, #8]	@ (800716c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000f5c 	.word	0x20000f5c
 8007170:	080095c8 	.word	0x080095c8

08007174 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	6039      	str	r1, [r7, #0]
 800717e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	4907      	ldr	r1, [pc, #28]	@ (80071a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800718a:	4808      	ldr	r0, [pc, #32]	@ (80071ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800718c:	f7ff fdac 	bl	8006ce8 <USBD_GetString>
 8007190:	e004      	b.n	800719c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4904      	ldr	r1, [pc, #16]	@ (80071a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007196:	4805      	ldr	r0, [pc, #20]	@ (80071ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007198:	f7ff fda6 	bl	8006ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800719c:	4b02      	ldr	r3, [pc, #8]	@ (80071a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000f5c 	.word	0x20000f5c
 80071ac:	080095d4 	.word	0x080095d4

080071b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071b6:	4b0f      	ldr	r3, [pc, #60]	@ (80071f4 <Get_SerialNum+0x44>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071bc:	4b0e      	ldr	r3, [pc, #56]	@ (80071f8 <Get_SerialNum+0x48>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071c2:	4b0e      	ldr	r3, [pc, #56]	@ (80071fc <Get_SerialNum+0x4c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071d6:	2208      	movs	r2, #8
 80071d8:	4909      	ldr	r1, [pc, #36]	@ (8007200 <Get_SerialNum+0x50>)
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f814 	bl	8007208 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071e0:	2204      	movs	r2, #4
 80071e2:	4908      	ldr	r1, [pc, #32]	@ (8007204 <Get_SerialNum+0x54>)
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f000 f80f 	bl	8007208 <IntToUnicode>
  }
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	1fff7a10 	.word	0x1fff7a10
 80071f8:	1fff7a14 	.word	0x1fff7a14
 80071fc:	1fff7a18 	.word	0x1fff7a18
 8007200:	200000e6 	.word	0x200000e6
 8007204:	200000f6 	.word	0x200000f6

08007208 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
 800721e:	e027      	b.n	8007270 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0f1b      	lsrs	r3, r3, #28
 8007224:	2b09      	cmp	r3, #9
 8007226:	d80b      	bhi.n	8007240 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	0f1b      	lsrs	r3, r3, #28
 800722c:	b2da      	uxtb	r2, r3
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	4619      	mov	r1, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	440b      	add	r3, r1
 8007238:	3230      	adds	r2, #48	@ 0x30
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e00a      	b.n	8007256 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0f1b      	lsrs	r3, r3, #28
 8007244:	b2da      	uxtb	r2, r3
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4619      	mov	r1, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	440b      	add	r3, r1
 8007250:	3237      	adds	r2, #55	@ 0x37
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	3301      	adds	r3, #1
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	2200      	movs	r2, #0
 8007268:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	3301      	adds	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
 8007270:	7dfa      	ldrb	r2, [r7, #23]
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	429a      	cmp	r2, r3
 8007276:	d3d3      	bcc.n	8007220 <IntToUnicode+0x18>
  }
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	@ 0x28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	609a      	str	r2, [r3, #8]
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a8:	d13a      	bne.n	8007320 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80072ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80072ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072cc:	2302      	movs	r3, #2
 80072ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072d4:	2303      	movs	r3, #3
 80072d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80072d8:	230a      	movs	r3, #10
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	4619      	mov	r1, r3
 80072e2:	4812      	ldr	r0, [pc, #72]	@ (800732c <HAL_PCD_MspInit+0xa4>)
 80072e4:	f7fa fb0c 	bl	8001900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 80072fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007302:	6453      	str	r3, [r2, #68]	@ 0x44
 8007304:	4b08      	ldr	r3, [pc, #32]	@ (8007328 <HAL_PCD_MspInit+0xa0>)
 8007306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007310:	2200      	movs	r2, #0
 8007312:	2100      	movs	r1, #0
 8007314:	2043      	movs	r0, #67	@ 0x43
 8007316:	f7fa fabc 	bl	8001892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800731a:	2043      	movs	r0, #67	@ 0x43
 800731c:	f7fa fad5 	bl	80018ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007320:	bf00      	nop
 8007322:	3728      	adds	r7, #40	@ 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40023800 	.word	0x40023800
 800732c:	40020000 	.word	0x40020000

08007330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fe fb6b 	bl	8005a22 <USBD_LL_SetupStage>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	4619      	mov	r1, r3
 800737e:	f7fe fba5 	bl	8005acc <USBD_LL_DataOutStage>
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800739c:	78fa      	ldrb	r2, [r7, #3]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	3320      	adds	r3, #32
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	78fb      	ldrb	r3, [r7, #3]
 80073b0:	4619      	mov	r1, r3
 80073b2:	f7fe fc3e 	bl	8005c32 <USBD_LL_DataInStage>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fd78 	bl	8005ec2 <USBD_LL_SOF>
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	79db      	ldrb	r3, [r3, #7]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d001      	beq.n	80073f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80073ee:	f7fa f805 	bl	80013fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073f8:	7bfa      	ldrb	r2, [r7, #15]
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fd1c 	bl	8005e3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fcc4 	bl	8005d96 <USBD_LL_Reset>
}
 800740e:	bf00      	nop
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fd17 	bl	8005e5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6812      	ldr	r2, [r2, #0]
 800743a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7adb      	ldrb	r3, [r3, #11]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d005      	beq.n	8007458 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800744c:	4b04      	ldr	r3, [pc, #16]	@ (8007460 <HAL_PCD_SuspendCallback+0x48>)
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	4a03      	ldr	r2, [pc, #12]	@ (8007460 <HAL_PCD_SuspendCallback+0x48>)
 8007452:	f043 0306 	orr.w	r3, r3, #6
 8007456:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	e000ed00 	.word	0xe000ed00

08007464 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007472:	4618      	mov	r0, r3
 8007474:	f7fe fd0d 	bl	8005e92 <USBD_LL_Resume>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fd65 	bl	8005f66 <USBD_LL_IsoOUTIncomplete>
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	4611      	mov	r1, r2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fd21 	bl	8005f02 <USBD_LL_IsoINIncomplete>
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fd77 	bl	8005fca <USBD_LL_DevConnected>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fd74 	bl	8005fe0 <USBD_LL_DevDisconnected>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d13c      	bne.n	800758a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007510:	4a20      	ldr	r2, [pc, #128]	@ (8007594 <USBD_LL_Init+0x94>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a1e      	ldr	r2, [pc, #120]	@ (8007594 <USBD_LL_Init+0x94>)
 800751c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007520:	4b1c      	ldr	r3, [pc, #112]	@ (8007594 <USBD_LL_Init+0x94>)
 8007522:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007526:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007528:	4b1a      	ldr	r3, [pc, #104]	@ (8007594 <USBD_LL_Init+0x94>)
 800752a:	2204      	movs	r2, #4
 800752c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800752e:	4b19      	ldr	r3, [pc, #100]	@ (8007594 <USBD_LL_Init+0x94>)
 8007530:	2202      	movs	r2, #2
 8007532:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007534:	4b17      	ldr	r3, [pc, #92]	@ (8007594 <USBD_LL_Init+0x94>)
 8007536:	2200      	movs	r2, #0
 8007538:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800753a:	4b16      	ldr	r3, [pc, #88]	@ (8007594 <USBD_LL_Init+0x94>)
 800753c:	2202      	movs	r2, #2
 800753e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007540:	4b14      	ldr	r3, [pc, #80]	@ (8007594 <USBD_LL_Init+0x94>)
 8007542:	2200      	movs	r2, #0
 8007544:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007546:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <USBD_LL_Init+0x94>)
 8007548:	2200      	movs	r2, #0
 800754a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800754c:	4b11      	ldr	r3, [pc, #68]	@ (8007594 <USBD_LL_Init+0x94>)
 800754e:	2200      	movs	r2, #0
 8007550:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007552:	4b10      	ldr	r3, [pc, #64]	@ (8007594 <USBD_LL_Init+0x94>)
 8007554:	2200      	movs	r2, #0
 8007556:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007558:	4b0e      	ldr	r3, [pc, #56]	@ (8007594 <USBD_LL_Init+0x94>)
 800755a:	2200      	movs	r2, #0
 800755c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800755e:	480d      	ldr	r0, [pc, #52]	@ (8007594 <USBD_LL_Init+0x94>)
 8007560:	f7fa fb52 	bl	8001c08 <HAL_PCD_Init>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800756a:	f7f9 ff47 	bl	80013fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800756e:	2180      	movs	r1, #128	@ 0x80
 8007570:	4808      	ldr	r0, [pc, #32]	@ (8007594 <USBD_LL_Init+0x94>)
 8007572:	f7fb fd7e 	bl	8003072 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007576:	2240      	movs	r2, #64	@ 0x40
 8007578:	2100      	movs	r1, #0
 800757a:	4806      	ldr	r0, [pc, #24]	@ (8007594 <USBD_LL_Init+0x94>)
 800757c:	f7fb fd32 	bl	8002fe4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007580:	2280      	movs	r2, #128	@ 0x80
 8007582:	2101      	movs	r1, #1
 8007584:	4803      	ldr	r0, [pc, #12]	@ (8007594 <USBD_LL_Init+0x94>)
 8007586:	f7fb fd2d 	bl	8002fe4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	2000115c 	.word	0x2000115c

08007598 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fa fc39 	bl	8001e26 <HAL_PCD_Start>
 80075b4:	4603      	mov	r3, r0
 80075b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f942 	bl	8007844 <USBD_Get_USB_Status>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	461a      	mov	r2, r3
 80075dc:	4603      	mov	r3, r0
 80075de:	70fb      	strb	r3, [r7, #3]
 80075e0:	460b      	mov	r3, r1
 80075e2:	70bb      	strb	r3, [r7, #2]
 80075e4:	4613      	mov	r3, r2
 80075e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80075f6:	78bb      	ldrb	r3, [r7, #2]
 80075f8:	883a      	ldrh	r2, [r7, #0]
 80075fa:	78f9      	ldrb	r1, [r7, #3]
 80075fc:	f7fb f90d 	bl	800281a <HAL_PCD_EP_Open>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f91c 	bl	8007844 <USBD_Get_USB_Status>
 800760c:	4603      	mov	r3, r0
 800760e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007610:	7bbb      	ldrb	r3, [r7, #14]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7fb f958 	bl	80028ee <HAL_PCD_EP_Close>
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f8fd 	bl	8007844 <USBD_Get_USB_Status>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800764e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fb fa10 	bl	8002a9c <HAL_PCD_EP_SetStall>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f8de 	bl	8007844 <USBD_Get_USB_Status>
 8007688:	4603      	mov	r3, r0
 800768a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800768c:	7bbb      	ldrb	r3, [r7, #14]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	4611      	mov	r1, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fb fa54 	bl	8002b62 <HAL_PCD_EP_ClrStall>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f8bf 	bl	8007844 <USBD_Get_USB_Status>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da0b      	bge.n	8007708 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	4613      	mov	r3, r2
 80076fa:	00db      	lsls	r3, r3, #3
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	3316      	adds	r3, #22
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	e00b      	b.n	8007720 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800771e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f7fb f841 	bl	80027d2 <HAL_PCD_SetAddress>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f874 	bl	8007844 <USBD_Get_USB_Status>
 800775c:	4603      	mov	r3, r0
 800775e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007760:	7bbb      	ldrb	r3, [r7, #14]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	460b      	mov	r3, r1
 8007778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007788:	7af9      	ldrb	r1, [r7, #11]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	f7fb f94b 	bl	8002a28 <HAL_PCD_EP_Transmit>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007796:	7dfb      	ldrb	r3, [r7, #23]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f853 	bl	8007844 <USBD_Get_USB_Status>
 800779e:	4603      	mov	r3, r0
 80077a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	460b      	mov	r3, r1
 80077ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80077ca:	7af9      	ldrb	r1, [r7, #11]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	f7fb f8d7 	bl	8002982 <HAL_PCD_EP_Receive>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f832 	bl	8007844 <USBD_Get_USB_Status>
 80077e0:	4603      	mov	r3, r0
 80077e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007800:	78fa      	ldrb	r2, [r7, #3]
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f7fb f8f7 	bl	80029f8 <HAL_PCD_EP_GetRxCount>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800781c:	4b03      	ldr	r3, [pc, #12]	@ (800782c <USBD_static_malloc+0x18>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20001640 	.word	0x20001640

08007830 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d817      	bhi.n	8007888 <USBD_Get_USB_Status+0x44>
 8007858:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <USBD_Get_USB_Status+0x1c>)
 800785a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785e:	bf00      	nop
 8007860:	08007871 	.word	0x08007871
 8007864:	08007877 	.word	0x08007877
 8007868:	0800787d 	.word	0x0800787d
 800786c:	08007883 	.word	0x08007883
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]
    break;
 8007874:	e00b      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007876:	2303      	movs	r3, #3
 8007878:	73fb      	strb	r3, [r7, #15]
    break;
 800787a:	e008      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
    break;
 8007880:	e005      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	73fb      	strb	r3, [r7, #15]
    break;
 8007886:	e002      	b.n	800788e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	73fb      	strb	r3, [r7, #15]
    break;
 800788c:	bf00      	nop
  }
  return usb_status;
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <siscanf>:
 800789c:	b40e      	push	{r1, r2, r3}
 800789e:	b530      	push	{r4, r5, lr}
 80078a0:	b09c      	sub	sp, #112	@ 0x70
 80078a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80078a4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80078a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80078ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80078b0:	9002      	str	r0, [sp, #8]
 80078b2:	9006      	str	r0, [sp, #24]
 80078b4:	f7f8 fc9e 	bl	80001f4 <strlen>
 80078b8:	4b0b      	ldr	r3, [pc, #44]	@ (80078e8 <siscanf+0x4c>)
 80078ba:	9003      	str	r0, [sp, #12]
 80078bc:	9007      	str	r0, [sp, #28]
 80078be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c0:	480a      	ldr	r0, [pc, #40]	@ (80078ec <siscanf+0x50>)
 80078c2:	9401      	str	r4, [sp, #4]
 80078c4:	2300      	movs	r3, #0
 80078c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80078ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078d2:	462a      	mov	r2, r5
 80078d4:	4623      	mov	r3, r4
 80078d6:	a902      	add	r1, sp, #8
 80078d8:	6800      	ldr	r0, [r0, #0]
 80078da:	f000 f9a3 	bl	8007c24 <__ssvfiscanf_r>
 80078de:	b01c      	add	sp, #112	@ 0x70
 80078e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078e4:	b003      	add	sp, #12
 80078e6:	4770      	bx	lr
 80078e8:	080078f1 	.word	0x080078f1
 80078ec:	20000100 	.word	0x20000100

080078f0 <__seofread>:
 80078f0:	2000      	movs	r0, #0
 80078f2:	4770      	bx	lr

080078f4 <memset>:
 80078f4:	4402      	add	r2, r0
 80078f6:	4603      	mov	r3, r0
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d100      	bne.n	80078fe <memset+0xa>
 80078fc:	4770      	bx	lr
 80078fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007902:	e7f9      	b.n	80078f8 <memset+0x4>

08007904 <strncpy>:
 8007904:	b510      	push	{r4, lr}
 8007906:	3901      	subs	r1, #1
 8007908:	4603      	mov	r3, r0
 800790a:	b132      	cbz	r2, 800791a <strncpy+0x16>
 800790c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007910:	f803 4b01 	strb.w	r4, [r3], #1
 8007914:	3a01      	subs	r2, #1
 8007916:	2c00      	cmp	r4, #0
 8007918:	d1f7      	bne.n	800790a <strncpy+0x6>
 800791a:	441a      	add	r2, r3
 800791c:	2100      	movs	r1, #0
 800791e:	4293      	cmp	r3, r2
 8007920:	d100      	bne.n	8007924 <strncpy+0x20>
 8007922:	bd10      	pop	{r4, pc}
 8007924:	f803 1b01 	strb.w	r1, [r3], #1
 8007928:	e7f9      	b.n	800791e <strncpy+0x1a>
	...

0800792c <__errno>:
 800792c:	4b01      	ldr	r3, [pc, #4]	@ (8007934 <__errno+0x8>)
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000100 	.word	0x20000100

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	@ (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	@ (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	@ (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	@ (800797c <__libc_init_array+0x44>)
 800794c:	f001 fe10 	bl	8009570 <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	08009900 	.word	0x08009900
 8007974:	08009900 	.word	0x08009900
 8007978:	08009900 	.word	0x08009900
 800797c:	08009904 	.word	0x08009904

08007980 <__retarget_lock_acquire_recursive>:
 8007980:	4770      	bx	lr

08007982 <__retarget_lock_release_recursive>:
 8007982:	4770      	bx	lr

08007984 <_free_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4605      	mov	r5, r0
 8007988:	2900      	cmp	r1, #0
 800798a:	d041      	beq.n	8007a10 <_free_r+0x8c>
 800798c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007990:	1f0c      	subs	r4, r1, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	bfb8      	it	lt
 8007996:	18e4      	addlt	r4, r4, r3
 8007998:	f000 f8e0 	bl	8007b5c <__malloc_lock>
 800799c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a14 <_free_r+0x90>)
 800799e:	6813      	ldr	r3, [r2, #0]
 80079a0:	b933      	cbnz	r3, 80079b0 <_free_r+0x2c>
 80079a2:	6063      	str	r3, [r4, #4]
 80079a4:	6014      	str	r4, [r2, #0]
 80079a6:	4628      	mov	r0, r5
 80079a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ac:	f000 b8dc 	b.w	8007b68 <__malloc_unlock>
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d908      	bls.n	80079c6 <_free_r+0x42>
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	1821      	adds	r1, r4, r0
 80079b8:	428b      	cmp	r3, r1
 80079ba:	bf01      	itttt	eq
 80079bc:	6819      	ldreq	r1, [r3, #0]
 80079be:	685b      	ldreq	r3, [r3, #4]
 80079c0:	1809      	addeq	r1, r1, r0
 80079c2:	6021      	streq	r1, [r4, #0]
 80079c4:	e7ed      	b.n	80079a2 <_free_r+0x1e>
 80079c6:	461a      	mov	r2, r3
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	b10b      	cbz	r3, 80079d0 <_free_r+0x4c>
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d9fa      	bls.n	80079c6 <_free_r+0x42>
 80079d0:	6811      	ldr	r1, [r2, #0]
 80079d2:	1850      	adds	r0, r2, r1
 80079d4:	42a0      	cmp	r0, r4
 80079d6:	d10b      	bne.n	80079f0 <_free_r+0x6c>
 80079d8:	6820      	ldr	r0, [r4, #0]
 80079da:	4401      	add	r1, r0
 80079dc:	1850      	adds	r0, r2, r1
 80079de:	4283      	cmp	r3, r0
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	d1e0      	bne.n	80079a6 <_free_r+0x22>
 80079e4:	6818      	ldr	r0, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	6053      	str	r3, [r2, #4]
 80079ea:	4408      	add	r0, r1
 80079ec:	6010      	str	r0, [r2, #0]
 80079ee:	e7da      	b.n	80079a6 <_free_r+0x22>
 80079f0:	d902      	bls.n	80079f8 <_free_r+0x74>
 80079f2:	230c      	movs	r3, #12
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	e7d6      	b.n	80079a6 <_free_r+0x22>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	1821      	adds	r1, r4, r0
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf04      	itt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	6063      	str	r3, [r4, #4]
 8007a06:	bf04      	itt	eq
 8007a08:	1809      	addeq	r1, r1, r0
 8007a0a:	6021      	streq	r1, [r4, #0]
 8007a0c:	6054      	str	r4, [r2, #4]
 8007a0e:	e7ca      	b.n	80079a6 <_free_r+0x22>
 8007a10:	bd38      	pop	{r3, r4, r5, pc}
 8007a12:	bf00      	nop
 8007a14:	200019a4 	.word	0x200019a4

08007a18 <sbrk_aligned>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4e0f      	ldr	r6, [pc, #60]	@ (8007a58 <sbrk_aligned+0x40>)
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	6831      	ldr	r1, [r6, #0]
 8007a20:	4605      	mov	r5, r0
 8007a22:	b911      	cbnz	r1, 8007a2a <sbrk_aligned+0x12>
 8007a24:	f000 fc34 	bl	8008290 <_sbrk_r>
 8007a28:	6030      	str	r0, [r6, #0]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	f000 fc2f 	bl	8008290 <_sbrk_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d103      	bne.n	8007a3e <sbrk_aligned+0x26>
 8007a36:	f04f 34ff 	mov.w	r4, #4294967295
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	1cc4      	adds	r4, r0, #3
 8007a40:	f024 0403 	bic.w	r4, r4, #3
 8007a44:	42a0      	cmp	r0, r4
 8007a46:	d0f8      	beq.n	8007a3a <sbrk_aligned+0x22>
 8007a48:	1a21      	subs	r1, r4, r0
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 fc20 	bl	8008290 <_sbrk_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1f2      	bne.n	8007a3a <sbrk_aligned+0x22>
 8007a54:	e7ef      	b.n	8007a36 <sbrk_aligned+0x1e>
 8007a56:	bf00      	nop
 8007a58:	200019a0 	.word	0x200019a0

08007a5c <_malloc_r>:
 8007a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a60:	1ccd      	adds	r5, r1, #3
 8007a62:	f025 0503 	bic.w	r5, r5, #3
 8007a66:	3508      	adds	r5, #8
 8007a68:	2d0c      	cmp	r5, #12
 8007a6a:	bf38      	it	cc
 8007a6c:	250c      	movcc	r5, #12
 8007a6e:	2d00      	cmp	r5, #0
 8007a70:	4606      	mov	r6, r0
 8007a72:	db01      	blt.n	8007a78 <_malloc_r+0x1c>
 8007a74:	42a9      	cmp	r1, r5
 8007a76:	d904      	bls.n	8007a82 <_malloc_r+0x26>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	6033      	str	r3, [r6, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b58 <_malloc_r+0xfc>
 8007a86:	f000 f869 	bl	8007b5c <__malloc_lock>
 8007a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8e:	461c      	mov	r4, r3
 8007a90:	bb44      	cbnz	r4, 8007ae4 <_malloc_r+0x88>
 8007a92:	4629      	mov	r1, r5
 8007a94:	4630      	mov	r0, r6
 8007a96:	f7ff ffbf 	bl	8007a18 <sbrk_aligned>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	d158      	bne.n	8007b52 <_malloc_r+0xf6>
 8007aa0:	f8d8 4000 	ldr.w	r4, [r8]
 8007aa4:	4627      	mov	r7, r4
 8007aa6:	2f00      	cmp	r7, #0
 8007aa8:	d143      	bne.n	8007b32 <_malloc_r+0xd6>
 8007aaa:	2c00      	cmp	r4, #0
 8007aac:	d04b      	beq.n	8007b46 <_malloc_r+0xea>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	eb04 0903 	add.w	r9, r4, r3
 8007ab8:	f000 fbea 	bl	8008290 <_sbrk_r>
 8007abc:	4581      	cmp	r9, r0
 8007abe:	d142      	bne.n	8007b46 <_malloc_r+0xea>
 8007ac0:	6821      	ldr	r1, [r4, #0]
 8007ac2:	1a6d      	subs	r5, r5, r1
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7ff ffa6 	bl	8007a18 <sbrk_aligned>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d03a      	beq.n	8007b46 <_malloc_r+0xea>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	442b      	add	r3, r5
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	bb62      	cbnz	r2, 8007b38 <_malloc_r+0xdc>
 8007ade:	f8c8 7000 	str.w	r7, [r8]
 8007ae2:	e00f      	b.n	8007b04 <_malloc_r+0xa8>
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	1b52      	subs	r2, r2, r5
 8007ae8:	d420      	bmi.n	8007b2c <_malloc_r+0xd0>
 8007aea:	2a0b      	cmp	r2, #11
 8007aec:	d917      	bls.n	8007b1e <_malloc_r+0xc2>
 8007aee:	1961      	adds	r1, r4, r5
 8007af0:	42a3      	cmp	r3, r4
 8007af2:	6025      	str	r5, [r4, #0]
 8007af4:	bf18      	it	ne
 8007af6:	6059      	strne	r1, [r3, #4]
 8007af8:	6863      	ldr	r3, [r4, #4]
 8007afa:	bf08      	it	eq
 8007afc:	f8c8 1000 	streq.w	r1, [r8]
 8007b00:	5162      	str	r2, [r4, r5]
 8007b02:	604b      	str	r3, [r1, #4]
 8007b04:	4630      	mov	r0, r6
 8007b06:	f000 f82f 	bl	8007b68 <__malloc_unlock>
 8007b0a:	f104 000b 	add.w	r0, r4, #11
 8007b0e:	1d23      	adds	r3, r4, #4
 8007b10:	f020 0007 	bic.w	r0, r0, #7
 8007b14:	1ac2      	subs	r2, r0, r3
 8007b16:	bf1c      	itt	ne
 8007b18:	1a1b      	subne	r3, r3, r0
 8007b1a:	50a3      	strne	r3, [r4, r2]
 8007b1c:	e7af      	b.n	8007a7e <_malloc_r+0x22>
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	bf0c      	ite	eq
 8007b24:	f8c8 2000 	streq.w	r2, [r8]
 8007b28:	605a      	strne	r2, [r3, #4]
 8007b2a:	e7eb      	b.n	8007b04 <_malloc_r+0xa8>
 8007b2c:	4623      	mov	r3, r4
 8007b2e:	6864      	ldr	r4, [r4, #4]
 8007b30:	e7ae      	b.n	8007a90 <_malloc_r+0x34>
 8007b32:	463c      	mov	r4, r7
 8007b34:	687f      	ldr	r7, [r7, #4]
 8007b36:	e7b6      	b.n	8007aa6 <_malloc_r+0x4a>
 8007b38:	461a      	mov	r2, r3
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	42a3      	cmp	r3, r4
 8007b3e:	d1fb      	bne.n	8007b38 <_malloc_r+0xdc>
 8007b40:	2300      	movs	r3, #0
 8007b42:	6053      	str	r3, [r2, #4]
 8007b44:	e7de      	b.n	8007b04 <_malloc_r+0xa8>
 8007b46:	230c      	movs	r3, #12
 8007b48:	6033      	str	r3, [r6, #0]
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f000 f80c 	bl	8007b68 <__malloc_unlock>
 8007b50:	e794      	b.n	8007a7c <_malloc_r+0x20>
 8007b52:	6005      	str	r5, [r0, #0]
 8007b54:	e7d6      	b.n	8007b04 <_malloc_r+0xa8>
 8007b56:	bf00      	nop
 8007b58:	200019a4 	.word	0x200019a4

08007b5c <__malloc_lock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	@ (8007b64 <__malloc_lock+0x8>)
 8007b5e:	f7ff bf0f 	b.w	8007980 <__retarget_lock_acquire_recursive>
 8007b62:	bf00      	nop
 8007b64:	2000199c 	.word	0x2000199c

08007b68 <__malloc_unlock>:
 8007b68:	4801      	ldr	r0, [pc, #4]	@ (8007b70 <__malloc_unlock+0x8>)
 8007b6a:	f7ff bf0a 	b.w	8007982 <__retarget_lock_release_recursive>
 8007b6e:	bf00      	nop
 8007b70:	2000199c 	.word	0x2000199c

08007b74 <_sungetc_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	1c4b      	adds	r3, r1, #1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	d103      	bne.n	8007b84 <_sungetc_r+0x10>
 8007b7c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b80:	4628      	mov	r0, r5
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	8993      	ldrh	r3, [r2, #12]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	8193      	strh	r3, [r2, #12]
 8007b8c:	6853      	ldr	r3, [r2, #4]
 8007b8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b90:	b2cd      	uxtb	r5, r1
 8007b92:	b18a      	cbz	r2, 8007bb8 <_sungetc_r+0x44>
 8007b94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007b96:	429a      	cmp	r2, r3
 8007b98:	dd08      	ble.n	8007bac <_sungetc_r+0x38>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	1e5a      	subs	r2, r3, #1
 8007b9e:	6022      	str	r2, [r4, #0]
 8007ba0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	6063      	str	r3, [r4, #4]
 8007baa:	e7e9      	b.n	8007b80 <_sungetc_r+0xc>
 8007bac:	4621      	mov	r1, r4
 8007bae:	f000 fb34 	bl	800821a <__submore>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0f1      	beq.n	8007b9a <_sungetc_r+0x26>
 8007bb6:	e7e1      	b.n	8007b7c <_sungetc_r+0x8>
 8007bb8:	6921      	ldr	r1, [r4, #16]
 8007bba:	6822      	ldr	r2, [r4, #0]
 8007bbc:	b141      	cbz	r1, 8007bd0 <_sungetc_r+0x5c>
 8007bbe:	4291      	cmp	r1, r2
 8007bc0:	d206      	bcs.n	8007bd0 <_sungetc_r+0x5c>
 8007bc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8007bc6:	42a9      	cmp	r1, r5
 8007bc8:	d102      	bne.n	8007bd0 <_sungetc_r+0x5c>
 8007bca:	3a01      	subs	r2, #1
 8007bcc:	6022      	str	r2, [r4, #0]
 8007bce:	e7ea      	b.n	8007ba6 <_sungetc_r+0x32>
 8007bd0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8007bd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bda:	2303      	movs	r3, #3
 8007bdc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007bde:	4623      	mov	r3, r4
 8007be0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	2301      	movs	r3, #1
 8007be8:	e7de      	b.n	8007ba8 <_sungetc_r+0x34>

08007bea <__ssrefill_r>:
 8007bea:	b510      	push	{r4, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007bf0:	b169      	cbz	r1, 8007c0e <__ssrefill_r+0x24>
 8007bf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	d001      	beq.n	8007bfe <__ssrefill_r+0x14>
 8007bfa:	f7ff fec3 	bl	8007984 <_free_r>
 8007bfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	2000      	movs	r0, #0
 8007c04:	6360      	str	r0, [r4, #52]	@ 0x34
 8007c06:	b113      	cbz	r3, 8007c0e <__ssrefill_r+0x24>
 8007c08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007c0a:	6023      	str	r3, [r4, #0]
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	6063      	str	r3, [r4, #4]
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f043 0320 	orr.w	r3, r3, #32
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	e7f3      	b.n	8007c0c <__ssrefill_r+0x22>

08007c24 <__ssvfiscanf_r>:
 8007c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007c2e:	2100      	movs	r1, #0
 8007c30:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007c34:	49a5      	ldr	r1, [pc, #660]	@ (8007ecc <__ssvfiscanf_r+0x2a8>)
 8007c36:	91a0      	str	r1, [sp, #640]	@ 0x280
 8007c38:	f10d 0804 	add.w	r8, sp, #4
 8007c3c:	49a4      	ldr	r1, [pc, #656]	@ (8007ed0 <__ssvfiscanf_r+0x2ac>)
 8007c3e:	4fa5      	ldr	r7, [pc, #660]	@ (8007ed4 <__ssvfiscanf_r+0x2b0>)
 8007c40:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007c44:	4606      	mov	r6, r0
 8007c46:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	7813      	ldrb	r3, [r2, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8158 	beq.w	8007f02 <__ssvfiscanf_r+0x2de>
 8007c52:	5cf9      	ldrb	r1, [r7, r3]
 8007c54:	f011 0108 	ands.w	r1, r1, #8
 8007c58:	f102 0501 	add.w	r5, r2, #1
 8007c5c:	d019      	beq.n	8007c92 <__ssvfiscanf_r+0x6e>
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd0f      	ble.n	8007c84 <__ssvfiscanf_r+0x60>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	5cba      	ldrb	r2, [r7, r2]
 8007c6a:	0712      	lsls	r2, r2, #28
 8007c6c:	d401      	bmi.n	8007c72 <__ssvfiscanf_r+0x4e>
 8007c6e:	462a      	mov	r2, r5
 8007c70:	e7eb      	b.n	8007c4a <__ssvfiscanf_r+0x26>
 8007c72:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007c74:	3201      	adds	r2, #1
 8007c76:	9245      	str	r2, [sp, #276]	@ 0x114
 8007c78:	6862      	ldr	r2, [r4, #4]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	3a01      	subs	r2, #1
 8007c7e:	6062      	str	r2, [r4, #4]
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	e7ec      	b.n	8007c5e <__ssvfiscanf_r+0x3a>
 8007c84:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007c86:	4621      	mov	r1, r4
 8007c88:	4630      	mov	r0, r6
 8007c8a:	4798      	blx	r3
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d0e9      	beq.n	8007c64 <__ssvfiscanf_r+0x40>
 8007c90:	e7ed      	b.n	8007c6e <__ssvfiscanf_r+0x4a>
 8007c92:	2b25      	cmp	r3, #37	@ 0x25
 8007c94:	d012      	beq.n	8007cbc <__ssvfiscanf_r+0x98>
 8007c96:	4699      	mov	r9, r3
 8007c98:	6863      	ldr	r3, [r4, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f340 8093 	ble.w	8007dc6 <__ssvfiscanf_r+0x1a2>
 8007ca0:	6822      	ldr	r2, [r4, #0]
 8007ca2:	7813      	ldrb	r3, [r2, #0]
 8007ca4:	454b      	cmp	r3, r9
 8007ca6:	f040 812c 	bne.w	8007f02 <__ssvfiscanf_r+0x2de>
 8007caa:	6863      	ldr	r3, [r4, #4]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8007cb2:	3201      	adds	r2, #1
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	6022      	str	r2, [r4, #0]
 8007cb8:	9345      	str	r3, [sp, #276]	@ 0x114
 8007cba:	e7d8      	b.n	8007c6e <__ssvfiscanf_r+0x4a>
 8007cbc:	9141      	str	r1, [sp, #260]	@ 0x104
 8007cbe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007cc0:	7853      	ldrb	r3, [r2, #1]
 8007cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cc4:	bf02      	ittt	eq
 8007cc6:	2310      	moveq	r3, #16
 8007cc8:	1c95      	addeq	r5, r2, #2
 8007cca:	9341      	streq	r3, [sp, #260]	@ 0x104
 8007ccc:	220a      	movs	r2, #10
 8007cce:	46a9      	mov	r9, r5
 8007cd0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8007cd4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8007cd8:	2b09      	cmp	r3, #9
 8007cda:	d91e      	bls.n	8007d1a <__ssvfiscanf_r+0xf6>
 8007cdc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8007ed8 <__ssvfiscanf_r+0x2b4>
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	f7f8 fa94 	bl	8000210 <memchr>
 8007ce8:	b138      	cbz	r0, 8007cfa <__ssvfiscanf_r+0xd6>
 8007cea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007cec:	eba0 000a 	sub.w	r0, r0, sl
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4083      	lsls	r3, r0
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	9341      	str	r3, [sp, #260]	@ 0x104
 8007cf8:	464d      	mov	r5, r9
 8007cfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007cfe:	2b78      	cmp	r3, #120	@ 0x78
 8007d00:	d806      	bhi.n	8007d10 <__ssvfiscanf_r+0xec>
 8007d02:	2b57      	cmp	r3, #87	@ 0x57
 8007d04:	d810      	bhi.n	8007d28 <__ssvfiscanf_r+0x104>
 8007d06:	2b25      	cmp	r3, #37	@ 0x25
 8007d08:	d0c5      	beq.n	8007c96 <__ssvfiscanf_r+0x72>
 8007d0a:	d857      	bhi.n	8007dbc <__ssvfiscanf_r+0x198>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d065      	beq.n	8007ddc <__ssvfiscanf_r+0x1b8>
 8007d10:	2303      	movs	r3, #3
 8007d12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007d14:	230a      	movs	r3, #10
 8007d16:	9342      	str	r3, [sp, #264]	@ 0x108
 8007d18:	e078      	b.n	8007e0c <__ssvfiscanf_r+0x1e8>
 8007d1a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8007d1c:	fb02 1103 	mla	r1, r2, r3, r1
 8007d20:	3930      	subs	r1, #48	@ 0x30
 8007d22:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007d24:	464d      	mov	r5, r9
 8007d26:	e7d2      	b.n	8007cce <__ssvfiscanf_r+0xaa>
 8007d28:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007d2c:	2a20      	cmp	r2, #32
 8007d2e:	d8ef      	bhi.n	8007d10 <__ssvfiscanf_r+0xec>
 8007d30:	a101      	add	r1, pc, #4	@ (adr r1, 8007d38 <__ssvfiscanf_r+0x114>)
 8007d32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d36:	bf00      	nop
 8007d38:	08007deb 	.word	0x08007deb
 8007d3c:	08007d11 	.word	0x08007d11
 8007d40:	08007d11 	.word	0x08007d11
 8007d44:	08007e45 	.word	0x08007e45
 8007d48:	08007d11 	.word	0x08007d11
 8007d4c:	08007d11 	.word	0x08007d11
 8007d50:	08007d11 	.word	0x08007d11
 8007d54:	08007d11 	.word	0x08007d11
 8007d58:	08007d11 	.word	0x08007d11
 8007d5c:	08007d11 	.word	0x08007d11
 8007d60:	08007d11 	.word	0x08007d11
 8007d64:	08007e5b 	.word	0x08007e5b
 8007d68:	08007e41 	.word	0x08007e41
 8007d6c:	08007dc3 	.word	0x08007dc3
 8007d70:	08007dc3 	.word	0x08007dc3
 8007d74:	08007dc3 	.word	0x08007dc3
 8007d78:	08007d11 	.word	0x08007d11
 8007d7c:	08007dfd 	.word	0x08007dfd
 8007d80:	08007d11 	.word	0x08007d11
 8007d84:	08007d11 	.word	0x08007d11
 8007d88:	08007d11 	.word	0x08007d11
 8007d8c:	08007d11 	.word	0x08007d11
 8007d90:	08007e6b 	.word	0x08007e6b
 8007d94:	08007e05 	.word	0x08007e05
 8007d98:	08007de3 	.word	0x08007de3
 8007d9c:	08007d11 	.word	0x08007d11
 8007da0:	08007d11 	.word	0x08007d11
 8007da4:	08007e67 	.word	0x08007e67
 8007da8:	08007d11 	.word	0x08007d11
 8007dac:	08007e41 	.word	0x08007e41
 8007db0:	08007d11 	.word	0x08007d11
 8007db4:	08007d11 	.word	0x08007d11
 8007db8:	08007deb 	.word	0x08007deb
 8007dbc:	3b45      	subs	r3, #69	@ 0x45
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d8a6      	bhi.n	8007d10 <__ssvfiscanf_r+0xec>
 8007dc2:	2305      	movs	r3, #5
 8007dc4:	e021      	b.n	8007e0a <__ssvfiscanf_r+0x1e6>
 8007dc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4798      	blx	r3
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f af66 	beq.w	8007ca0 <__ssvfiscanf_r+0x7c>
 8007dd4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f040 808b 	bne.w	8007ef2 <__ssvfiscanf_r+0x2ce>
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	e08b      	b.n	8007efa <__ssvfiscanf_r+0x2d6>
 8007de2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007de4:	f042 0220 	orr.w	r2, r2, #32
 8007de8:	9241      	str	r2, [sp, #260]	@ 0x104
 8007dea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8007dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007df0:	9241      	str	r2, [sp, #260]	@ 0x104
 8007df2:	2210      	movs	r2, #16
 8007df4:	2b6e      	cmp	r3, #110	@ 0x6e
 8007df6:	9242      	str	r2, [sp, #264]	@ 0x108
 8007df8:	d902      	bls.n	8007e00 <__ssvfiscanf_r+0x1dc>
 8007dfa:	e005      	b.n	8007e08 <__ssvfiscanf_r+0x1e4>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e00:	2303      	movs	r3, #3
 8007e02:	e002      	b.n	8007e0a <__ssvfiscanf_r+0x1e6>
 8007e04:	2308      	movs	r3, #8
 8007e06:	9342      	str	r3, [sp, #264]	@ 0x108
 8007e08:	2304      	movs	r3, #4
 8007e0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dd39      	ble.n	8007e86 <__ssvfiscanf_r+0x262>
 8007e12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e14:	0659      	lsls	r1, r3, #25
 8007e16:	d404      	bmi.n	8007e22 <__ssvfiscanf_r+0x1fe>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	5cba      	ldrb	r2, [r7, r2]
 8007e1e:	0712      	lsls	r2, r2, #28
 8007e20:	d438      	bmi.n	8007e94 <__ssvfiscanf_r+0x270>
 8007e22:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	dc47      	bgt.n	8007eb8 <__ssvfiscanf_r+0x294>
 8007e28:	466b      	mov	r3, sp
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	a941      	add	r1, sp, #260	@ 0x104
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f000 f86c 	bl	8007f0c <_scanf_chars>
 8007e34:	2801      	cmp	r0, #1
 8007e36:	d064      	beq.n	8007f02 <__ssvfiscanf_r+0x2de>
 8007e38:	2802      	cmp	r0, #2
 8007e3a:	f47f af18 	bne.w	8007c6e <__ssvfiscanf_r+0x4a>
 8007e3e:	e7c9      	b.n	8007dd4 <__ssvfiscanf_r+0x1b0>
 8007e40:	220a      	movs	r2, #10
 8007e42:	e7d7      	b.n	8007df4 <__ssvfiscanf_r+0x1d0>
 8007e44:	4629      	mov	r1, r5
 8007e46:	4640      	mov	r0, r8
 8007e48:	f000 f9ae 	bl	80081a8 <__sccl>
 8007e4c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e52:	9341      	str	r3, [sp, #260]	@ 0x104
 8007e54:	4605      	mov	r5, r0
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7d7      	b.n	8007e0a <__ssvfiscanf_r+0x1e6>
 8007e5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e60:	9341      	str	r3, [sp, #260]	@ 0x104
 8007e62:	2300      	movs	r3, #0
 8007e64:	e7d1      	b.n	8007e0a <__ssvfiscanf_r+0x1e6>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e7cf      	b.n	8007e0a <__ssvfiscanf_r+0x1e6>
 8007e6a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007e6c:	06c3      	lsls	r3, r0, #27
 8007e6e:	f53f aefe 	bmi.w	8007c6e <__ssvfiscanf_r+0x4a>
 8007e72:	9b00      	ldr	r3, [sp, #0]
 8007e74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007e76:	1d19      	adds	r1, r3, #4
 8007e78:	9100      	str	r1, [sp, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	07c0      	lsls	r0, r0, #31
 8007e7e:	bf4c      	ite	mi
 8007e80:	801a      	strhmi	r2, [r3, #0]
 8007e82:	601a      	strpl	r2, [r3, #0]
 8007e84:	e6f3      	b.n	8007c6e <__ssvfiscanf_r+0x4a>
 8007e86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	4798      	blx	r3
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d0bf      	beq.n	8007e12 <__ssvfiscanf_r+0x1ee>
 8007e92:	e79f      	b.n	8007dd4 <__ssvfiscanf_r+0x1b0>
 8007e94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007e96:	3201      	adds	r2, #1
 8007e98:	9245      	str	r2, [sp, #276]	@ 0x114
 8007e9a:	6862      	ldr	r2, [r4, #4]
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	6062      	str	r2, [r4, #4]
 8007ea2:	dd02      	ble.n	8007eaa <__ssvfiscanf_r+0x286>
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	e7b6      	b.n	8007e18 <__ssvfiscanf_r+0x1f4>
 8007eaa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007eac:	4621      	mov	r1, r4
 8007eae:	4630      	mov	r0, r6
 8007eb0:	4798      	blx	r3
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d0b0      	beq.n	8007e18 <__ssvfiscanf_r+0x1f4>
 8007eb6:	e78d      	b.n	8007dd4 <__ssvfiscanf_r+0x1b0>
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	dc0f      	bgt.n	8007edc <__ssvfiscanf_r+0x2b8>
 8007ebc:	466b      	mov	r3, sp
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	a941      	add	r1, sp, #260	@ 0x104
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 f87c 	bl	8007fc0 <_scanf_i>
 8007ec8:	e7b4      	b.n	8007e34 <__ssvfiscanf_r+0x210>
 8007eca:	bf00      	nop
 8007ecc:	08007b75 	.word	0x08007b75
 8007ed0:	08007beb 	.word	0x08007beb
 8007ed4:	08009620 	.word	0x08009620
 8007ed8:	08009600 	.word	0x08009600
 8007edc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <__ssvfiscanf_r+0x2e4>)
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f43f aec5 	beq.w	8007c6e <__ssvfiscanf_r+0x4a>
 8007ee4:	466b      	mov	r3, sp
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	a941      	add	r1, sp, #260	@ 0x104
 8007eea:	4630      	mov	r0, r6
 8007eec:	f3af 8000 	nop.w
 8007ef0:	e7a0      	b.n	8007e34 <__ssvfiscanf_r+0x210>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	065b      	lsls	r3, r3, #25
 8007ef6:	f53f af71 	bmi.w	8007ddc <__ssvfiscanf_r+0x1b8>
 8007efa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f02:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007f04:	e7f9      	b.n	8007efa <__ssvfiscanf_r+0x2d6>
 8007f06:	bf00      	nop
 8007f08:	00000000 	.word	0x00000000

08007f0c <_scanf_chars>:
 8007f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f10:	4615      	mov	r5, r2
 8007f12:	688a      	ldr	r2, [r1, #8]
 8007f14:	4680      	mov	r8, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	b932      	cbnz	r2, 8007f28 <_scanf_chars+0x1c>
 8007f1a:	698a      	ldr	r2, [r1, #24]
 8007f1c:	2a00      	cmp	r2, #0
 8007f1e:	bf14      	ite	ne
 8007f20:	f04f 32ff 	movne.w	r2, #4294967295
 8007f24:	2201      	moveq	r2, #1
 8007f26:	608a      	str	r2, [r1, #8]
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007fbc <_scanf_chars+0xb0>
 8007f2e:	06d1      	lsls	r1, r2, #27
 8007f30:	bf5f      	itttt	pl
 8007f32:	681a      	ldrpl	r2, [r3, #0]
 8007f34:	1d11      	addpl	r1, r2, #4
 8007f36:	6019      	strpl	r1, [r3, #0]
 8007f38:	6816      	ldrpl	r6, [r2, #0]
 8007f3a:	2700      	movs	r7, #0
 8007f3c:	69a0      	ldr	r0, [r4, #24]
 8007f3e:	b188      	cbz	r0, 8007f64 <_scanf_chars+0x58>
 8007f40:	2801      	cmp	r0, #1
 8007f42:	d107      	bne.n	8007f54 <_scanf_chars+0x48>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	6963      	ldr	r3, [r4, #20]
 8007f4a:	5c9b      	ldrb	r3, [r3, r2]
 8007f4c:	b953      	cbnz	r3, 8007f64 <_scanf_chars+0x58>
 8007f4e:	2f00      	cmp	r7, #0
 8007f50:	d031      	beq.n	8007fb6 <_scanf_chars+0xaa>
 8007f52:	e022      	b.n	8007f9a <_scanf_chars+0x8e>
 8007f54:	2802      	cmp	r0, #2
 8007f56:	d120      	bne.n	8007f9a <_scanf_chars+0x8e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007f60:	071b      	lsls	r3, r3, #28
 8007f62:	d41a      	bmi.n	8007f9a <_scanf_chars+0x8e>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	06da      	lsls	r2, r3, #27
 8007f68:	bf5e      	ittt	pl
 8007f6a:	682b      	ldrpl	r3, [r5, #0]
 8007f6c:	781b      	ldrbpl	r3, [r3, #0]
 8007f6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007f72:	682a      	ldr	r2, [r5, #0]
 8007f74:	686b      	ldr	r3, [r5, #4]
 8007f76:	3201      	adds	r2, #1
 8007f78:	602a      	str	r2, [r5, #0]
 8007f7a:	68a2      	ldr	r2, [r4, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	606b      	str	r3, [r5, #4]
 8007f82:	3701      	adds	r7, #1
 8007f84:	60a2      	str	r2, [r4, #8]
 8007f86:	b142      	cbz	r2, 8007f9a <_scanf_chars+0x8e>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	dcd7      	bgt.n	8007f3c <_scanf_chars+0x30>
 8007f8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007f90:	4629      	mov	r1, r5
 8007f92:	4640      	mov	r0, r8
 8007f94:	4798      	blx	r3
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d0d0      	beq.n	8007f3c <_scanf_chars+0x30>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	f013 0310 	ands.w	r3, r3, #16
 8007fa0:	d105      	bne.n	8007fae <_scanf_chars+0xa2>
 8007fa2:	68e2      	ldr	r2, [r4, #12]
 8007fa4:	3201      	adds	r2, #1
 8007fa6:	60e2      	str	r2, [r4, #12]
 8007fa8:	69a2      	ldr	r2, [r4, #24]
 8007faa:	b102      	cbz	r2, 8007fae <_scanf_chars+0xa2>
 8007fac:	7033      	strb	r3, [r6, #0]
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	443b      	add	r3, r7
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fba:	bf00      	nop
 8007fbc:	08009620 	.word	0x08009620

08007fc0 <_scanf_i>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	4698      	mov	r8, r3
 8007fc6:	4b74      	ldr	r3, [pc, #464]	@ (8008198 <_scanf_i+0x1d8>)
 8007fc8:	460c      	mov	r4, r1
 8007fca:	4682      	mov	sl, r0
 8007fcc:	4616      	mov	r6, r2
 8007fce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	ab03      	add	r3, sp, #12
 8007fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007fda:	4b70      	ldr	r3, [pc, #448]	@ (800819c <_scanf_i+0x1dc>)
 8007fdc:	69a1      	ldr	r1, [r4, #24]
 8007fde:	4a70      	ldr	r2, [pc, #448]	@ (80081a0 <_scanf_i+0x1e0>)
 8007fe0:	2903      	cmp	r1, #3
 8007fe2:	bf08      	it	eq
 8007fe4:	461a      	moveq	r2, r3
 8007fe6:	68a3      	ldr	r3, [r4, #8]
 8007fe8:	9201      	str	r2, [sp, #4]
 8007fea:	1e5a      	subs	r2, r3, #1
 8007fec:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007ff0:	bf88      	it	hi
 8007ff2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007ff6:	4627      	mov	r7, r4
 8007ff8:	bf82      	ittt	hi
 8007ffa:	eb03 0905 	addhi.w	r9, r3, r5
 8007ffe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008002:	60a3      	strhi	r3, [r4, #8]
 8008004:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008008:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800800c:	bf98      	it	ls
 800800e:	f04f 0900 	movls.w	r9, #0
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	463d      	mov	r5, r7
 8008016:	f04f 0b00 	mov.w	fp, #0
 800801a:	6831      	ldr	r1, [r6, #0]
 800801c:	ab03      	add	r3, sp, #12
 800801e:	7809      	ldrb	r1, [r1, #0]
 8008020:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008024:	2202      	movs	r2, #2
 8008026:	f7f8 f8f3 	bl	8000210 <memchr>
 800802a:	b328      	cbz	r0, 8008078 <_scanf_i+0xb8>
 800802c:	f1bb 0f01 	cmp.w	fp, #1
 8008030:	d159      	bne.n	80080e6 <_scanf_i+0x126>
 8008032:	6862      	ldr	r2, [r4, #4]
 8008034:	b92a      	cbnz	r2, 8008042 <_scanf_i+0x82>
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	2108      	movs	r1, #8
 800803a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800803e:	6061      	str	r1, [r4, #4]
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008048:	6022      	str	r2, [r4, #0]
 800804a:	68a2      	ldr	r2, [r4, #8]
 800804c:	1e51      	subs	r1, r2, #1
 800804e:	60a1      	str	r1, [r4, #8]
 8008050:	b192      	cbz	r2, 8008078 <_scanf_i+0xb8>
 8008052:	6832      	ldr	r2, [r6, #0]
 8008054:	1c51      	adds	r1, r2, #1
 8008056:	6031      	str	r1, [r6, #0]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	f805 2b01 	strb.w	r2, [r5], #1
 800805e:	6872      	ldr	r2, [r6, #4]
 8008060:	3a01      	subs	r2, #1
 8008062:	2a00      	cmp	r2, #0
 8008064:	6072      	str	r2, [r6, #4]
 8008066:	dc07      	bgt.n	8008078 <_scanf_i+0xb8>
 8008068:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800806c:	4631      	mov	r1, r6
 800806e:	4650      	mov	r0, sl
 8008070:	4790      	blx	r2
 8008072:	2800      	cmp	r0, #0
 8008074:	f040 8085 	bne.w	8008182 <_scanf_i+0x1c2>
 8008078:	f10b 0b01 	add.w	fp, fp, #1
 800807c:	f1bb 0f03 	cmp.w	fp, #3
 8008080:	d1cb      	bne.n	800801a <_scanf_i+0x5a>
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	b90b      	cbnz	r3, 800808a <_scanf_i+0xca>
 8008086:	230a      	movs	r3, #10
 8008088:	6063      	str	r3, [r4, #4]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	4945      	ldr	r1, [pc, #276]	@ (80081a4 <_scanf_i+0x1e4>)
 800808e:	6960      	ldr	r0, [r4, #20]
 8008090:	1ac9      	subs	r1, r1, r3
 8008092:	f000 f889 	bl	80081a8 <__sccl>
 8008096:	f04f 0b00 	mov.w	fp, #0
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d03d      	beq.n	800811e <_scanf_i+0x15e>
 80080a2:	6831      	ldr	r1, [r6, #0]
 80080a4:	6960      	ldr	r0, [r4, #20]
 80080a6:	f891 c000 	ldrb.w	ip, [r1]
 80080aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d035      	beq.n	800811e <_scanf_i+0x15e>
 80080b2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80080b6:	d124      	bne.n	8008102 <_scanf_i+0x142>
 80080b8:	0510      	lsls	r0, r2, #20
 80080ba:	d522      	bpl.n	8008102 <_scanf_i+0x142>
 80080bc:	f10b 0b01 	add.w	fp, fp, #1
 80080c0:	f1b9 0f00 	cmp.w	r9, #0
 80080c4:	d003      	beq.n	80080ce <_scanf_i+0x10e>
 80080c6:	3301      	adds	r3, #1
 80080c8:	f109 39ff 	add.w	r9, r9, #4294967295
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	6873      	ldr	r3, [r6, #4]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	6073      	str	r3, [r6, #4]
 80080d6:	dd1b      	ble.n	8008110 <_scanf_i+0x150>
 80080d8:	6833      	ldr	r3, [r6, #0]
 80080da:	3301      	adds	r3, #1
 80080dc:	6033      	str	r3, [r6, #0]
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	e7d9      	b.n	800809a <_scanf_i+0xda>
 80080e6:	f1bb 0f02 	cmp.w	fp, #2
 80080ea:	d1ae      	bne.n	800804a <_scanf_i+0x8a>
 80080ec:	6822      	ldr	r2, [r4, #0]
 80080ee:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80080f2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80080f6:	d1bf      	bne.n	8008078 <_scanf_i+0xb8>
 80080f8:	2110      	movs	r1, #16
 80080fa:	6061      	str	r1, [r4, #4]
 80080fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008100:	e7a2      	b.n	8008048 <_scanf_i+0x88>
 8008102:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008106:	6022      	str	r2, [r4, #0]
 8008108:	780b      	ldrb	r3, [r1, #0]
 800810a:	f805 3b01 	strb.w	r3, [r5], #1
 800810e:	e7de      	b.n	80080ce <_scanf_i+0x10e>
 8008110:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008114:	4631      	mov	r1, r6
 8008116:	4650      	mov	r0, sl
 8008118:	4798      	blx	r3
 800811a:	2800      	cmp	r0, #0
 800811c:	d0df      	beq.n	80080de <_scanf_i+0x11e>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	05d9      	lsls	r1, r3, #23
 8008122:	d50d      	bpl.n	8008140 <_scanf_i+0x180>
 8008124:	42bd      	cmp	r5, r7
 8008126:	d909      	bls.n	800813c <_scanf_i+0x17c>
 8008128:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800812c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008130:	4632      	mov	r2, r6
 8008132:	4650      	mov	r0, sl
 8008134:	4798      	blx	r3
 8008136:	f105 39ff 	add.w	r9, r5, #4294967295
 800813a:	464d      	mov	r5, r9
 800813c:	42bd      	cmp	r5, r7
 800813e:	d028      	beq.n	8008192 <_scanf_i+0x1d2>
 8008140:	6822      	ldr	r2, [r4, #0]
 8008142:	f012 0210 	ands.w	r2, r2, #16
 8008146:	d113      	bne.n	8008170 <_scanf_i+0x1b0>
 8008148:	702a      	strb	r2, [r5, #0]
 800814a:	6863      	ldr	r3, [r4, #4]
 800814c:	9e01      	ldr	r6, [sp, #4]
 800814e:	4639      	mov	r1, r7
 8008150:	4650      	mov	r0, sl
 8008152:	47b0      	blx	r6
 8008154:	f8d8 3000 	ldr.w	r3, [r8]
 8008158:	6821      	ldr	r1, [r4, #0]
 800815a:	1d1a      	adds	r2, r3, #4
 800815c:	f8c8 2000 	str.w	r2, [r8]
 8008160:	f011 0f20 	tst.w	r1, #32
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	d00f      	beq.n	8008188 <_scanf_i+0x1c8>
 8008168:	6018      	str	r0, [r3, #0]
 800816a:	68e3      	ldr	r3, [r4, #12]
 800816c:	3301      	adds	r3, #1
 800816e:	60e3      	str	r3, [r4, #12]
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	1bed      	subs	r5, r5, r7
 8008174:	445d      	add	r5, fp
 8008176:	442b      	add	r3, r5
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	2000      	movs	r0, #0
 800817c:	b007      	add	sp, #28
 800817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008182:	f04f 0b00 	mov.w	fp, #0
 8008186:	e7ca      	b.n	800811e <_scanf_i+0x15e>
 8008188:	07ca      	lsls	r2, r1, #31
 800818a:	bf4c      	ite	mi
 800818c:	8018      	strhmi	r0, [r3, #0]
 800818e:	6018      	strpl	r0, [r3, #0]
 8008190:	e7eb      	b.n	800816a <_scanf_i+0x1aa>
 8008192:	2001      	movs	r0, #1
 8008194:	e7f2      	b.n	800817c <_scanf_i+0x1bc>
 8008196:	bf00      	nop
 8008198:	080095e4 	.word	0x080095e4
 800819c:	0800841d 	.word	0x0800841d
 80081a0:	080084fd 	.word	0x080084fd
 80081a4:	08009614 	.word	0x08009614

080081a8 <__sccl>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	780b      	ldrb	r3, [r1, #0]
 80081ac:	4604      	mov	r4, r0
 80081ae:	2b5e      	cmp	r3, #94	@ 0x5e
 80081b0:	bf0b      	itete	eq
 80081b2:	784b      	ldrbeq	r3, [r1, #1]
 80081b4:	1c4a      	addne	r2, r1, #1
 80081b6:	1c8a      	addeq	r2, r1, #2
 80081b8:	2100      	movne	r1, #0
 80081ba:	bf08      	it	eq
 80081bc:	2101      	moveq	r1, #1
 80081be:	3801      	subs	r0, #1
 80081c0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80081c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80081c8:	42a8      	cmp	r0, r5
 80081ca:	d1fb      	bne.n	80081c4 <__sccl+0x1c>
 80081cc:	b90b      	cbnz	r3, 80081d2 <__sccl+0x2a>
 80081ce:	1e50      	subs	r0, r2, #1
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	f081 0101 	eor.w	r1, r1, #1
 80081d6:	54e1      	strb	r1, [r4, r3]
 80081d8:	4610      	mov	r0, r2
 80081da:	4602      	mov	r2, r0
 80081dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80081e0:	2d2d      	cmp	r5, #45	@ 0x2d
 80081e2:	d005      	beq.n	80081f0 <__sccl+0x48>
 80081e4:	2d5d      	cmp	r5, #93	@ 0x5d
 80081e6:	d016      	beq.n	8008216 <__sccl+0x6e>
 80081e8:	2d00      	cmp	r5, #0
 80081ea:	d0f1      	beq.n	80081d0 <__sccl+0x28>
 80081ec:	462b      	mov	r3, r5
 80081ee:	e7f2      	b.n	80081d6 <__sccl+0x2e>
 80081f0:	7846      	ldrb	r6, [r0, #1]
 80081f2:	2e5d      	cmp	r6, #93	@ 0x5d
 80081f4:	d0fa      	beq.n	80081ec <__sccl+0x44>
 80081f6:	42b3      	cmp	r3, r6
 80081f8:	dcf8      	bgt.n	80081ec <__sccl+0x44>
 80081fa:	3002      	adds	r0, #2
 80081fc:	461a      	mov	r2, r3
 80081fe:	3201      	adds	r2, #1
 8008200:	4296      	cmp	r6, r2
 8008202:	54a1      	strb	r1, [r4, r2]
 8008204:	dcfb      	bgt.n	80081fe <__sccl+0x56>
 8008206:	1af2      	subs	r2, r6, r3
 8008208:	3a01      	subs	r2, #1
 800820a:	1c5d      	adds	r5, r3, #1
 800820c:	42b3      	cmp	r3, r6
 800820e:	bfa8      	it	ge
 8008210:	2200      	movge	r2, #0
 8008212:	18ab      	adds	r3, r5, r2
 8008214:	e7e1      	b.n	80081da <__sccl+0x32>
 8008216:	4610      	mov	r0, r2
 8008218:	e7da      	b.n	80081d0 <__sccl+0x28>

0800821a <__submore>:
 800821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821e:	460c      	mov	r4, r1
 8008220:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008226:	4299      	cmp	r1, r3
 8008228:	d11d      	bne.n	8008266 <__submore+0x4c>
 800822a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800822e:	f7ff fc15 	bl	8007a5c <_malloc_r>
 8008232:	b918      	cbnz	r0, 800823c <__submore+0x22>
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800823c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008240:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008242:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008246:	6360      	str	r0, [r4, #52]	@ 0x34
 8008248:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800824c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8008250:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8008254:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008258:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800825c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008260:	6020      	str	r0, [r4, #0]
 8008262:	2000      	movs	r0, #0
 8008264:	e7e8      	b.n	8008238 <__submore+0x1e>
 8008266:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008268:	0077      	lsls	r7, r6, #1
 800826a:	463a      	mov	r2, r7
 800826c:	f000 f82e 	bl	80082cc <_realloc_r>
 8008270:	4605      	mov	r5, r0
 8008272:	2800      	cmp	r0, #0
 8008274:	d0de      	beq.n	8008234 <__submore+0x1a>
 8008276:	eb00 0806 	add.w	r8, r0, r6
 800827a:	4601      	mov	r1, r0
 800827c:	4632      	mov	r2, r6
 800827e:	4640      	mov	r0, r8
 8008280:	f000 f816 	bl	80082b0 <memcpy>
 8008284:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8008288:	f8c4 8000 	str.w	r8, [r4]
 800828c:	e7e9      	b.n	8008262 <__submore+0x48>
	...

08008290 <_sbrk_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d06      	ldr	r5, [pc, #24]	@ (80082ac <_sbrk_r+0x1c>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	f7f9 f916 	bl	80014cc <_sbrk>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_sbrk_r+0x1a>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_sbrk_r+0x1a>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	20001998 	.word	0x20001998

080082b0 <memcpy>:
 80082b0:	440a      	add	r2, r1
 80082b2:	4291      	cmp	r1, r2
 80082b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082b8:	d100      	bne.n	80082bc <memcpy+0xc>
 80082ba:	4770      	bx	lr
 80082bc:	b510      	push	{r4, lr}
 80082be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082c6:	4291      	cmp	r1, r2
 80082c8:	d1f9      	bne.n	80082be <memcpy+0xe>
 80082ca:	bd10      	pop	{r4, pc}

080082cc <_realloc_r>:
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	4680      	mov	r8, r0
 80082d2:	4615      	mov	r5, r2
 80082d4:	460c      	mov	r4, r1
 80082d6:	b921      	cbnz	r1, 80082e2 <_realloc_r+0x16>
 80082d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	4611      	mov	r1, r2
 80082de:	f7ff bbbd 	b.w	8007a5c <_malloc_r>
 80082e2:	b92a      	cbnz	r2, 80082f0 <_realloc_r+0x24>
 80082e4:	f7ff fb4e 	bl	8007984 <_free_r>
 80082e8:	2400      	movs	r4, #0
 80082ea:	4620      	mov	r0, r4
 80082ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f0:	f000 f906 	bl	8008500 <_malloc_usable_size_r>
 80082f4:	4285      	cmp	r5, r0
 80082f6:	4606      	mov	r6, r0
 80082f8:	d802      	bhi.n	8008300 <_realloc_r+0x34>
 80082fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082fe:	d8f4      	bhi.n	80082ea <_realloc_r+0x1e>
 8008300:	4629      	mov	r1, r5
 8008302:	4640      	mov	r0, r8
 8008304:	f7ff fbaa 	bl	8007a5c <_malloc_r>
 8008308:	4607      	mov	r7, r0
 800830a:	2800      	cmp	r0, #0
 800830c:	d0ec      	beq.n	80082e8 <_realloc_r+0x1c>
 800830e:	42b5      	cmp	r5, r6
 8008310:	462a      	mov	r2, r5
 8008312:	4621      	mov	r1, r4
 8008314:	bf28      	it	cs
 8008316:	4632      	movcs	r2, r6
 8008318:	f7ff ffca 	bl	80082b0 <memcpy>
 800831c:	4621      	mov	r1, r4
 800831e:	4640      	mov	r0, r8
 8008320:	f7ff fb30 	bl	8007984 <_free_r>
 8008324:	463c      	mov	r4, r7
 8008326:	e7e0      	b.n	80082ea <_realloc_r+0x1e>

08008328 <_strtol_l.constprop.0>:
 8008328:	2b24      	cmp	r3, #36	@ 0x24
 800832a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832e:	4686      	mov	lr, r0
 8008330:	4690      	mov	r8, r2
 8008332:	d801      	bhi.n	8008338 <_strtol_l.constprop.0+0x10>
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <_strtol_l.constprop.0+0x1e>
 8008338:	f7ff faf8 	bl	800792c <__errno>
 800833c:	2316      	movs	r3, #22
 800833e:	6003      	str	r3, [r0, #0]
 8008340:	2000      	movs	r0, #0
 8008342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008346:	4834      	ldr	r0, [pc, #208]	@ (8008418 <_strtol_l.constprop.0+0xf0>)
 8008348:	460d      	mov	r5, r1
 800834a:	462a      	mov	r2, r5
 800834c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008350:	5d06      	ldrb	r6, [r0, r4]
 8008352:	f016 0608 	ands.w	r6, r6, #8
 8008356:	d1f8      	bne.n	800834a <_strtol_l.constprop.0+0x22>
 8008358:	2c2d      	cmp	r4, #45	@ 0x2d
 800835a:	d12d      	bne.n	80083b8 <_strtol_l.constprop.0+0x90>
 800835c:	782c      	ldrb	r4, [r5, #0]
 800835e:	2601      	movs	r6, #1
 8008360:	1c95      	adds	r5, r2, #2
 8008362:	f033 0210 	bics.w	r2, r3, #16
 8008366:	d109      	bne.n	800837c <_strtol_l.constprop.0+0x54>
 8008368:	2c30      	cmp	r4, #48	@ 0x30
 800836a:	d12a      	bne.n	80083c2 <_strtol_l.constprop.0+0x9a>
 800836c:	782a      	ldrb	r2, [r5, #0]
 800836e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008372:	2a58      	cmp	r2, #88	@ 0x58
 8008374:	d125      	bne.n	80083c2 <_strtol_l.constprop.0+0x9a>
 8008376:	786c      	ldrb	r4, [r5, #1]
 8008378:	2310      	movs	r3, #16
 800837a:	3502      	adds	r5, #2
 800837c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008380:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008384:	2200      	movs	r2, #0
 8008386:	fbbc f9f3 	udiv	r9, ip, r3
 800838a:	4610      	mov	r0, r2
 800838c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008390:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008394:	2f09      	cmp	r7, #9
 8008396:	d81b      	bhi.n	80083d0 <_strtol_l.constprop.0+0xa8>
 8008398:	463c      	mov	r4, r7
 800839a:	42a3      	cmp	r3, r4
 800839c:	dd27      	ble.n	80083ee <_strtol_l.constprop.0+0xc6>
 800839e:	1c57      	adds	r7, r2, #1
 80083a0:	d007      	beq.n	80083b2 <_strtol_l.constprop.0+0x8a>
 80083a2:	4581      	cmp	r9, r0
 80083a4:	d320      	bcc.n	80083e8 <_strtol_l.constprop.0+0xc0>
 80083a6:	d101      	bne.n	80083ac <_strtol_l.constprop.0+0x84>
 80083a8:	45a2      	cmp	sl, r4
 80083aa:	db1d      	blt.n	80083e8 <_strtol_l.constprop.0+0xc0>
 80083ac:	fb00 4003 	mla	r0, r0, r3, r4
 80083b0:	2201      	movs	r2, #1
 80083b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083b6:	e7eb      	b.n	8008390 <_strtol_l.constprop.0+0x68>
 80083b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80083ba:	bf04      	itt	eq
 80083bc:	782c      	ldrbeq	r4, [r5, #0]
 80083be:	1c95      	addeq	r5, r2, #2
 80083c0:	e7cf      	b.n	8008362 <_strtol_l.constprop.0+0x3a>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1da      	bne.n	800837c <_strtol_l.constprop.0+0x54>
 80083c6:	2c30      	cmp	r4, #48	@ 0x30
 80083c8:	bf0c      	ite	eq
 80083ca:	2308      	moveq	r3, #8
 80083cc:	230a      	movne	r3, #10
 80083ce:	e7d5      	b.n	800837c <_strtol_l.constprop.0+0x54>
 80083d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083d4:	2f19      	cmp	r7, #25
 80083d6:	d801      	bhi.n	80083dc <_strtol_l.constprop.0+0xb4>
 80083d8:	3c37      	subs	r4, #55	@ 0x37
 80083da:	e7de      	b.n	800839a <_strtol_l.constprop.0+0x72>
 80083dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083e0:	2f19      	cmp	r7, #25
 80083e2:	d804      	bhi.n	80083ee <_strtol_l.constprop.0+0xc6>
 80083e4:	3c57      	subs	r4, #87	@ 0x57
 80083e6:	e7d8      	b.n	800839a <_strtol_l.constprop.0+0x72>
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	e7e1      	b.n	80083b2 <_strtol_l.constprop.0+0x8a>
 80083ee:	1c53      	adds	r3, r2, #1
 80083f0:	d108      	bne.n	8008404 <_strtol_l.constprop.0+0xdc>
 80083f2:	2322      	movs	r3, #34	@ 0x22
 80083f4:	f8ce 3000 	str.w	r3, [lr]
 80083f8:	4660      	mov	r0, ip
 80083fa:	f1b8 0f00 	cmp.w	r8, #0
 80083fe:	d0a0      	beq.n	8008342 <_strtol_l.constprop.0+0x1a>
 8008400:	1e69      	subs	r1, r5, #1
 8008402:	e006      	b.n	8008412 <_strtol_l.constprop.0+0xea>
 8008404:	b106      	cbz	r6, 8008408 <_strtol_l.constprop.0+0xe0>
 8008406:	4240      	negs	r0, r0
 8008408:	f1b8 0f00 	cmp.w	r8, #0
 800840c:	d099      	beq.n	8008342 <_strtol_l.constprop.0+0x1a>
 800840e:	2a00      	cmp	r2, #0
 8008410:	d1f6      	bne.n	8008400 <_strtol_l.constprop.0+0xd8>
 8008412:	f8c8 1000 	str.w	r1, [r8]
 8008416:	e794      	b.n	8008342 <_strtol_l.constprop.0+0x1a>
 8008418:	08009620 	.word	0x08009620

0800841c <_strtol_r>:
 800841c:	f7ff bf84 	b.w	8008328 <_strtol_l.constprop.0>

08008420 <_strtoul_l.constprop.0>:
 8008420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008424:	4e34      	ldr	r6, [pc, #208]	@ (80084f8 <_strtoul_l.constprop.0+0xd8>)
 8008426:	4686      	mov	lr, r0
 8008428:	460d      	mov	r5, r1
 800842a:	4628      	mov	r0, r5
 800842c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008430:	5d37      	ldrb	r7, [r6, r4]
 8008432:	f017 0708 	ands.w	r7, r7, #8
 8008436:	d1f8      	bne.n	800842a <_strtoul_l.constprop.0+0xa>
 8008438:	2c2d      	cmp	r4, #45	@ 0x2d
 800843a:	d12f      	bne.n	800849c <_strtoul_l.constprop.0+0x7c>
 800843c:	782c      	ldrb	r4, [r5, #0]
 800843e:	2701      	movs	r7, #1
 8008440:	1c85      	adds	r5, r0, #2
 8008442:	f033 0010 	bics.w	r0, r3, #16
 8008446:	d109      	bne.n	800845c <_strtoul_l.constprop.0+0x3c>
 8008448:	2c30      	cmp	r4, #48	@ 0x30
 800844a:	d12c      	bne.n	80084a6 <_strtoul_l.constprop.0+0x86>
 800844c:	7828      	ldrb	r0, [r5, #0]
 800844e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008452:	2858      	cmp	r0, #88	@ 0x58
 8008454:	d127      	bne.n	80084a6 <_strtoul_l.constprop.0+0x86>
 8008456:	786c      	ldrb	r4, [r5, #1]
 8008458:	2310      	movs	r3, #16
 800845a:	3502      	adds	r5, #2
 800845c:	f04f 38ff 	mov.w	r8, #4294967295
 8008460:	2600      	movs	r6, #0
 8008462:	fbb8 f8f3 	udiv	r8, r8, r3
 8008466:	fb03 f908 	mul.w	r9, r3, r8
 800846a:	ea6f 0909 	mvn.w	r9, r9
 800846e:	4630      	mov	r0, r6
 8008470:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008474:	f1bc 0f09 	cmp.w	ip, #9
 8008478:	d81c      	bhi.n	80084b4 <_strtoul_l.constprop.0+0x94>
 800847a:	4664      	mov	r4, ip
 800847c:	42a3      	cmp	r3, r4
 800847e:	dd2a      	ble.n	80084d6 <_strtoul_l.constprop.0+0xb6>
 8008480:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008484:	d007      	beq.n	8008496 <_strtoul_l.constprop.0+0x76>
 8008486:	4580      	cmp	r8, r0
 8008488:	d322      	bcc.n	80084d0 <_strtoul_l.constprop.0+0xb0>
 800848a:	d101      	bne.n	8008490 <_strtoul_l.constprop.0+0x70>
 800848c:	45a1      	cmp	r9, r4
 800848e:	db1f      	blt.n	80084d0 <_strtoul_l.constprop.0+0xb0>
 8008490:	fb00 4003 	mla	r0, r0, r3, r4
 8008494:	2601      	movs	r6, #1
 8008496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800849a:	e7e9      	b.n	8008470 <_strtoul_l.constprop.0+0x50>
 800849c:	2c2b      	cmp	r4, #43	@ 0x2b
 800849e:	bf04      	itt	eq
 80084a0:	782c      	ldrbeq	r4, [r5, #0]
 80084a2:	1c85      	addeq	r5, r0, #2
 80084a4:	e7cd      	b.n	8008442 <_strtoul_l.constprop.0+0x22>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1d8      	bne.n	800845c <_strtoul_l.constprop.0+0x3c>
 80084aa:	2c30      	cmp	r4, #48	@ 0x30
 80084ac:	bf0c      	ite	eq
 80084ae:	2308      	moveq	r3, #8
 80084b0:	230a      	movne	r3, #10
 80084b2:	e7d3      	b.n	800845c <_strtoul_l.constprop.0+0x3c>
 80084b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80084b8:	f1bc 0f19 	cmp.w	ip, #25
 80084bc:	d801      	bhi.n	80084c2 <_strtoul_l.constprop.0+0xa2>
 80084be:	3c37      	subs	r4, #55	@ 0x37
 80084c0:	e7dc      	b.n	800847c <_strtoul_l.constprop.0+0x5c>
 80084c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80084c6:	f1bc 0f19 	cmp.w	ip, #25
 80084ca:	d804      	bhi.n	80084d6 <_strtoul_l.constprop.0+0xb6>
 80084cc:	3c57      	subs	r4, #87	@ 0x57
 80084ce:	e7d5      	b.n	800847c <_strtoul_l.constprop.0+0x5c>
 80084d0:	f04f 36ff 	mov.w	r6, #4294967295
 80084d4:	e7df      	b.n	8008496 <_strtoul_l.constprop.0+0x76>
 80084d6:	1c73      	adds	r3, r6, #1
 80084d8:	d106      	bne.n	80084e8 <_strtoul_l.constprop.0+0xc8>
 80084da:	2322      	movs	r3, #34	@ 0x22
 80084dc:	f8ce 3000 	str.w	r3, [lr]
 80084e0:	4630      	mov	r0, r6
 80084e2:	b932      	cbnz	r2, 80084f2 <_strtoul_l.constprop.0+0xd2>
 80084e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084e8:	b107      	cbz	r7, 80084ec <_strtoul_l.constprop.0+0xcc>
 80084ea:	4240      	negs	r0, r0
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	d0f9      	beq.n	80084e4 <_strtoul_l.constprop.0+0xc4>
 80084f0:	b106      	cbz	r6, 80084f4 <_strtoul_l.constprop.0+0xd4>
 80084f2:	1e69      	subs	r1, r5, #1
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	e7f5      	b.n	80084e4 <_strtoul_l.constprop.0+0xc4>
 80084f8:	08009620 	.word	0x08009620

080084fc <_strtoul_r>:
 80084fc:	f7ff bf90 	b.w	8008420 <_strtoul_l.constprop.0>

08008500 <_malloc_usable_size_r>:
 8008500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008504:	1f18      	subs	r0, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfbc      	itt	lt
 800850a:	580b      	ldrlt	r3, [r1, r0]
 800850c:	18c0      	addlt	r0, r0, r3
 800850e:	4770      	bx	lr

08008510 <sin>:
 8008510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008512:	ec53 2b10 	vmov	r2, r3, d0
 8008516:	4826      	ldr	r0, [pc, #152]	@ (80085b0 <sin+0xa0>)
 8008518:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800851c:	4281      	cmp	r1, r0
 800851e:	d807      	bhi.n	8008530 <sin+0x20>
 8008520:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80085a8 <sin+0x98>
 8008524:	2000      	movs	r0, #0
 8008526:	b005      	add	sp, #20
 8008528:	f85d eb04 	ldr.w	lr, [sp], #4
 800852c:	f000 b90c 	b.w	8008748 <__kernel_sin>
 8008530:	4820      	ldr	r0, [pc, #128]	@ (80085b4 <sin+0xa4>)
 8008532:	4281      	cmp	r1, r0
 8008534:	d908      	bls.n	8008548 <sin+0x38>
 8008536:	4610      	mov	r0, r2
 8008538:	4619      	mov	r1, r3
 800853a:	f7f7 febd 	bl	80002b8 <__aeabi_dsub>
 800853e:	ec41 0b10 	vmov	d0, r0, r1
 8008542:	b005      	add	sp, #20
 8008544:	f85d fb04 	ldr.w	pc, [sp], #4
 8008548:	4668      	mov	r0, sp
 800854a:	f000 f9b9 	bl	80088c0 <__ieee754_rem_pio2>
 800854e:	f000 0003 	and.w	r0, r0, #3
 8008552:	2801      	cmp	r0, #1
 8008554:	d00c      	beq.n	8008570 <sin+0x60>
 8008556:	2802      	cmp	r0, #2
 8008558:	d011      	beq.n	800857e <sin+0x6e>
 800855a:	b9e8      	cbnz	r0, 8008598 <sin+0x88>
 800855c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008560:	ed9d 0b00 	vldr	d0, [sp]
 8008564:	2001      	movs	r0, #1
 8008566:	f000 f8ef 	bl	8008748 <__kernel_sin>
 800856a:	ec51 0b10 	vmov	r0, r1, d0
 800856e:	e7e6      	b.n	800853e <sin+0x2e>
 8008570:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008574:	ed9d 0b00 	vldr	d0, [sp]
 8008578:	f000 f81e 	bl	80085b8 <__kernel_cos>
 800857c:	e7f5      	b.n	800856a <sin+0x5a>
 800857e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008582:	ed9d 0b00 	vldr	d0, [sp]
 8008586:	2001      	movs	r0, #1
 8008588:	f000 f8de 	bl	8008748 <__kernel_sin>
 800858c:	ec53 2b10 	vmov	r2, r3, d0
 8008590:	4610      	mov	r0, r2
 8008592:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008596:	e7d2      	b.n	800853e <sin+0x2e>
 8008598:	ed9d 1b02 	vldr	d1, [sp, #8]
 800859c:	ed9d 0b00 	vldr	d0, [sp]
 80085a0:	f000 f80a 	bl	80085b8 <__kernel_cos>
 80085a4:	e7f2      	b.n	800858c <sin+0x7c>
 80085a6:	bf00      	nop
	...
 80085b0:	3fe921fb 	.word	0x3fe921fb
 80085b4:	7fefffff 	.word	0x7fefffff

080085b8 <__kernel_cos>:
 80085b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ec57 6b10 	vmov	r6, r7, d0
 80085c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80085c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80085c8:	ed8d 1b00 	vstr	d1, [sp]
 80085cc:	d206      	bcs.n	80085dc <__kernel_cos+0x24>
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 fac3 	bl	8000b5c <__aeabi_d2iz>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f000 8088 	beq.w	80086ec <__kernel_cos+0x134>
 80085dc:	4632      	mov	r2, r6
 80085de:	463b      	mov	r3, r7
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f8 f820 	bl	8000628 <__aeabi_dmul>
 80085e8:	4b51      	ldr	r3, [pc, #324]	@ (8008730 <__kernel_cos+0x178>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	f7f8 f81a 	bl	8000628 <__aeabi_dmul>
 80085f4:	a340      	add	r3, pc, #256	@ (adr r3, 80086f8 <__kernel_cos+0x140>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	4682      	mov	sl, r0
 80085fc:	468b      	mov	fp, r1
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	f7f8 f811 	bl	8000628 <__aeabi_dmul>
 8008606:	a33e      	add	r3, pc, #248	@ (adr r3, 8008700 <__kernel_cos+0x148>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 fe56 	bl	80002bc <__adddf3>
 8008610:	4622      	mov	r2, r4
 8008612:	462b      	mov	r3, r5
 8008614:	f7f8 f808 	bl	8000628 <__aeabi_dmul>
 8008618:	a33b      	add	r3, pc, #236	@ (adr r3, 8008708 <__kernel_cos+0x150>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fe4b 	bl	80002b8 <__aeabi_dsub>
 8008622:	4622      	mov	r2, r4
 8008624:	462b      	mov	r3, r5
 8008626:	f7f7 ffff 	bl	8000628 <__aeabi_dmul>
 800862a:	a339      	add	r3, pc, #228	@ (adr r3, 8008710 <__kernel_cos+0x158>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fe44 	bl	80002bc <__adddf3>
 8008634:	4622      	mov	r2, r4
 8008636:	462b      	mov	r3, r5
 8008638:	f7f7 fff6 	bl	8000628 <__aeabi_dmul>
 800863c:	a336      	add	r3, pc, #216	@ (adr r3, 8008718 <__kernel_cos+0x160>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 fe39 	bl	80002b8 <__aeabi_dsub>
 8008646:	4622      	mov	r2, r4
 8008648:	462b      	mov	r3, r5
 800864a:	f7f7 ffed 	bl	8000628 <__aeabi_dmul>
 800864e:	a334      	add	r3, pc, #208	@ (adr r3, 8008720 <__kernel_cos+0x168>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 fe32 	bl	80002bc <__adddf3>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 ffe4 	bl	8000628 <__aeabi_dmul>
 8008660:	4622      	mov	r2, r4
 8008662:	462b      	mov	r3, r5
 8008664:	f7f7 ffe0 	bl	8000628 <__aeabi_dmul>
 8008668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800866c:	4604      	mov	r4, r0
 800866e:	460d      	mov	r5, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f7 ffd8 	bl	8000628 <__aeabi_dmul>
 8008678:	460b      	mov	r3, r1
 800867a:	4602      	mov	r2, r0
 800867c:	4629      	mov	r1, r5
 800867e:	4620      	mov	r0, r4
 8008680:	f7f7 fe1a 	bl	80002b8 <__aeabi_dsub>
 8008684:	4b2b      	ldr	r3, [pc, #172]	@ (8008734 <__kernel_cos+0x17c>)
 8008686:	4598      	cmp	r8, r3
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	d810      	bhi.n	80086b0 <__kernel_cos+0xf8>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4650      	mov	r0, sl
 8008694:	4659      	mov	r1, fp
 8008696:	f7f7 fe0f 	bl	80002b8 <__aeabi_dsub>
 800869a:	460b      	mov	r3, r1
 800869c:	4926      	ldr	r1, [pc, #152]	@ (8008738 <__kernel_cos+0x180>)
 800869e:	4602      	mov	r2, r0
 80086a0:	2000      	movs	r0, #0
 80086a2:	f7f7 fe09 	bl	80002b8 <__aeabi_dsub>
 80086a6:	ec41 0b10 	vmov	d0, r0, r1
 80086aa:	b003      	add	sp, #12
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	4b22      	ldr	r3, [pc, #136]	@ (800873c <__kernel_cos+0x184>)
 80086b2:	4921      	ldr	r1, [pc, #132]	@ (8008738 <__kernel_cos+0x180>)
 80086b4:	4598      	cmp	r8, r3
 80086b6:	bf8c      	ite	hi
 80086b8:	4d21      	ldrhi	r5, [pc, #132]	@ (8008740 <__kernel_cos+0x188>)
 80086ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80086be:	2400      	movs	r4, #0
 80086c0:	4622      	mov	r2, r4
 80086c2:	462b      	mov	r3, r5
 80086c4:	2000      	movs	r0, #0
 80086c6:	f7f7 fdf7 	bl	80002b8 <__aeabi_dsub>
 80086ca:	4622      	mov	r2, r4
 80086cc:	4680      	mov	r8, r0
 80086ce:	4689      	mov	r9, r1
 80086d0:	462b      	mov	r3, r5
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	f7f7 fdef 	bl	80002b8 <__aeabi_dsub>
 80086da:	4632      	mov	r2, r6
 80086dc:	463b      	mov	r3, r7
 80086de:	f7f7 fdeb 	bl	80002b8 <__aeabi_dsub>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4640      	mov	r0, r8
 80086e8:	4649      	mov	r1, r9
 80086ea:	e7da      	b.n	80086a2 <__kernel_cos+0xea>
 80086ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008728 <__kernel_cos+0x170>
 80086f0:	e7db      	b.n	80086aa <__kernel_cos+0xf2>
 80086f2:	bf00      	nop
 80086f4:	f3af 8000 	nop.w
 80086f8:	be8838d4 	.word	0xbe8838d4
 80086fc:	bda8fae9 	.word	0xbda8fae9
 8008700:	bdb4b1c4 	.word	0xbdb4b1c4
 8008704:	3e21ee9e 	.word	0x3e21ee9e
 8008708:	809c52ad 	.word	0x809c52ad
 800870c:	3e927e4f 	.word	0x3e927e4f
 8008710:	19cb1590 	.word	0x19cb1590
 8008714:	3efa01a0 	.word	0x3efa01a0
 8008718:	16c15177 	.word	0x16c15177
 800871c:	3f56c16c 	.word	0x3f56c16c
 8008720:	5555554c 	.word	0x5555554c
 8008724:	3fa55555 	.word	0x3fa55555
 8008728:	00000000 	.word	0x00000000
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	3fe00000 	.word	0x3fe00000
 8008734:	3fd33332 	.word	0x3fd33332
 8008738:	3ff00000 	.word	0x3ff00000
 800873c:	3fe90000 	.word	0x3fe90000
 8008740:	3fd20000 	.word	0x3fd20000
 8008744:	00000000 	.word	0x00000000

08008748 <__kernel_sin>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	ec55 4b10 	vmov	r4, r5, d0
 8008750:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008754:	b085      	sub	sp, #20
 8008756:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800875a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800875e:	4680      	mov	r8, r0
 8008760:	d205      	bcs.n	800876e <__kernel_sin+0x26>
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f8 f9f9 	bl	8000b5c <__aeabi_d2iz>
 800876a:	2800      	cmp	r0, #0
 800876c:	d052      	beq.n	8008814 <__kernel_sin+0xcc>
 800876e:	4622      	mov	r2, r4
 8008770:	462b      	mov	r3, r5
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f7 ff57 	bl	8000628 <__aeabi_dmul>
 800877a:	4682      	mov	sl, r0
 800877c:	468b      	mov	fp, r1
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 ff4f 	bl	8000628 <__aeabi_dmul>
 800878a:	a342      	add	r3, pc, #264	@ (adr r3, 8008894 <__kernel_sin+0x14c>)
 800878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008790:	e9cd 0100 	strd	r0, r1, [sp]
 8008794:	4650      	mov	r0, sl
 8008796:	4659      	mov	r1, fp
 8008798:	f7f7 ff46 	bl	8000628 <__aeabi_dmul>
 800879c:	a33f      	add	r3, pc, #252	@ (adr r3, 800889c <__kernel_sin+0x154>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 fd89 	bl	80002b8 <__aeabi_dsub>
 80087a6:	4652      	mov	r2, sl
 80087a8:	465b      	mov	r3, fp
 80087aa:	f7f7 ff3d 	bl	8000628 <__aeabi_dmul>
 80087ae:	a33d      	add	r3, pc, #244	@ (adr r3, 80088a4 <__kernel_sin+0x15c>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f7 fd82 	bl	80002bc <__adddf3>
 80087b8:	4652      	mov	r2, sl
 80087ba:	465b      	mov	r3, fp
 80087bc:	f7f7 ff34 	bl	8000628 <__aeabi_dmul>
 80087c0:	a33a      	add	r3, pc, #232	@ (adr r3, 80088ac <__kernel_sin+0x164>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f7f7 fd77 	bl	80002b8 <__aeabi_dsub>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f7 ff2b 	bl	8000628 <__aeabi_dmul>
 80087d2:	a338      	add	r3, pc, #224	@ (adr r3, 80088b4 <__kernel_sin+0x16c>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 fd70 	bl	80002bc <__adddf3>
 80087dc:	4606      	mov	r6, r0
 80087de:	460f      	mov	r7, r1
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	d11b      	bne.n	800881e <__kernel_sin+0xd6>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4650      	mov	r0, sl
 80087ec:	4659      	mov	r1, fp
 80087ee:	f7f7 ff1b 	bl	8000628 <__aeabi_dmul>
 80087f2:	a325      	add	r3, pc, #148	@ (adr r3, 8008888 <__kernel_sin+0x140>)
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f7f7 fd5e 	bl	80002b8 <__aeabi_dsub>
 80087fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008800:	f7f7 ff12 	bl	8000628 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4620      	mov	r0, r4
 800880a:	4629      	mov	r1, r5
 800880c:	f7f7 fd56 	bl	80002bc <__adddf3>
 8008810:	4604      	mov	r4, r0
 8008812:	460d      	mov	r5, r1
 8008814:	ec45 4b10 	vmov	d0, r4, r5
 8008818:	b005      	add	sp, #20
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008822:	4b1b      	ldr	r3, [pc, #108]	@ (8008890 <__kernel_sin+0x148>)
 8008824:	2200      	movs	r2, #0
 8008826:	f7f7 feff 	bl	8000628 <__aeabi_dmul>
 800882a:	4632      	mov	r2, r6
 800882c:	4680      	mov	r8, r0
 800882e:	4689      	mov	r9, r1
 8008830:	463b      	mov	r3, r7
 8008832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008836:	f7f7 fef7 	bl	8000628 <__aeabi_dmul>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	f7f7 fd39 	bl	80002b8 <__aeabi_dsub>
 8008846:	4652      	mov	r2, sl
 8008848:	465b      	mov	r3, fp
 800884a:	f7f7 feed 	bl	8000628 <__aeabi_dmul>
 800884e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008852:	f7f7 fd31 	bl	80002b8 <__aeabi_dsub>
 8008856:	a30c      	add	r3, pc, #48	@ (adr r3, 8008888 <__kernel_sin+0x140>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	4606      	mov	r6, r0
 800885e:	460f      	mov	r7, r1
 8008860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008864:	f7f7 fee0 	bl	8000628 <__aeabi_dmul>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f7 fd24 	bl	80002bc <__adddf3>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4620      	mov	r0, r4
 800887a:	4629      	mov	r1, r5
 800887c:	f7f7 fd1c 	bl	80002b8 <__aeabi_dsub>
 8008880:	e7c6      	b.n	8008810 <__kernel_sin+0xc8>
 8008882:	bf00      	nop
 8008884:	f3af 8000 	nop.w
 8008888:	55555549 	.word	0x55555549
 800888c:	3fc55555 	.word	0x3fc55555
 8008890:	3fe00000 	.word	0x3fe00000
 8008894:	5acfd57c 	.word	0x5acfd57c
 8008898:	3de5d93a 	.word	0x3de5d93a
 800889c:	8a2b9ceb 	.word	0x8a2b9ceb
 80088a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80088a4:	57b1fe7d 	.word	0x57b1fe7d
 80088a8:	3ec71de3 	.word	0x3ec71de3
 80088ac:	19c161d5 	.word	0x19c161d5
 80088b0:	3f2a01a0 	.word	0x3f2a01a0
 80088b4:	1110f8a6 	.word	0x1110f8a6
 80088b8:	3f811111 	.word	0x3f811111
 80088bc:	00000000 	.word	0x00000000

080088c0 <__ieee754_rem_pio2>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ec57 6b10 	vmov	r6, r7, d0
 80088c8:	4bc5      	ldr	r3, [pc, #788]	@ (8008be0 <__ieee754_rem_pio2+0x320>)
 80088ca:	b08d      	sub	sp, #52	@ 0x34
 80088cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80088d0:	4598      	cmp	r8, r3
 80088d2:	4604      	mov	r4, r0
 80088d4:	9704      	str	r7, [sp, #16]
 80088d6:	d807      	bhi.n	80088e8 <__ieee754_rem_pio2+0x28>
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	ed80 0b00 	vstr	d0, [r0]
 80088e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088e4:	2500      	movs	r5, #0
 80088e6:	e028      	b.n	800893a <__ieee754_rem_pio2+0x7a>
 80088e8:	4bbe      	ldr	r3, [pc, #760]	@ (8008be4 <__ieee754_rem_pio2+0x324>)
 80088ea:	4598      	cmp	r8, r3
 80088ec:	d878      	bhi.n	80089e0 <__ieee754_rem_pio2+0x120>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	4dbd      	ldr	r5, [pc, #756]	@ (8008be8 <__ieee754_rem_pio2+0x328>)
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	4630      	mov	r0, r6
 80088f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	4639      	mov	r1, r7
 80088fe:	dd38      	ble.n	8008972 <__ieee754_rem_pio2+0xb2>
 8008900:	f7f7 fcda 	bl	80002b8 <__aeabi_dsub>
 8008904:	45a8      	cmp	r8, r5
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	d01a      	beq.n	8008942 <__ieee754_rem_pio2+0x82>
 800890c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fcd1 	bl	80002b8 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4680      	mov	r8, r0
 800891c:	4689      	mov	r9, r1
 800891e:	4630      	mov	r0, r6
 8008920:	4639      	mov	r1, r7
 8008922:	f7f7 fcc9 	bl	80002b8 <__aeabi_dsub>
 8008926:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fcc4 	bl	80002b8 <__aeabi_dsub>
 8008930:	e9c4 8900 	strd	r8, r9, [r4]
 8008934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008938:	2501      	movs	r5, #1
 800893a:	4628      	mov	r0, r5
 800893c:	b00d      	add	sp, #52	@ 0x34
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	a39d      	add	r3, pc, #628	@ (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fcb6 	bl	80002b8 <__aeabi_dsub>
 800894c:	a39c      	add	r3, pc, #624	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	f7f7 fcaf 	bl	80002b8 <__aeabi_dsub>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4680      	mov	r8, r0
 8008960:	4689      	mov	r9, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fca7 	bl	80002b8 <__aeabi_dsub>
 800896a:	a395      	add	r3, pc, #596	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	e7dc      	b.n	800892c <__ieee754_rem_pio2+0x6c>
 8008972:	f7f7 fca3 	bl	80002bc <__adddf3>
 8008976:	45a8      	cmp	r8, r5
 8008978:	4606      	mov	r6, r0
 800897a:	460f      	mov	r7, r1
 800897c:	d018      	beq.n	80089b0 <__ieee754_rem_pio2+0xf0>
 800897e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fc9a 	bl	80002bc <__adddf3>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4680      	mov	r8, r0
 800898e:	4689      	mov	r9, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc90 	bl	80002b8 <__aeabi_dsub>
 8008998:	a385      	add	r3, pc, #532	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fc8d 	bl	80002bc <__adddf3>
 80089a2:	f04f 35ff 	mov.w	r5, #4294967295
 80089a6:	e9c4 8900 	strd	r8, r9, [r4]
 80089aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089ae:	e7c4      	b.n	800893a <__ieee754_rem_pio2+0x7a>
 80089b0:	a381      	add	r3, pc, #516	@ (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f7f7 fc81 	bl	80002bc <__adddf3>
 80089ba:	a381      	add	r3, pc, #516	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	4606      	mov	r6, r0
 80089c2:	460f      	mov	r7, r1
 80089c4:	f7f7 fc7a 	bl	80002bc <__adddf3>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4680      	mov	r8, r0
 80089ce:	4689      	mov	r9, r1
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f7 fc70 	bl	80002b8 <__aeabi_dsub>
 80089d8:	a379      	add	r3, pc, #484	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	e7de      	b.n	800899e <__ieee754_rem_pio2+0xde>
 80089e0:	4b82      	ldr	r3, [pc, #520]	@ (8008bec <__ieee754_rem_pio2+0x32c>)
 80089e2:	4598      	cmp	r8, r3
 80089e4:	f200 80d1 	bhi.w	8008b8a <__ieee754_rem_pio2+0x2ca>
 80089e8:	f000 f966 	bl	8008cb8 <fabs>
 80089ec:	ec57 6b10 	vmov	r6, r7, d0
 80089f0:	a375      	add	r3, pc, #468	@ (adr r3, 8008bc8 <__ieee754_rem_pio2+0x308>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	4630      	mov	r0, r6
 80089f8:	4639      	mov	r1, r7
 80089fa:	f7f7 fe15 	bl	8000628 <__aeabi_dmul>
 80089fe:	4b7c      	ldr	r3, [pc, #496]	@ (8008bf0 <__ieee754_rem_pio2+0x330>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7f7 fc5b 	bl	80002bc <__adddf3>
 8008a06:	f7f8 f8a9 	bl	8000b5c <__aeabi_d2iz>
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	f7f7 fda2 	bl	8000554 <__aeabi_i2d>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a18:	a363      	add	r3, pc, #396	@ (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fe03 	bl	8000628 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f7 fc45 	bl	80002b8 <__aeabi_dsub>
 8008a2e:	a360      	add	r3, pc, #384	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	4682      	mov	sl, r0
 8008a36:	468b      	mov	fp, r1
 8008a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a3c:	f7f7 fdf4 	bl	8000628 <__aeabi_dmul>
 8008a40:	2d1f      	cmp	r5, #31
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	dc0c      	bgt.n	8008a62 <__ieee754_rem_pio2+0x1a2>
 8008a48:	4b6a      	ldr	r3, [pc, #424]	@ (8008bf4 <__ieee754_rem_pio2+0x334>)
 8008a4a:	1e6a      	subs	r2, r5, #1
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	4543      	cmp	r3, r8
 8008a52:	d006      	beq.n	8008a62 <__ieee754_rem_pio2+0x1a2>
 8008a54:	4632      	mov	r2, r6
 8008a56:	463b      	mov	r3, r7
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f7 fc2c 	bl	80002b8 <__aeabi_dsub>
 8008a60:	e00e      	b.n	8008a80 <__ieee754_rem_pio2+0x1c0>
 8008a62:	463b      	mov	r3, r7
 8008a64:	4632      	mov	r2, r6
 8008a66:	4650      	mov	r0, sl
 8008a68:	4659      	mov	r1, fp
 8008a6a:	f7f7 fc25 	bl	80002b8 <__aeabi_dsub>
 8008a6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a78:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	dc02      	bgt.n	8008a86 <__ieee754_rem_pio2+0x1c6>
 8008a80:	e9c4 0100 	strd	r0, r1, [r4]
 8008a84:	e039      	b.n	8008afa <__ieee754_rem_pio2+0x23a>
 8008a86:	a34c      	add	r3, pc, #304	@ (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a90:	f7f7 fdca 	bl	8000628 <__aeabi_dmul>
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	4659      	mov	r1, fp
 8008aa0:	f7f7 fc0a 	bl	80002b8 <__aeabi_dsub>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4689      	mov	r9, r1
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f7f7 fc02 	bl	80002b8 <__aeabi_dsub>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f7 fbfe 	bl	80002b8 <__aeabi_dsub>
 8008abc:	a340      	add	r3, pc, #256	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aca:	f7f7 fdad 	bl	8000628 <__aeabi_dmul>
 8008ace:	4632      	mov	r2, r6
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	f7f7 fbf1 	bl	80002b8 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	f7f7 fbe9 	bl	80002b8 <__aeabi_dsub>
 8008ae6:	9a05      	ldr	r2, [sp, #20]
 8008ae8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b31      	cmp	r3, #49	@ 0x31
 8008af0:	dc20      	bgt.n	8008b34 <__ieee754_rem_pio2+0x274>
 8008af2:	e9c4 0100 	strd	r0, r1, [r4]
 8008af6:	46c2      	mov	sl, r8
 8008af8:	46cb      	mov	fp, r9
 8008afa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008afe:	4650      	mov	r0, sl
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	4659      	mov	r1, fp
 8008b06:	f7f7 fbd7 	bl	80002b8 <__aeabi_dsub>
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	f7f7 fbd3 	bl	80002b8 <__aeabi_dsub>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b1a:	f6bf af0e 	bge.w	800893a <__ieee754_rem_pio2+0x7a>
 8008b1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008b22:	6063      	str	r3, [r4, #4]
 8008b24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b28:	f8c4 8000 	str.w	r8, [r4]
 8008b2c:	60a0      	str	r0, [r4, #8]
 8008b2e:	60e3      	str	r3, [r4, #12]
 8008b30:	426d      	negs	r5, r5
 8008b32:	e702      	b.n	800893a <__ieee754_rem_pio2+0x7a>
 8008b34:	a326      	add	r3, pc, #152	@ (adr r3, 8008bd0 <__ieee754_rem_pio2+0x310>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3e:	f7f7 fd73 	bl	8000628 <__aeabi_dmul>
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fbb3 	bl	80002b8 <__aeabi_dsub>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4682      	mov	sl, r0
 8008b58:	468b      	mov	fp, r1
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	f7f7 fbab 	bl	80002b8 <__aeabi_dsub>
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	f7f7 fba7 	bl	80002b8 <__aeabi_dsub>
 8008b6a:	a31b      	add	r3, pc, #108	@ (adr r3, 8008bd8 <__ieee754_rem_pio2+0x318>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	4606      	mov	r6, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b78:	f7f7 fd56 	bl	8000628 <__aeabi_dmul>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 fb9a 	bl	80002b8 <__aeabi_dsub>
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	e764      	b.n	8008a54 <__ieee754_rem_pio2+0x194>
 8008b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf8 <__ieee754_rem_pio2+0x338>)
 8008b8c:	4598      	cmp	r8, r3
 8008b8e:	d935      	bls.n	8008bfc <__ieee754_rem_pio2+0x33c>
 8008b90:	4632      	mov	r2, r6
 8008b92:	463b      	mov	r3, r7
 8008b94:	4630      	mov	r0, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	f7f7 fb8e 	bl	80002b8 <__aeabi_dsub>
 8008b9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ba0:	e9c4 0100 	strd	r0, r1, [r4]
 8008ba4:	e69e      	b.n	80088e4 <__ieee754_rem_pio2+0x24>
 8008ba6:	bf00      	nop
 8008ba8:	54400000 	.word	0x54400000
 8008bac:	3ff921fb 	.word	0x3ff921fb
 8008bb0:	1a626331 	.word	0x1a626331
 8008bb4:	3dd0b461 	.word	0x3dd0b461
 8008bb8:	1a600000 	.word	0x1a600000
 8008bbc:	3dd0b461 	.word	0x3dd0b461
 8008bc0:	2e037073 	.word	0x2e037073
 8008bc4:	3ba3198a 	.word	0x3ba3198a
 8008bc8:	6dc9c883 	.word	0x6dc9c883
 8008bcc:	3fe45f30 	.word	0x3fe45f30
 8008bd0:	2e000000 	.word	0x2e000000
 8008bd4:	3ba3198a 	.word	0x3ba3198a
 8008bd8:	252049c1 	.word	0x252049c1
 8008bdc:	397b839a 	.word	0x397b839a
 8008be0:	3fe921fb 	.word	0x3fe921fb
 8008be4:	4002d97b 	.word	0x4002d97b
 8008be8:	3ff921fb 	.word	0x3ff921fb
 8008bec:	413921fb 	.word	0x413921fb
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	08009720 	.word	0x08009720
 8008bf8:	7fefffff 	.word	0x7fefffff
 8008bfc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008c00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008c04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008c08:	4630      	mov	r0, r6
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	f7f7 ffa6 	bl	8000b5c <__aeabi_d2iz>
 8008c10:	f7f7 fca0 	bl	8000554 <__aeabi_i2d>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c20:	f7f7 fb4a 	bl	80002b8 <__aeabi_dsub>
 8008c24:	4b22      	ldr	r3, [pc, #136]	@ (8008cb0 <__ieee754_rem_pio2+0x3f0>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	f7f7 fcfe 	bl	8000628 <__aeabi_dmul>
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	4606      	mov	r6, r0
 8008c30:	f7f7 ff94 	bl	8000b5c <__aeabi_d2iz>
 8008c34:	f7f7 fc8e 	bl	8000554 <__aeabi_i2d>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c44:	f7f7 fb38 	bl	80002b8 <__aeabi_dsub>
 8008c48:	4b19      	ldr	r3, [pc, #100]	@ (8008cb0 <__ieee754_rem_pio2+0x3f0>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f7f7 fcec 	bl	8000628 <__aeabi_dmul>
 8008c50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008c54:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008c58:	f04f 0803 	mov.w	r8, #3
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	2700      	movs	r7, #0
 8008c60:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	46c2      	mov	sl, r8
 8008c6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c6e:	f7f7 ff43 	bl	8000af8 <__aeabi_dcmpeq>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d1f4      	bne.n	8008c60 <__ieee754_rem_pio2+0x3a0>
 8008c76:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb4 <__ieee754_rem_pio2+0x3f4>)
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4653      	mov	r3, sl
 8008c82:	4621      	mov	r1, r4
 8008c84:	a806      	add	r0, sp, #24
 8008c86:	f000 f81f 	bl	8008cc8 <__kernel_rem_pio2>
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	4605      	mov	r5, r0
 8008c90:	f6bf ae53 	bge.w	800893a <__ieee754_rem_pio2+0x7a>
 8008c94:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008c98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8008ca0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008ca4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ca8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008cac:	e740      	b.n	8008b30 <__ieee754_rem_pio2+0x270>
 8008cae:	bf00      	nop
 8008cb0:	41700000 	.word	0x41700000
 8008cb4:	080097a0 	.word	0x080097a0

08008cb8 <fabs>:
 8008cb8:	ec51 0b10 	vmov	r0, r1, d0
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008cc2:	ec43 2b10 	vmov	d0, r2, r3
 8008cc6:	4770      	bx	lr

08008cc8 <__kernel_rem_pio2>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	ed2d 8b02 	vpush	{d8}
 8008cd0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008cd4:	f112 0f14 	cmn.w	r2, #20
 8008cd8:	9306      	str	r3, [sp, #24]
 8008cda:	9104      	str	r1, [sp, #16]
 8008cdc:	4bbe      	ldr	r3, [pc, #760]	@ (8008fd8 <__kernel_rem_pio2+0x310>)
 8008cde:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008ce0:	9008      	str	r0, [sp, #32]
 8008ce2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	9b06      	ldr	r3, [sp, #24]
 8008cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cee:	bfa8      	it	ge
 8008cf0:	1ed4      	subge	r4, r2, #3
 8008cf2:	9305      	str	r3, [sp, #20]
 8008cf4:	bfb2      	itee	lt
 8008cf6:	2400      	movlt	r4, #0
 8008cf8:	2318      	movge	r3, #24
 8008cfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8008cfe:	f06f 0317 	mvn.w	r3, #23
 8008d02:	fb04 3303 	mla	r3, r4, r3, r3
 8008d06:	eb03 0b02 	add.w	fp, r3, r2
 8008d0a:	9b00      	ldr	r3, [sp, #0]
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008fc8 <__kernel_rem_pio2+0x300>
 8008d12:	eb03 0802 	add.w	r8, r3, r2
 8008d16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008d18:	1aa7      	subs	r7, r4, r2
 8008d1a:	ae20      	add	r6, sp, #128	@ 0x80
 8008d1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d20:	2500      	movs	r5, #0
 8008d22:	4545      	cmp	r5, r8
 8008d24:	dd13      	ble.n	8008d4e <__kernel_rem_pio2+0x86>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	aa20      	add	r2, sp, #128	@ 0x80
 8008d2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008d2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	4598      	cmp	r8, r3
 8008d3a:	dc31      	bgt.n	8008da0 <__kernel_rem_pio2+0xd8>
 8008d3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008fc8 <__kernel_rem_pio2+0x300>
 8008d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d48:	462f      	mov	r7, r5
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	e01b      	b.n	8008d86 <__kernel_rem_pio2+0xbe>
 8008d4e:	42ef      	cmn	r7, r5
 8008d50:	d407      	bmi.n	8008d62 <__kernel_rem_pio2+0x9a>
 8008d52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d56:	f7f7 fbfd 	bl	8000554 <__aeabi_i2d>
 8008d5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d5e:	3501      	adds	r5, #1
 8008d60:	e7df      	b.n	8008d22 <__kernel_rem_pio2+0x5a>
 8008d62:	ec51 0b18 	vmov	r0, r1, d8
 8008d66:	e7f8      	b.n	8008d5a <__kernel_rem_pio2+0x92>
 8008d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008d70:	f7f7 fc5a 	bl	8000628 <__aeabi_dmul>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7c:	f7f7 fa9e 	bl	80002bc <__adddf3>
 8008d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d84:	3601      	adds	r6, #1
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	429e      	cmp	r6, r3
 8008d8a:	f1a7 0708 	sub.w	r7, r7, #8
 8008d8e:	ddeb      	ble.n	8008d68 <__kernel_rem_pio2+0xa0>
 8008d90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d94:	f108 0801 	add.w	r8, r8, #1
 8008d98:	ecaa 7b02 	vstmia	sl!, {d7}
 8008d9c:	3508      	adds	r5, #8
 8008d9e:	e7ca      	b.n	8008d36 <__kernel_rem_pio2+0x6e>
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	f8dd 8000 	ldr.w	r8, [sp]
 8008da6:	aa0c      	add	r2, sp, #48	@ 0x30
 8008da8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008db0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dbc:	ab98      	add	r3, sp, #608	@ 0x260
 8008dbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008dc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008dc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dca:	ac0c      	add	r4, sp, #48	@ 0x30
 8008dcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008dce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008dd2:	46a1      	mov	r9, r4
 8008dd4:	46c2      	mov	sl, r8
 8008dd6:	f1ba 0f00 	cmp.w	sl, #0
 8008dda:	f1a5 0508 	sub.w	r5, r5, #8
 8008dde:	dc77      	bgt.n	8008ed0 <__kernel_rem_pio2+0x208>
 8008de0:	4658      	mov	r0, fp
 8008de2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008de6:	f000 fac7 	bl	8009378 <scalbn>
 8008dea:	ec57 6b10 	vmov	r6, r7, d0
 8008dee:	2200      	movs	r2, #0
 8008df0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7f7 fc16 	bl	8000628 <__aeabi_dmul>
 8008dfc:	ec41 0b10 	vmov	d0, r0, r1
 8008e00:	f000 fb3a 	bl	8009478 <floor>
 8008e04:	4b75      	ldr	r3, [pc, #468]	@ (8008fdc <__kernel_rem_pio2+0x314>)
 8008e06:	ec51 0b10 	vmov	r0, r1, d0
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f7f7 fc0c 	bl	8000628 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fa4e 	bl	80002b8 <__aeabi_dsub>
 8008e1c:	460f      	mov	r7, r1
 8008e1e:	4606      	mov	r6, r0
 8008e20:	f7f7 fe9c 	bl	8000b5c <__aeabi_d2iz>
 8008e24:	9002      	str	r0, [sp, #8]
 8008e26:	f7f7 fb95 	bl	8000554 <__aeabi_i2d>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fa41 	bl	80002b8 <__aeabi_dsub>
 8008e36:	f1bb 0f00 	cmp.w	fp, #0
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	dd6c      	ble.n	8008f1a <__kernel_rem_pio2+0x252>
 8008e40:	f108 31ff 	add.w	r1, r8, #4294967295
 8008e44:	ab0c      	add	r3, sp, #48	@ 0x30
 8008e46:	9d02      	ldr	r5, [sp, #8]
 8008e48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e4c:	f1cb 0018 	rsb	r0, fp, #24
 8008e50:	fa43 f200 	asr.w	r2, r3, r0
 8008e54:	4415      	add	r5, r2
 8008e56:	4082      	lsls	r2, r0
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8008e5c:	9502      	str	r5, [sp, #8]
 8008e5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e62:	f1cb 0217 	rsb	r2, fp, #23
 8008e66:	fa43 f902 	asr.w	r9, r3, r2
 8008e6a:	f1b9 0f00 	cmp.w	r9, #0
 8008e6e:	dd64      	ble.n	8008f3a <__kernel_rem_pio2+0x272>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	3301      	adds	r3, #1
 8008e76:	9302      	str	r3, [sp, #8]
 8008e78:	4615      	mov	r5, r2
 8008e7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008e7e:	4590      	cmp	r8, r2
 8008e80:	f300 80b8 	bgt.w	8008ff4 <__kernel_rem_pio2+0x32c>
 8008e84:	f1bb 0f00 	cmp.w	fp, #0
 8008e88:	dd07      	ble.n	8008e9a <__kernel_rem_pio2+0x1d2>
 8008e8a:	f1bb 0f01 	cmp.w	fp, #1
 8008e8e:	f000 80bf 	beq.w	8009010 <__kernel_rem_pio2+0x348>
 8008e92:	f1bb 0f02 	cmp.w	fp, #2
 8008e96:	f000 80c6 	beq.w	8009026 <__kernel_rem_pio2+0x35e>
 8008e9a:	f1b9 0f02 	cmp.w	r9, #2
 8008e9e:	d14c      	bne.n	8008f3a <__kernel_rem_pio2+0x272>
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	494e      	ldr	r1, [pc, #312]	@ (8008fe0 <__kernel_rem_pio2+0x318>)
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f7f7 fa06 	bl	80002b8 <__aeabi_dsub>
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	2d00      	cmp	r5, #0
 8008eb2:	d042      	beq.n	8008f3a <__kernel_rem_pio2+0x272>
 8008eb4:	4658      	mov	r0, fp
 8008eb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008fd0 <__kernel_rem_pio2+0x308>
 8008eba:	f000 fa5d 	bl	8009378 <scalbn>
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	ec53 2b10 	vmov	r2, r3, d0
 8008ec6:	f7f7 f9f7 	bl	80002b8 <__aeabi_dsub>
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	e034      	b.n	8008f3a <__kernel_rem_pio2+0x272>
 8008ed0:	4b44      	ldr	r3, [pc, #272]	@ (8008fe4 <__kernel_rem_pio2+0x31c>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed8:	f7f7 fba6 	bl	8000628 <__aeabi_dmul>
 8008edc:	f7f7 fe3e 	bl	8000b5c <__aeabi_d2iz>
 8008ee0:	f7f7 fb38 	bl	8000554 <__aeabi_i2d>
 8008ee4:	4b40      	ldr	r3, [pc, #256]	@ (8008fe8 <__kernel_rem_pio2+0x320>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	f7f7 fb9c 	bl	8000628 <__aeabi_dmul>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef8:	f7f7 f9de 	bl	80002b8 <__aeabi_dsub>
 8008efc:	f7f7 fe2e 	bl	8000b5c <__aeabi_d2iz>
 8008f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f04:	f849 0b04 	str.w	r0, [r9], #4
 8008f08:	4639      	mov	r1, r7
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7f7 f9d6 	bl	80002bc <__adddf3>
 8008f10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f18:	e75d      	b.n	8008dd6 <__kernel_rem_pio2+0x10e>
 8008f1a:	d107      	bne.n	8008f2c <__kernel_rem_pio2+0x264>
 8008f1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f20:	aa0c      	add	r2, sp, #48	@ 0x30
 8008f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f26:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008f2a:	e79e      	b.n	8008e6a <__kernel_rem_pio2+0x1a2>
 8008f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008fec <__kernel_rem_pio2+0x324>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f7f7 fe00 	bl	8000b34 <__aeabi_dcmpge>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d143      	bne.n	8008fc0 <__kernel_rem_pio2+0x2f8>
 8008f38:	4681      	mov	r9, r0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4639      	mov	r1, r7
 8008f42:	f7f7 fdd9 	bl	8000af8 <__aeabi_dcmpeq>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f000 80bf 	beq.w	80090ca <__kernel_rem_pio2+0x402>
 8008f4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f50:	2200      	movs	r2, #0
 8008f52:	9900      	ldr	r1, [sp, #0]
 8008f54:	428b      	cmp	r3, r1
 8008f56:	da6e      	bge.n	8009036 <__kernel_rem_pio2+0x36e>
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	f000 8089 	beq.w	8009070 <__kernel_rem_pio2+0x3a8>
 8008f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f62:	ab0c      	add	r3, sp, #48	@ 0x30
 8008f64:	f1ab 0b18 	sub.w	fp, fp, #24
 8008f68:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0f6      	beq.n	8008f5e <__kernel_rem_pio2+0x296>
 8008f70:	4658      	mov	r0, fp
 8008f72:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008fd0 <__kernel_rem_pio2+0x308>
 8008f76:	f000 f9ff 	bl	8009378 <scalbn>
 8008f7a:	f108 0301 	add.w	r3, r8, #1
 8008f7e:	00da      	lsls	r2, r3, #3
 8008f80:	9205      	str	r2, [sp, #20]
 8008f82:	ec55 4b10 	vmov	r4, r5, d0
 8008f86:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008f88:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008fe4 <__kernel_rem_pio2+0x31c>
 8008f8c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008f90:	4646      	mov	r6, r8
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	f280 80cf 	bge.w	800913a <__kernel_rem_pio2+0x472>
 8008f9c:	4644      	mov	r4, r8
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	f2c0 80fd 	blt.w	800919e <__kernel_rem_pio2+0x4d6>
 8008fa4:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <__kernel_rem_pio2+0x328>)
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008faa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fae:	9306      	str	r3, [sp, #24]
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	f04f 0b00 	mov.w	fp, #0
 8008fb8:	2600      	movs	r6, #0
 8008fba:	eba8 0504 	sub.w	r5, r8, r4
 8008fbe:	e0e2      	b.n	8009186 <__kernel_rem_pio2+0x4be>
 8008fc0:	f04f 0902 	mov.w	r9, #2
 8008fc4:	e754      	b.n	8008e70 <__kernel_rem_pio2+0x1a8>
 8008fc6:	bf00      	nop
	...
 8008fd4:	3ff00000 	.word	0x3ff00000
 8008fd8:	080098e8 	.word	0x080098e8
 8008fdc:	40200000 	.word	0x40200000
 8008fe0:	3ff00000 	.word	0x3ff00000
 8008fe4:	3e700000 	.word	0x3e700000
 8008fe8:	41700000 	.word	0x41700000
 8008fec:	3fe00000 	.word	0x3fe00000
 8008ff0:	080098a8 	.word	0x080098a8
 8008ff4:	f854 3b04 	ldr.w	r3, [r4], #4
 8008ff8:	b945      	cbnz	r5, 800900c <__kernel_rem_pio2+0x344>
 8008ffa:	b123      	cbz	r3, 8009006 <__kernel_rem_pio2+0x33e>
 8008ffc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009000:	f844 3c04 	str.w	r3, [r4, #-4]
 8009004:	2301      	movs	r3, #1
 8009006:	3201      	adds	r2, #1
 8009008:	461d      	mov	r5, r3
 800900a:	e738      	b.n	8008e7e <__kernel_rem_pio2+0x1b6>
 800900c:	1acb      	subs	r3, r1, r3
 800900e:	e7f7      	b.n	8009000 <__kernel_rem_pio2+0x338>
 8009010:	f108 32ff 	add.w	r2, r8, #4294967295
 8009014:	ab0c      	add	r3, sp, #48	@ 0x30
 8009016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800901e:	a90c      	add	r1, sp, #48	@ 0x30
 8009020:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009024:	e739      	b.n	8008e9a <__kernel_rem_pio2+0x1d2>
 8009026:	f108 32ff 	add.w	r2, r8, #4294967295
 800902a:	ab0c      	add	r3, sp, #48	@ 0x30
 800902c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009030:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009034:	e7f3      	b.n	800901e <__kernel_rem_pio2+0x356>
 8009036:	a90c      	add	r1, sp, #48	@ 0x30
 8009038:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800903c:	3b01      	subs	r3, #1
 800903e:	430a      	orrs	r2, r1
 8009040:	e787      	b.n	8008f52 <__kernel_rem_pio2+0x28a>
 8009042:	3401      	adds	r4, #1
 8009044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009048:	2a00      	cmp	r2, #0
 800904a:	d0fa      	beq.n	8009042 <__kernel_rem_pio2+0x37a>
 800904c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800904e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009052:	eb0d 0503 	add.w	r5, sp, r3
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	aa20      	add	r2, sp, #128	@ 0x80
 800905a:	4443      	add	r3, r8
 800905c:	f108 0701 	add.w	r7, r8, #1
 8009060:	3d98      	subs	r5, #152	@ 0x98
 8009062:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009066:	4444      	add	r4, r8
 8009068:	42bc      	cmp	r4, r7
 800906a:	da04      	bge.n	8009076 <__kernel_rem_pio2+0x3ae>
 800906c:	46a0      	mov	r8, r4
 800906e:	e6a2      	b.n	8008db6 <__kernel_rem_pio2+0xee>
 8009070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009072:	2401      	movs	r4, #1
 8009074:	e7e6      	b.n	8009044 <__kernel_rem_pio2+0x37c>
 8009076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009078:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800907c:	f7f7 fa6a 	bl	8000554 <__aeabi_i2d>
 8009080:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009348 <__kernel_rem_pio2+0x680>
 8009084:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009088:	ed8d 7b02 	vstr	d7, [sp, #8]
 800908c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009090:	46b2      	mov	sl, r6
 8009092:	f04f 0800 	mov.w	r8, #0
 8009096:	9b05      	ldr	r3, [sp, #20]
 8009098:	4598      	cmp	r8, r3
 800909a:	dd05      	ble.n	80090a8 <__kernel_rem_pio2+0x3e0>
 800909c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090a0:	3701      	adds	r7, #1
 80090a2:	eca5 7b02 	vstmia	r5!, {d7}
 80090a6:	e7df      	b.n	8009068 <__kernel_rem_pio2+0x3a0>
 80090a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80090ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80090b0:	f7f7 faba 	bl	8000628 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090bc:	f7f7 f8fe 	bl	80002bc <__adddf3>
 80090c0:	f108 0801 	add.w	r8, r8, #1
 80090c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090c8:	e7e5      	b.n	8009096 <__kernel_rem_pio2+0x3ce>
 80090ca:	f1cb 0000 	rsb	r0, fp, #0
 80090ce:	ec47 6b10 	vmov	d0, r6, r7
 80090d2:	f000 f951 	bl	8009378 <scalbn>
 80090d6:	ec55 4b10 	vmov	r4, r5, d0
 80090da:	4b9d      	ldr	r3, [pc, #628]	@ (8009350 <__kernel_rem_pio2+0x688>)
 80090dc:	2200      	movs	r2, #0
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 fd27 	bl	8000b34 <__aeabi_dcmpge>
 80090e6:	b300      	cbz	r0, 800912a <__kernel_rem_pio2+0x462>
 80090e8:	4b9a      	ldr	r3, [pc, #616]	@ (8009354 <__kernel_rem_pio2+0x68c>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f7f7 fa9a 	bl	8000628 <__aeabi_dmul>
 80090f4:	f7f7 fd32 	bl	8000b5c <__aeabi_d2iz>
 80090f8:	4606      	mov	r6, r0
 80090fa:	f7f7 fa2b 	bl	8000554 <__aeabi_i2d>
 80090fe:	4b94      	ldr	r3, [pc, #592]	@ (8009350 <__kernel_rem_pio2+0x688>)
 8009100:	2200      	movs	r2, #0
 8009102:	f7f7 fa91 	bl	8000628 <__aeabi_dmul>
 8009106:	460b      	mov	r3, r1
 8009108:	4602      	mov	r2, r0
 800910a:	4629      	mov	r1, r5
 800910c:	4620      	mov	r0, r4
 800910e:	f7f7 f8d3 	bl	80002b8 <__aeabi_dsub>
 8009112:	f7f7 fd23 	bl	8000b5c <__aeabi_d2iz>
 8009116:	ab0c      	add	r3, sp, #48	@ 0x30
 8009118:	f10b 0b18 	add.w	fp, fp, #24
 800911c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009120:	f108 0801 	add.w	r8, r8, #1
 8009124:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009128:	e722      	b.n	8008f70 <__kernel_rem_pio2+0x2a8>
 800912a:	4620      	mov	r0, r4
 800912c:	4629      	mov	r1, r5
 800912e:	f7f7 fd15 	bl	8000b5c <__aeabi_d2iz>
 8009132:	ab0c      	add	r3, sp, #48	@ 0x30
 8009134:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009138:	e71a      	b.n	8008f70 <__kernel_rem_pio2+0x2a8>
 800913a:	ab0c      	add	r3, sp, #48	@ 0x30
 800913c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009140:	f7f7 fa08 	bl	8000554 <__aeabi_i2d>
 8009144:	4622      	mov	r2, r4
 8009146:	462b      	mov	r3, r5
 8009148:	f7f7 fa6e 	bl	8000628 <__aeabi_dmul>
 800914c:	4652      	mov	r2, sl
 800914e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009152:	465b      	mov	r3, fp
 8009154:	4620      	mov	r0, r4
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 fa66 	bl	8000628 <__aeabi_dmul>
 800915c:	3e01      	subs	r6, #1
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	e718      	b.n	8008f96 <__kernel_rem_pio2+0x2ce>
 8009164:	9906      	ldr	r1, [sp, #24]
 8009166:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800916a:	9106      	str	r1, [sp, #24]
 800916c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009170:	f7f7 fa5a 	bl	8000628 <__aeabi_dmul>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4650      	mov	r0, sl
 800917a:	4659      	mov	r1, fp
 800917c:	f7f7 f89e 	bl	80002bc <__adddf3>
 8009180:	3601      	adds	r6, #1
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	429e      	cmp	r6, r3
 800918a:	dc01      	bgt.n	8009190 <__kernel_rem_pio2+0x4c8>
 800918c:	42b5      	cmp	r5, r6
 800918e:	dae9      	bge.n	8009164 <__kernel_rem_pio2+0x49c>
 8009190:	ab48      	add	r3, sp, #288	@ 0x120
 8009192:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009196:	e9c5 ab00 	strd	sl, fp, [r5]
 800919a:	3c01      	subs	r4, #1
 800919c:	e6ff      	b.n	8008f9e <__kernel_rem_pio2+0x2d6>
 800919e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	dc0b      	bgt.n	80091bc <__kernel_rem_pio2+0x4f4>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dc39      	bgt.n	800921c <__kernel_rem_pio2+0x554>
 80091a8:	d05d      	beq.n	8009266 <__kernel_rem_pio2+0x59e>
 80091aa:	9b02      	ldr	r3, [sp, #8]
 80091ac:	f003 0007 	and.w	r0, r3, #7
 80091b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80091b4:	ecbd 8b02 	vpop	{d8}
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d1f3      	bne.n	80091aa <__kernel_rem_pio2+0x4e2>
 80091c2:	9b05      	ldr	r3, [sp, #20]
 80091c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80091c8:	eb0d 0403 	add.w	r4, sp, r3
 80091cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80091d0:	4625      	mov	r5, r4
 80091d2:	46c2      	mov	sl, r8
 80091d4:	f1ba 0f00 	cmp.w	sl, #0
 80091d8:	f1a5 0508 	sub.w	r5, r5, #8
 80091dc:	dc6b      	bgt.n	80092b6 <__kernel_rem_pio2+0x5ee>
 80091de:	4645      	mov	r5, r8
 80091e0:	2d01      	cmp	r5, #1
 80091e2:	f1a4 0408 	sub.w	r4, r4, #8
 80091e6:	f300 8087 	bgt.w	80092f8 <__kernel_rem_pio2+0x630>
 80091ea:	9c05      	ldr	r4, [sp, #20]
 80091ec:	ab48      	add	r3, sp, #288	@ 0x120
 80091ee:	441c      	add	r4, r3
 80091f0:	2000      	movs	r0, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	f1b8 0f01 	cmp.w	r8, #1
 80091f8:	f300 809c 	bgt.w	8009334 <__kernel_rem_pio2+0x66c>
 80091fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009200:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009204:	f1b9 0f00 	cmp.w	r9, #0
 8009208:	f040 80a6 	bne.w	8009358 <__kernel_rem_pio2+0x690>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	e9c3 7800 	strd	r7, r8, [r3]
 8009212:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009216:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800921a:	e7c6      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 800921c:	9d05      	ldr	r5, [sp, #20]
 800921e:	ab48      	add	r3, sp, #288	@ 0x120
 8009220:	441d      	add	r5, r3
 8009222:	4644      	mov	r4, r8
 8009224:	2000      	movs	r0, #0
 8009226:	2100      	movs	r1, #0
 8009228:	2c00      	cmp	r4, #0
 800922a:	da35      	bge.n	8009298 <__kernel_rem_pio2+0x5d0>
 800922c:	f1b9 0f00 	cmp.w	r9, #0
 8009230:	d038      	beq.n	80092a4 <__kernel_rem_pio2+0x5dc>
 8009232:	4602      	mov	r2, r0
 8009234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009238:	9c04      	ldr	r4, [sp, #16]
 800923a:	e9c4 2300 	strd	r2, r3, [r4]
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009246:	f7f7 f837 	bl	80002b8 <__aeabi_dsub>
 800924a:	ad4a      	add	r5, sp, #296	@ 0x128
 800924c:	2401      	movs	r4, #1
 800924e:	45a0      	cmp	r8, r4
 8009250:	da2b      	bge.n	80092aa <__kernel_rem_pio2+0x5e2>
 8009252:	f1b9 0f00 	cmp.w	r9, #0
 8009256:	d002      	beq.n	800925e <__kernel_rem_pio2+0x596>
 8009258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800925c:	4619      	mov	r1, r3
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009264:	e7a1      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 8009266:	9c05      	ldr	r4, [sp, #20]
 8009268:	ab48      	add	r3, sp, #288	@ 0x120
 800926a:	441c      	add	r4, r3
 800926c:	2000      	movs	r0, #0
 800926e:	2100      	movs	r1, #0
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	da09      	bge.n	800928a <__kernel_rem_pio2+0x5c2>
 8009276:	f1b9 0f00 	cmp.w	r9, #0
 800927a:	d002      	beq.n	8009282 <__kernel_rem_pio2+0x5ba>
 800927c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009280:	4619      	mov	r1, r3
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	e9c3 0100 	strd	r0, r1, [r3]
 8009288:	e78f      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 800928a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800928e:	f7f7 f815 	bl	80002bc <__adddf3>
 8009292:	f108 38ff 	add.w	r8, r8, #4294967295
 8009296:	e7eb      	b.n	8009270 <__kernel_rem_pio2+0x5a8>
 8009298:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800929c:	f7f7 f80e 	bl	80002bc <__adddf3>
 80092a0:	3c01      	subs	r4, #1
 80092a2:	e7c1      	b.n	8009228 <__kernel_rem_pio2+0x560>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	e7c6      	b.n	8009238 <__kernel_rem_pio2+0x570>
 80092aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80092ae:	f7f7 f805 	bl	80002bc <__adddf3>
 80092b2:	3401      	adds	r4, #1
 80092b4:	e7cb      	b.n	800924e <__kernel_rem_pio2+0x586>
 80092b6:	ed95 7b00 	vldr	d7, [r5]
 80092ba:	ed8d 7b00 	vstr	d7, [sp]
 80092be:	ed95 7b02 	vldr	d7, [r5, #8]
 80092c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c6:	ec53 2b17 	vmov	r2, r3, d7
 80092ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092ce:	f7f6 fff5 	bl	80002bc <__adddf3>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092de:	f7f6 ffeb 	bl	80002b8 <__aeabi_dsub>
 80092e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e6:	f7f6 ffe9 	bl	80002bc <__adddf3>
 80092ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80092f2:	e9c5 6700 	strd	r6, r7, [r5]
 80092f6:	e76d      	b.n	80091d4 <__kernel_rem_pio2+0x50c>
 80092f8:	ed94 7b00 	vldr	d7, [r4]
 80092fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009300:	ec51 0b17 	vmov	r0, r1, d7
 8009304:	4652      	mov	r2, sl
 8009306:	465b      	mov	r3, fp
 8009308:	ed8d 7b00 	vstr	d7, [sp]
 800930c:	f7f6 ffd6 	bl	80002bc <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4606      	mov	r6, r0
 8009316:	460f      	mov	r7, r1
 8009318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800931c:	f7f6 ffcc 	bl	80002b8 <__aeabi_dsub>
 8009320:	4652      	mov	r2, sl
 8009322:	465b      	mov	r3, fp
 8009324:	f7f6 ffca 	bl	80002bc <__adddf3>
 8009328:	3d01      	subs	r5, #1
 800932a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800932e:	e9c4 6700 	strd	r6, r7, [r4]
 8009332:	e755      	b.n	80091e0 <__kernel_rem_pio2+0x518>
 8009334:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009338:	f7f6 ffc0 	bl	80002bc <__adddf3>
 800933c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009340:	e758      	b.n	80091f4 <__kernel_rem_pio2+0x52c>
 8009342:	bf00      	nop
 8009344:	f3af 8000 	nop.w
	...
 8009350:	41700000 	.word	0x41700000
 8009354:	3e700000 	.word	0x3e700000
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	601f      	str	r7, [r3, #0]
 800935e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009362:	605c      	str	r4, [r3, #4]
 8009364:	609d      	str	r5, [r3, #8]
 8009366:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800936a:	60d3      	str	r3, [r2, #12]
 800936c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009370:	6110      	str	r0, [r2, #16]
 8009372:	6153      	str	r3, [r2, #20]
 8009374:	e719      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 8009376:	bf00      	nop

08009378 <scalbn>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	ec55 4b10 	vmov	r4, r5, d0
 800937e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009382:	4606      	mov	r6, r0
 8009384:	462b      	mov	r3, r5
 8009386:	b991      	cbnz	r1, 80093ae <scalbn+0x36>
 8009388:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800938c:	4323      	orrs	r3, r4
 800938e:	d03d      	beq.n	800940c <scalbn+0x94>
 8009390:	4b35      	ldr	r3, [pc, #212]	@ (8009468 <scalbn+0xf0>)
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	2200      	movs	r2, #0
 8009398:	f7f7 f946 	bl	8000628 <__aeabi_dmul>
 800939c:	4b33      	ldr	r3, [pc, #204]	@ (800946c <scalbn+0xf4>)
 800939e:	429e      	cmp	r6, r3
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	da0f      	bge.n	80093c6 <scalbn+0x4e>
 80093a6:	a328      	add	r3, pc, #160	@ (adr r3, 8009448 <scalbn+0xd0>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	e01e      	b.n	80093ec <scalbn+0x74>
 80093ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80093b2:	4291      	cmp	r1, r2
 80093b4:	d10b      	bne.n	80093ce <scalbn+0x56>
 80093b6:	4622      	mov	r2, r4
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff7e 	bl	80002bc <__adddf3>
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	e022      	b.n	800940c <scalbn+0x94>
 80093c6:	460b      	mov	r3, r1
 80093c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093cc:	3936      	subs	r1, #54	@ 0x36
 80093ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80093d2:	4296      	cmp	r6, r2
 80093d4:	dd0d      	ble.n	80093f2 <scalbn+0x7a>
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009450 <scalbn+0xd8>)
 80093da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093de:	da02      	bge.n	80093e6 <scalbn+0x6e>
 80093e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009458 <scalbn+0xe0>)
 80093e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8009450 <scalbn+0xd8>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f7 f91c 	bl	8000628 <__aeabi_dmul>
 80093f0:	e7e6      	b.n	80093c0 <scalbn+0x48>
 80093f2:	1872      	adds	r2, r6, r1
 80093f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80093f8:	428a      	cmp	r2, r1
 80093fa:	dcec      	bgt.n	80093d6 <scalbn+0x5e>
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	dd08      	ble.n	8009412 <scalbn+0x9a>
 8009400:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009404:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009408:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800940c:	ec45 4b10 	vmov	d0, r4, r5
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009416:	da08      	bge.n	800942a <scalbn+0xb2>
 8009418:	2d00      	cmp	r5, #0
 800941a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009448 <scalbn+0xd0>)
 800941c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009420:	dac1      	bge.n	80093a6 <scalbn+0x2e>
 8009422:	a10f      	add	r1, pc, #60	@ (adr r1, 8009460 <scalbn+0xe8>)
 8009424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009428:	e7bd      	b.n	80093a6 <scalbn+0x2e>
 800942a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800942e:	3236      	adds	r2, #54	@ 0x36
 8009430:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009438:	4620      	mov	r0, r4
 800943a:	4b0d      	ldr	r3, [pc, #52]	@ (8009470 <scalbn+0xf8>)
 800943c:	4629      	mov	r1, r5
 800943e:	2200      	movs	r2, #0
 8009440:	e7d4      	b.n	80093ec <scalbn+0x74>
 8009442:	bf00      	nop
 8009444:	f3af 8000 	nop.w
 8009448:	c2f8f359 	.word	0xc2f8f359
 800944c:	01a56e1f 	.word	0x01a56e1f
 8009450:	8800759c 	.word	0x8800759c
 8009454:	7e37e43c 	.word	0x7e37e43c
 8009458:	8800759c 	.word	0x8800759c
 800945c:	fe37e43c 	.word	0xfe37e43c
 8009460:	c2f8f359 	.word	0xc2f8f359
 8009464:	81a56e1f 	.word	0x81a56e1f
 8009468:	43500000 	.word	0x43500000
 800946c:	ffff3cb0 	.word	0xffff3cb0
 8009470:	3c900000 	.word	0x3c900000
 8009474:	00000000 	.word	0x00000000

08009478 <floor>:
 8009478:	ec51 0b10 	vmov	r0, r1, d0
 800947c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009488:	2e13      	cmp	r6, #19
 800948a:	460c      	mov	r4, r1
 800948c:	4605      	mov	r5, r0
 800948e:	4680      	mov	r8, r0
 8009490:	dc34      	bgt.n	80094fc <floor+0x84>
 8009492:	2e00      	cmp	r6, #0
 8009494:	da17      	bge.n	80094c6 <floor+0x4e>
 8009496:	a332      	add	r3, pc, #200	@ (adr r3, 8009560 <floor+0xe8>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f6 ff0e 	bl	80002bc <__adddf3>
 80094a0:	2200      	movs	r2, #0
 80094a2:	2300      	movs	r3, #0
 80094a4:	f7f7 fb50 	bl	8000b48 <__aeabi_dcmpgt>
 80094a8:	b150      	cbz	r0, 80094c0 <floor+0x48>
 80094aa:	2c00      	cmp	r4, #0
 80094ac:	da55      	bge.n	800955a <floor+0xe2>
 80094ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80094b2:	432c      	orrs	r4, r5
 80094b4:	2500      	movs	r5, #0
 80094b6:	42ac      	cmp	r4, r5
 80094b8:	4c2b      	ldr	r4, [pc, #172]	@ (8009568 <floor+0xf0>)
 80094ba:	bf08      	it	eq
 80094bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	e023      	b.n	800950e <floor+0x96>
 80094c6:	4f29      	ldr	r7, [pc, #164]	@ (800956c <floor+0xf4>)
 80094c8:	4137      	asrs	r7, r6
 80094ca:	ea01 0307 	and.w	r3, r1, r7
 80094ce:	4303      	orrs	r3, r0
 80094d0:	d01d      	beq.n	800950e <floor+0x96>
 80094d2:	a323      	add	r3, pc, #140	@ (adr r3, 8009560 <floor+0xe8>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f6 fef0 	bl	80002bc <__adddf3>
 80094dc:	2200      	movs	r2, #0
 80094de:	2300      	movs	r3, #0
 80094e0:	f7f7 fb32 	bl	8000b48 <__aeabi_dcmpgt>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d0eb      	beq.n	80094c0 <floor+0x48>
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	bfbe      	ittt	lt
 80094ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80094f0:	4133      	asrlt	r3, r6
 80094f2:	18e4      	addlt	r4, r4, r3
 80094f4:	ea24 0407 	bic.w	r4, r4, r7
 80094f8:	2500      	movs	r5, #0
 80094fa:	e7e1      	b.n	80094c0 <floor+0x48>
 80094fc:	2e33      	cmp	r6, #51	@ 0x33
 80094fe:	dd0a      	ble.n	8009516 <floor+0x9e>
 8009500:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009504:	d103      	bne.n	800950e <floor+0x96>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	f7f6 fed7 	bl	80002bc <__adddf3>
 800950e:	ec41 0b10 	vmov	d0, r0, r1
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009516:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800951a:	f04f 37ff 	mov.w	r7, #4294967295
 800951e:	40df      	lsrs	r7, r3
 8009520:	4207      	tst	r7, r0
 8009522:	d0f4      	beq.n	800950e <floor+0x96>
 8009524:	a30e      	add	r3, pc, #56	@ (adr r3, 8009560 <floor+0xe8>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 fec7 	bl	80002bc <__adddf3>
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	f7f7 fb09 	bl	8000b48 <__aeabi_dcmpgt>
 8009536:	2800      	cmp	r0, #0
 8009538:	d0c2      	beq.n	80094c0 <floor+0x48>
 800953a:	2c00      	cmp	r4, #0
 800953c:	da0a      	bge.n	8009554 <floor+0xdc>
 800953e:	2e14      	cmp	r6, #20
 8009540:	d101      	bne.n	8009546 <floor+0xce>
 8009542:	3401      	adds	r4, #1
 8009544:	e006      	b.n	8009554 <floor+0xdc>
 8009546:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800954a:	2301      	movs	r3, #1
 800954c:	40b3      	lsls	r3, r6
 800954e:	441d      	add	r5, r3
 8009550:	4545      	cmp	r5, r8
 8009552:	d3f6      	bcc.n	8009542 <floor+0xca>
 8009554:	ea25 0507 	bic.w	r5, r5, r7
 8009558:	e7b2      	b.n	80094c0 <floor+0x48>
 800955a:	2500      	movs	r5, #0
 800955c:	462c      	mov	r4, r5
 800955e:	e7af      	b.n	80094c0 <floor+0x48>
 8009560:	8800759c 	.word	0x8800759c
 8009564:	7e37e43c 	.word	0x7e37e43c
 8009568:	bff00000 	.word	0xbff00000
 800956c:	000fffff 	.word	0x000fffff

08009570 <_init>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr

0800957c <_fini>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr
